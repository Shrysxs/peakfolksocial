rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own profile
    match /users/{userId} {
      allow read: if true; // Public profiles (consider limiting fields via rules if needed)
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Posts are publicly readable, but only owners can write
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Comments are publicly readable, authenticated users can create
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Likes are publicly readable, authenticated users can create/delete their own
    match /likes/{likeId} {
      allow read: if true;
      allow create, delete: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Follows are publicly readable, authenticated users can create/delete their own
    match /follows/{followId} {
      allow read: if true;
      allow create, delete: if request.auth != null && request.auth.uid == request.resource.data.followerId;
    }
    
    // Stories are publicly readable, authenticated users can create their own
    match /stories/{storyId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Notifications are private to the recipient user
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.toUserId;
    }
    
    // Plans: public plans are readable by anyone; private plans readable only by owner or followers
    match /plans/{planId} {
      allow read: if
        // Public plan
        resource.data.isPrivate == false
        ||
        // Owner
        (request.auth != null && request.auth.uid == resource.data.userId)
        ||
        // Follower of the plan owner
        (request.auth != null &&
          get(/databases/$(database)/documents/users/$(resource.data.userId)).data.followerIds.hasAny([request.auth.uid]));
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Plan messages are readable by plan participants, authenticated users can create
    match /planMessages/{messageId} {
      allow read: if request.auth != null &&
        // Ensure the reader is a participant of the plan referenced by the message
        (get(/databases/$(database)/documents/plans/$(resource.data.planId)).data.participantIds.hasAny([request.auth.uid])
          || get(/databases/$(database)/documents/plans/$(resource.data.planId)).data.userId == request.auth.uid);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.senderId;
    }

    // Direct messages between users
    match /messages/{messageId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      allow update, delete: if false; // Prevent updates/deletes for safety
    }
  }
}
