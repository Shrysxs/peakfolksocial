[{"filePath":"/home/shreyas/dev./peakfolksocial/app/(app)/messages/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Check' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCheck' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Loader2' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toDate' is defined but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":16},{"ruleId":"jsx-a11y/role-supports-aria-props","severity":1,"message":"The attribute aria-selected is not supported by the role button.","line":88,"column":5,"nodeType":"JSXOpeningElement","endLine":98,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isTyping' is assigned a value but never used.","line":186,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'typingTimeout' is assigned a value but never used.","line":187,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setTypingTimeout' is assigned a value but never used.","line":187,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'otherUserTyping' is assigned a value but never used.","line":199,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showInboxMobile' is assigned a value but never used.","line":203,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":203,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":329,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11222,11225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11222,11225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sortedConversations' is assigned a value but never used.","line":338,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":338,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'conversationId' is defined but never used.","line":370,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":370,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport * as React from \"react\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Send,\n  Trash2,\n  VolumeX,\n  Check,\n  CheckCheck,\n  Loader2,\n  MessageCircle,\n  Users,\n  X,\n} from \"lucide-react\"\nimport { useAuth } from \"@/contexts/auth-context\";\nimport useChat from \"@/hooks/use-chat\"; // Use the new useChat hook for individual conversations\nimport useMessages from \"@/hooks/use-messages\"; // Use the new useMessages hook for conversation list\nimport { LoadingSpinner } from \"@/components/loading-spinner\";\nimport { toDate } from \"@/lib/firebase-services\";\nimport Link from \"next/link\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useSearchParams, useRouter } from \"next/navigation\";\nimport {\n  doc,\n  setDoc,\n  onSnapshot,\n  deleteDoc,\n  collection,\n  query,\n  where,\n  getDocs,\n  writeBatch,\n} from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\n\ninterface ConversationType {\n  id: string;\n  senderId: string;\n  receiverId: string;\n  content: string;\n  isRead: boolean;\n  createdAt: Date | { toDate?: () => Date };\n  updatedAt?: Date;\n  author?: {\n    id: string;\n    username: string;\n    displayName?: string;\n    photoURL?: string;\n  };\n}\n\n// New ChatListItem component (inline for now, can be moved to components/ later)\nfunction ChatListItem({\n  conversation,\n  isSelected,\n  onSelect,\n  onDelete,\n  onMute,\n  dbUserId,\n}: {\n  conversation: ConversationType;\n  isSelected: boolean;\n  onSelect: () => void;\n  onDelete: () => void;\n  onMute: () => void;\n  dbUserId: string;\n}) {\n  const displayUser = conversation.author;\n  const unreadCount =\n    conversation.receiverId === dbUserId && !conversation.isRead ? 1 : 0;\n  const lastMessageTime = conversation.updatedAt\n    ? new Date(conversation.updatedAt).toLocaleTimeString([], {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      })\n    : \"\";\n  \n  // Check if message is recent (within last 5 minutes) for real-time indicator\n  const isRecent = conversation.updatedAt && \n    (new Date().getTime() - new Date(conversation.updatedAt).getTime()) < 5 * 60 * 1000;\n\n  return (\n    <div\n      className={`group flex items-center space-x-3 p-3 rounded-xl w-full text-left transition-all duration-200 relative cursor-pointer shadow-md ${\n        isSelected\n          ? \"bg-orange-600/30 border border-orange-500\"\n          : \"hover:bg-gray-900/80\"\n      }`}\n      onClick={onSelect}\n      tabIndex={0}\n      aria-selected={isSelected}\n      role=\"button\"\n    >\n      <div className=\"relative\">\n        <Avatar className=\"h-11 w-11 border-2 border-orange-500 shadow-orange-500/30 shadow-md\">\n          <AvatarImage\n            src={displayUser?.photoURL || \"/placeholder.svg\"}\n            alt={displayUser?.username}\n          />\n          <AvatarFallback>\n            {displayUser?.username?.[0]?.toUpperCase() || \"U\"}\n          </AvatarFallback>\n        </Avatar>\n        {/* Online indicator - you can implement actual online status later */}\n        <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-black\"></div>\n      </div>\n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"font-semibold text-white truncate text-base\">\n            {displayUser?.displayName || \"Unknown User\"}\n          </span>\n          {isRecent && (\n            <div className=\"w-2 h-2 bg-orange-500 rounded-full animate-pulse\"></div>\n          )}\n        </div>\n        <span className=\"text-sm text-gray-400 truncate max-w-[180px]\">\n          {conversation.content}\n        </span>\n      </div>\n      <div className=\"flex flex-col items-end ml-2 min-w-[48px]\">\n        <span className=\"text-xs text-gray-500 mb-1\">{lastMessageTime}</span>\n        {unreadCount > 0 && (\n          <span className=\"bg-orange-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold shadow-orange-500/40 shadow animate-pulse\">\n            {unreadCount}\n          </span>\n        )}\n      </div>\n      {/* Quick actions: show on hover or always on mobile */}\n      <div className=\"absolute right-2 top-1/2 -translate-y-1/2 flex space-x-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-10\">\n        <button\n          className=\"p-1 rounded-full bg-gray-800 hover:bg-orange-600 text-gray-400 hover:text-white focus:outline-none\"\n          title=\"Mute\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onMute();\n          }}\n        >\n          <VolumeX className=\"h-4 w-4\" />\n        </button>\n        <button\n          className=\"p-1 rounded-full bg-gray-800 hover:bg-red-600 text-gray-400 hover:text-white focus:outline-none\"\n          title=\"Delete\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onDelete();\n          }}\n        >\n          <Trash2 className=\"h-4 w-4\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\n// Add deleteChat function\nasync function deleteChat(currentUserId: string, otherUserId: string) {\n  if (\n    !window.confirm(\n      \"Are you sure you want to delete this chat? This cannot be undone.\",\n    )\n  )\n    return;\n  const conversationId = [currentUserId, otherUserId].sort().join(\"_\");\n  const messagesQuery = query(\n    collection(db, \"messages\"),\n    where(\"conversationId\", \"==\", conversationId),\n  );\n  const snapshot = await getDocs(messagesQuery);\n  const batch = writeBatch(db);\n  snapshot.docs.forEach((doc) => batch.delete(doc.ref));\n  await batch.commit();\n}\n\nexport default function MessagesPage() {\n  const { dbUser } = useAuth();\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const chatWith = searchParams.get(\"chatWith\");\n  const [selectedConversation, setSelectedConversation] = useState<ConversationType | null>(null);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingTimeout, setTypingTimeout] = useState<NodeJS.Timeout | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Use the new hooks\n  const { conversations, isLoading: isLoadingConversations, isError: isErrorConversations } = useMessages(dbUser?.id || \"\");\n  const { messages, isLoadingMessages, isErrorMessages, sendMessage } = useChat(\n    dbUser?.id || \"\",\n    chatWith || \"\"\n  );\n\n  // Add typing indicator state\n  const [otherUserTyping, setOtherUserTyping] = useState(false);\n\n  // Add mobile state\n  const isMobile = typeof window !== \"undefined\" && window.innerWidth < 768;\n  const [showInboxMobile, setShowInboxMobile] = useState(true);\n\n  // Move handleInput function outside of useEffect to avoid scoping issues\n  const handleInput = (typing: boolean) => {\n    if (!dbUser?.id || !chatWith) return;\n    \n    const typingDocId = [dbUser.id, chatWith].sort().join(\"_\");\n    const typingDocRef = doc(db, \"typingStatus\", typingDocId);\n    \n    setIsTyping(typing);\n    if (typing) {\n      setDoc(typingDocRef, { typing: dbUser.id });\n    } else {\n      deleteDoc(typingDocRef);\n    }\n  };\n\n  // Typing indicator Firestore logic\n  useEffect(() => {\n    if (!dbUser?.id || !chatWith) return;\n    const typingDocId = [dbUser.id, chatWith].sort().join(\"_\");\n    const typingDocRef = doc(db, \"typingStatus\", typingDocId);\n\n    const typingTimeout: NodeJS.Timeout | null = null;\n\n    // Listen for typing status from the other user\n    const unsubscribe = onSnapshot(typingDocRef, (docSnap) => {\n      const data = docSnap.data();\n      setOtherUserTyping(Boolean(data && data.typing && data.typing !== dbUser.id));\n    });\n\n    return () => {\n      if (typingTimeout) clearTimeout(typingTimeout);\n      unsubscribe();\n      deleteDoc(typingDocRef);\n    };\n  }, [dbUser?.id, chatWith]);\n\n  // Find the selected chat user from conversations\n  const selectedChatUser =\n    conversations.find(\n      (conv) =>\n        conv.senderId === chatWith ||\n        conv.receiverId === chatWith,\n    )?.author || null; // Fallback to null if not found\n\n  // Add robust null check and error fallback for selectedChatUser\n  const chatUserError =\n    chatWith && !selectedChatUser\n      ? \"This conversation cannot be loaded. The user may no longer exist.\"\n      : null;\n\n  useEffect(() => {\n    if (chatWith && chatWith !== selectedConversation?.id) {\n      setSelectedConversation(null); // Clear selected conversation if chatWith changes\n    }\n  }, [chatWith, selectedConversation?.id]);\n\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [messages]);\n\n  // Mark messages as read when a chat is selected and messages load\n  // This logic is now handled internally by useChat or a separate markMessagesAsRead hook if needed.\n  // The previous markMessagesAsRead was part of use-messages.ts, which is now the inbox hook.\n  // I'll add a direct call to firebase-services.ts for markMessagesAsRead here for the active chat.\n  useEffect(() => {\n    if (dbUser && chatWith && messages && messages.length > 0) {\n      // Only mark messages sent by the other user as read\n      const unreadMessagesFromOtherUser = messages.filter(\n        (msg) => msg.senderId === chatWith && !msg.isRead,\n      );\n      if (unreadMessagesFromOtherUser.length > 0) {\n        // Call the service directly or create a specific mutation for it\n        // For simplicity, I'll call the service directly here.\n        // In a larger app, this might be a dedicated mutation.\n        import(\"@/lib/firebase-services\").then(({ markMessagesAsRead }) => {\n          markMessagesAsRead(chatWith, dbUser.id);\n        });\n      }\n    }\n  }, [dbUser, chatWith, messages]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!dbUser || !chatWith || !messageInput.trim()) return;\n\n    sendMessage(\n      {\n        senderId: dbUser.id,\n        receiverId: chatWith,\n        content: messageInput.trim(),\n      },\n      {\n        onSuccess: () => {\n          setMessageInput(\"\");\n        },\n      },\n    );\n  };\n\n  // Mobile interaction effect\n  useEffect(() => {\n    if (chatWith && isMobile) {\n      setShowInboxMobile(false);\n    }\n  }, [chatWith, isMobile]);\n\n  if (!dbUser) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-full text-white max-w-4xl mx-auto p-4 md:p-6\">\n        <div className=\"glass-card p-8 rounded-lg shadow-md text-center max-w-md\">\n          <MessageCircle className=\"h-16 w-16 text-orange-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-bold text-white mb-2\">Start Connecting</h2>\n          <p className=\"text-gray-400 mb-6\">Log in to start chatting with your adventure community and plan your next expedition together.</p>\n          <Link href=\"/login\">\n            <Button className=\"bg-orange-600 hover:bg-orange-700\">Login to Continue</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  // Helper function to convert Firestore timestamp to Date\n  const getDateFromTimestamp = (timestamp: any): Date => {\n    if (!timestamp) return new Date(0);\n    if (timestamp.toDate && typeof timestamp.toDate === 'function') {\n      return timestamp.toDate();\n    }\n    return new Date(timestamp);\n  };\n\n  // Sort conversations: unread first, then by latest message timestamp (if available)\n  const sortedConversations = [...conversations].sort((a, b) => {\n    const aUnread = a.receiverId === dbUser.id && !a.isRead ? 1 : 0;\n    const bUnread = b.receiverId === dbUser.id && !b.isRead ? 1 : 0;\n    if (aUnread !== bUnread) return bUnread - aUnread;\n    // Sort by createdAt instead of updatedAt since it doesn't exist on Message type\n    if (a.createdAt && b.createdAt) {\n      const aTime = getDateFromTimestamp(a.createdAt);\n      const bTime = getDateFromTimestamp(b.createdAt);\n      return bTime.getTime() - aTime.getTime();\n    }\n    return 0;\n  });\n\n  const handleBackToInbox = () => {\n    setSelectedConversation(null);\n    router.replace(\"/messages\");\n    if (isMobile) setShowInboxMobile(true);\n  };\n\n  const handleDeleteChat = async (conversationId: string) => {\n    if (\n      !window.confirm(\n        \"Are you sure you want to delete this chat? This cannot be undone.\",\n      )\n    )\n      return;\n    await deleteChat(dbUser?.id || \"\", conversationId);\n    setSelectedConversation(null); // Clear selected conversation after deletion\n    router.replace(\"/messages\");\n    if (isMobile) setShowInboxMobile(true);\n  };\n\n  const handleMuteChat = (conversationId: string) => {\n    alert(\"Mute chat coming soon!\");\n  };\n\n  return (\n    <div className=\"flex flex-col h-full max-w-4xl mx-auto p-4 md:p-6\">\n      <div className=\"glass-card rounded-lg shadow-md flex flex-col h-full\">\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-700\">\n          <h1 className=\"text-xl font-bold text-white\">Messages</h1>\n          {chatWith && (\n            <Button\n              variant=\"ghost\"\n              onClick={handleBackToInbox}\n              className=\"text-gray-400 hover:text-orange-500\"\n            >\n              ← Back to Inbox\n            </Button>\n          )}\n        </div>\n\n        <div className=\"flex flex-1 overflow-hidden\">\n          {/* Conversation List */}\n          <div className={`${chatWith ? \"hidden md:block\" : \"block\"} w-full md:w-1/3 border-r border-gray-700`}>\n            <ScrollArea className=\"h-full\">\n              {isLoadingConversations ? (\n                <div className=\"flex justify-center items-center h-32\">\n                  <div className=\"text-center\">\n                    <LoadingSpinner className=\"mx-auto mb-2\" />\n                    <p className=\"text-sm text-gray-400\">Loading conversations...</p>\n                  </div>\n                </div>\n              ) : isErrorConversations ? (\n                <div className=\"p-4 text-center\">\n                  <X className=\"h-12 w-12 text-red-500 mx-auto mb-3\" />\n                  <p className=\"text-red-500 mb-3\">Failed to load conversations.</p>\n                  <Button \n                    onClick={() => window.location.reload()} \n                    size=\"sm\"\n                    className=\"bg-orange-600 hover:bg-orange-700\"\n                  >\n                    Try Again\n                  </Button>\n                </div>\n              ) : conversations.length === 0 ? (\n                <div className=\"p-6 text-center\">\n                  <div className=\"relative mb-4\">\n                    <MessageCircle className=\"h-16 w-16 text-gray-500 mx-auto\" />\n                    <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-orange-500 rounded-full animate-pulse\"></div>\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">No Conversations Yet</h3>\n                  <p className=\"text-gray-400 mb-4 text-sm\">\n                    Start connecting with other adventurers! Your conversations will appear here in real-time.\n                  </p>\n                  <div className=\"space-y-2 text-xs text-gray-500 mb-4\">\n                    <div className=\"flex items-center justify-center space-x-2\">\n                      <Users className=\"h-3 w-3 text-green-500\" />\n                      <span>Follow other users to start chatting</span>\n                    </div>\n                    <div className=\"flex items-center justify-center space-x-2\">\n                      <MessageCircle className=\"h-3 w-3 text-blue-500\" />\n                      <span>Join plans to message participants</span>\n                    </div>\n                  </div>\n                  <Link href=\"/explore\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"border-orange-500 text-orange-500 hover:bg-orange-500 hover:text-white\">\n                      Explore Users\n                    </Button>\n                  </Link>\n                </div>\n              ) : (\n                <div className=\"p-2 space-y-2\">\n                  {conversations.map((conversation) => (\n                    <ChatListItem\n                      key={conversation.id}\n                      conversation={conversation}\n                      isSelected={conversation.id === selectedConversation?.id}\n                      onSelect={() => setSelectedConversation(conversation)}\n                      onDelete={() => handleDeleteChat(conversation.id)}\n                      onMute={() => handleMuteChat(conversation.id)}\n                      dbUserId={dbUser.id}\n                    />\n                  ))}\n                </div>\n              )}\n            </ScrollArea>\n          </div>\n\n          {/* Chat Area */}\n          <div className={`${chatWith ? \"block\" : \"hidden md:block\"} flex-1 flex flex-col`}>\n            {chatUserError ? (\n              <div className=\"flex flex-col items-center justify-center h-full text-red-500\">\n                <X className=\"h-16 w-16 mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Conversation Error</h3>\n                <p className=\"text-center mb-4 max-w-md\">{chatUserError}</p>\n                <button\n                  className=\"mt-4 px-4 py-2 bg-orange-600 text-white rounded hover:bg-orange-700\"\n                  onClick={() => {\n                    setSelectedConversation(null);\n                    router.replace(\"/messages\");\n                  }}\n                >\n                  Back to Inbox\n                </button>\n              </div>\n            ) : selectedConversation ? (\n              <>\n                {/* Chat Header */}\n                <div className=\"flex items-center justify-between p-4 border-b border-gray-700\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarImage src={selectedConversation.author?.photoURL || \"/placeholder.svg\"} alt={selectedConversation.author?.username || \"User\"} />\n                      <AvatarFallback>{selectedConversation.author?.username?.[0]?.toUpperCase() || \"U\"}</AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <h3 className=\"font-semibold text-white\">{selectedConversation.author?.displayName || \"Unknown User\"}</h3>\n                      <p className=\"text-sm text-gray-400\">@{selectedConversation.author?.username || \"unknown\"}</p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Messages */}\n                <ScrollArea className=\"flex-1 p-4\">\n                  {isLoadingMessages ? (\n                    <div className=\"flex justify-center items-center h-32\">\n                      <div className=\"text-center\">\n                        <LoadingSpinner className=\"mx-auto mb-2\" />\n                        <p className=\"text-sm text-gray-400\">Loading messages...</p>\n                      </div>\n                    </div>\n                  ) : isErrorMessages ? (\n                    <div className=\"text-center\">\n                      <X className=\"h-12 w-12 text-red-500 mx-auto mb-3\" />\n                      <p className=\"text-red-500 mb-3\">Failed to load messages.</p>\n                      <Button \n                        onClick={() => window.location.reload()} \n                        size=\"sm\"\n                        className=\"bg-orange-600 hover:bg-orange-700\"\n                      >\n                        Try Again\n                      </Button>\n                    </div>\n                  ) : messages.length === 0 ? (\n                    <div className=\"flex flex-col items-center justify-center h-full text-center\">\n                      <div className=\"relative mb-4\">\n                        <MessageCircle className=\"h-16 w-16 text-gray-500\" />\n                        <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-orange-500 rounded-full animate-pulse\"></div>\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-white mb-2\">Start a Conversation!</h3>\n                      <p className=\"text-gray-400 mb-4 max-w-sm\">\n                        Send the first message to begin your adventure together. Your messages will appear here in real-time.\n                      </p>\n                      <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                        <div className=\"w-2 h-2 bg-orange-500 rounded-full animate-pulse\"></div>\n                        <span>Ready to chat</span>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {messages.map((message, index) => (\n                        <div\n                          key={index}\n                          className={`flex ${message.senderId === dbUser.id ? \"justify-end\" : \"justify-start\"}`}\n                        >\n                          <div\n                            className={`max-w-xs md:max-w-md lg:max-w-lg px-4 py-2 rounded-lg ${\n                              message.senderId === dbUser.id\n                                ? \"bg-orange-600 text-white\"\n                                : \"bg-gray-700 text-white\"\n                            }`}\n                          >\n                            <p className=\"text-sm\">{message.content}</p>\n                            <p className=\"text-xs opacity-70 mt-1\">\n                              {getDateFromTimestamp(message.createdAt).toLocaleTimeString([], {\n                                hour: \"2-digit\",\n                                minute: \"2-digit\",\n                              })}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                      <div ref={messagesEndRef} />\n                    </div>\n                  )}\n                </ScrollArea>\n\n                {/* Message Input */}\n                <form onSubmit={handleSendMessage} className=\"p-4 border-t border-gray-700\">\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      ref={inputRef}\n                      value={messageInput}\n                      onChange={(e) => setMessageInput(e.target.value)}\n                      placeholder=\"Type a message...\"\n                      className=\"flex-1 bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                      onFocus={() => handleInput(true)}\n                      onBlur={() => handleInput(false)}\n                    />\n                    <Button type=\"submit\" disabled={!messageInput.trim()}>\n                      <Send className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </form>\n              </>\n            ) : (\n              <div className=\"flex items-center justify-center h-full\">\n                <div className=\"text-center\">\n                  <MessageCircle className=\"h-16 w-16 text-gray-500 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Select a Conversation</h3>\n                  <p className=\"text-gray-400\">Choose a conversation from the list to start messaging</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/app/(app)/notifications/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":77,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3156,3312],"text":"\n            You&apos;re all up to date! When you get new notifications about likes, comments, follows, or messages, they'll appear here in real-time.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3156,3312],"text":"\n            You&lsquo;re all up to date! When you get new notifications about likes, comments, follows, or messages, they'll appear here in real-time.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3156,3312],"text":"\n            You&#39;re all up to date! When you get new notifications about likes, comments, follows, or messages, they'll appear here in real-time.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3156,3312],"text":"\n            You&rsquo;re all up to date! When you get new notifications about likes, comments, follows, or messages, they'll appear here in real-time.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":77,"column":116,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3156,3312],"text":"\n            You're all up to date! When you get new notifications about likes, comments, follows, or messages, they&apos;ll appear here in real-time.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3156,3312],"text":"\n            You're all up to date! When you get new notifications about likes, comments, follows, or messages, they&lsquo;ll appear here in real-time.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3156,3312],"text":"\n            You're all up to date! When you get new notifications about likes, comments, follows, or messages, they&#39;ll appear here in real-time.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3156,3312],"text":"\n            You're all up to date! When you get new notifications about likes, comments, follows, or messages, they&rsquo;ll appear here in real-time.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useAuth } from \"@/contexts/auth-context\"\nimport useNotifications from \"@/hooks/use-notifications\"\nimport { LoadingSpinner } from \"@/components/loading-spinner\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport { Bell, CheckCircle, MessageCircle, Heart, Users, Edit, X, Megaphone, BellOff, Sparkles } from \"lucide-react\"\nimport { toDate } from \"@/lib/firebase-services\"\nimport Link from \"next/link\"\nimport { toast } from \"sonner\"\n\nexport default function NotificationsPage() {\n  const { dbUser } = useAuth()\n  const { notifications, isLoading, isError, markAsRead } = useNotifications(dbUser?.id || \"\")\n\n  const handleMarkAsRead = (notificationId: string) => {\n    markAsRead(notificationId, {\n      onError: (error) => toast.error(`Failed to mark as read: ${error.message}`),\n    })\n  }\n\n  if (!dbUser) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-full text-white max-w-4xl mx-auto p-4 md:p-6\">\n        <div className=\"glass-card p-8 rounded-lg shadow-md text-center max-w-md\">\n          <Bell className=\"h-16 w-16 text-orange-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-bold text-white mb-2\">Stay Updated</h2>\n          <p className=\"text-gray-400 mb-6\">Log in to see your notifications and stay connected with your adventure community.</p>\n          <Link href=\"/login\">\n            <Button className=\"bg-orange-600 hover:bg-orange-700\">Login to Continue</Button>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-full max-w-4xl mx-auto p-4 md:p-6\">\n        <div className=\"glass-card p-8 rounded-lg shadow-md text-center\">\n          <LoadingSpinner className=\"mx-auto mb-4\" />\n          <p className=\"text-gray-400\">Loading your notifications...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (isError) {\n    return (\n      <div className=\"max-w-4xl mx-auto p-4 md:p-6\">\n        <div className=\"glass-card p-8 rounded-lg shadow-md text-center\">\n          <X className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-bold text-white mb-2\">Oops! Something went wrong</h2>\n          <p className=\"text-red-500 mb-6\">Failed to load notifications. Please try refreshing the page.</p>\n          <Button \n            onClick={() => window.location.reload()} \n            className=\"bg-orange-600 hover:bg-orange-700\"\n          >\n            Refresh Page\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  if (!notifications || notifications.length === 0) {\n    return (\n      <div className=\"max-w-4xl mx-auto p-4 md:p-6\">\n        <div className=\"glass-card p-8 rounded-lg shadow-md text-center max-w-md mx-auto\">\n          <div className=\"relative mb-6\">\n            <BellOff className=\"h-20 w-20 text-gray-500 mx-auto\" />\n            <Sparkles className=\"h-6 w-6 text-orange-500 absolute -top-2 -right-2 animate-pulse\" />\n          </div>\n          <h2 className=\"text-2xl font-bold text-white mb-3\">All Caught Up!</h2>\n          <p className=\"text-gray-400 mb-6\">\n            You're all up to date! When you get new notifications about likes, comments, follows, or messages, they'll appear here in real-time.\n          </p>\n          <div className=\"space-y-3 text-sm text-gray-500\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Heart className=\"h-4 w-4 text-red-500\" />\n              <span>Likes and comments on your posts</span>\n            </div>\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Users className=\"h-4 w-4 text-green-500\" />\n              <span>New followers and follow requests</span>\n            </div>\n            <div className=\"flex items-center justify-center space-x-2\">\n              <MessageCircle className=\"h-4 w-4 text-blue-500\" />\n              <span>Messages and plan updates</span>\n            </div>\n          </div>\n          <div className=\"mt-6 pt-6 border-t border-gray-700\">\n            <Link href=\"/explore\">\n              <Button variant=\"outline\" className=\"border-orange-500 text-orange-500 hover:bg-orange-500 hover:text-white\">\n                Explore More Content\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"like\":\n        return <Heart className=\"h-5 w-5 text-red-500\" />\n      case \"comment\":\n        return <MessageCircle className=\"h-5 w-5 text-blue-500\" />\n      case \"follow\":\n        return <Users className=\"h-5 w-5 text-green-500\" />\n      case \"plan_join\":\n        return <Users className=\"h-5 w-5 text-purple-500\" />\n      case \"plan_message\":\n        return <MessageCircle className=\"h-5 w-5 text-blue-500\" />\n      case \"plan_update\":\n        return <Edit className=\"h-5 w-5 text-green-500\" />\n      case \"plan_cancelled\":\n        return <X className=\"h-5 w-5 text-red-500\" />\n      case \"plan_announcement\":\n        return <Megaphone className=\"h-5 w-5 text-orange-500\" />\n      case \"message\":\n        return <MessageCircle className=\"h-5 w-5 text-orange-500\" />\n      case \"follow_request_accepted\":\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />\n      case \"follow_request\":\n        return <Users className=\"h-5 w-5 text-yellow-500\" />\n      default:\n        return <Bell className=\"h-5 w-5 text-gray-400\" />\n    }\n  }\n\n  const getNotificationLink = (notification: (typeof notifications)[0]) => {\n    switch (notification.type) {\n      case \"like\":\n      case \"comment\":\n        return `/post/${notification.postId}`\n      case \"follow\":\n      case \"follow_request_accepted\":\n      case \"follow_request\":\n        return `/profile/${notification.fromUser.id}`\n      case \"plan_join\":\n      case \"plan_message\":\n      case \"plan_update\":\n      case \"plan_cancelled\":\n      case \"plan_announcement\":\n        return `/plan/${notification.planId}`\n      case \"message\":\n        return `/messages?chatWith=${notification.fromUser.id}`\n      default:\n        return \"#\"\n    }\n  }\n\n  const unreadCount = notifications.filter(n => !n.isRead).length\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-4 md:p-6\">\n      <div className=\"glass-card p-6 rounded-lg shadow-md\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-2xl font-bold text-white\">Notifications</h1>\n          {unreadCount > 0 && (\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-400\">{unreadCount} unread</span>\n              <div className=\"w-2 h-2 bg-orange-500 rounded-full animate-pulse\"></div>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"space-y-4\">\n          {notifications.map((notification) => (\n            <div\n              key={notification.id}\n              className={`flex items-center p-4 rounded-lg transition-all duration-200 hover:bg-gray-800/50 ${\n                notification.isRead ? \"bg-gray-800/30\" : \"bg-gray-700/50 border border-orange-500/30 shadow-lg\"\n              }`}\n            >\n              <div className=\"mr-4 relative\">\n                {getNotificationIcon(notification.type)}\n                {!notification.isRead && (\n                  <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-orange-500 rounded-full animate-pulse\"></div>\n                )}\n              </div>\n              <div className=\"flex-1\">\n                <Link href={getNotificationLink(notification)} className=\"flex items-center space-x-2 group\">\n                  <Avatar className=\"h-8 w-8 border-2 border-orange-500 group-hover:scale-110 transition-transform\">\n                    <AvatarImage\n                      src={notification.fromUser.avatar || \"/placeholder.svg\"}\n                      alt={notification.fromUser.username}\n                    />\n                    <AvatarFallback>{notification.fromUser.username?.[0]?.toUpperCase() || \"U\"}</AvatarFallback>\n                  </Avatar>\n                  <p className=\"text-white text-sm\">\n                    <span className=\"font-semibold\">{notification.fromUser.name || notification.fromUser.username}</span>{\" \"}\n                    {notification.content ||\n                      (notification.type === \"like\"\n                        ? \"liked your post.\"\n                        : notification.type === \"comment\"\n                          ? \"commented on your post.\"\n                          : notification.type === \"follow\"\n                            ? \"started following you.\"\n                            : notification.type === \"plan_join\"\n                              ? `joined your plan \"${notification.planTitle}\".`\n                              : notification.type === \"plan_message\"\n                                ? `sent a message in \"${notification.planTitle}\".`\n                              : notification.type === \"plan_update\"\n                                ? `updated the plan \"${notification.planTitle}\".`\n                              : notification.type === \"plan_cancelled\"\n                                ? `cancelled the plan \"${notification.planTitle}\".`\n                              : notification.type === \"plan_announcement\"\n                                ? `made an announcement in \"${notification.planTitle}\".`\n                              : notification.type === \"message\"\n                                ? \"sent you a message.\"\n                                : notification.type === \"follow_request_accepted\"\n                                  ? \"accepted your follow request.\"\n                                  : notification.type === \"follow_request\"\n                                    ? \"sent you a follow request.\"\n                                    : \"has an update.\")}\n                  </p>\n                </Link>\n                <span className=\"text-xs text-gray-400 mt-1 block\">\n                  {toDate(notification.createdAt)?.toLocaleString()}\n                </span>\n              </div>\n              {!notification.isRead && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleMarkAsRead(notification.id)}\n                  className=\"text-orange-500 hover:bg-orange-500/20 transition-colors\"\n                >\n                  Mark as Read\n                </Button>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/app/(app)/plan/[planId]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Trash2' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Mail' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { useParams, useRouter } from \"next/navigation\"\nimport dynamic from \"next/dynamic\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { \n  Calendar, \n  MapPin, \n  Users, \n  DollarSign, \n  Clock, \n  Share2, \n  MessageCircle, \n  Edit, \n  Trash2,\n  Phone,\n  Mail,\n  ExternalLink,\n  ArrowLeft,\n  Bookmark,\n  MoreVertical\n} from \"lucide-react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { usePlan, useJoinPlan, useLeavePlan } from \"@/hooks/use-plans\"\nimport usePlanMembers from \"@/hooks/use-plan-members\"\nimport { LoadingSpinner } from \"@/components/loading-spinner\"\nimport { toast } from \"sonner\"\nimport { toDate } from \"@/lib/firebase-services\"\nimport Image from \"next/image\"\nimport Link from \"next/link\"\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\n// Lazy-loaded heavy components\nconst PlanChat = dynamic(() => import(\"@/components/plan-chat\").then(m => ({ default: m.PlanChat })), {\n  loading: () => (\n    <div className=\"h-[600px] flex items-center justify-center\">\n      <LoadingSpinner />\n    </div>\n  ),\n})\n\nconst PlanManagementDialog = dynamic(\n  () => import(\"@/components/plan-management-dialog\").then(m => ({ default: m.PlanManagementDialog })),\n  {\n    loading: () => null,\n    ssr: false,\n  },\n)\n\nexport default function PlanDetailPage() {\n  const { planId } = useParams<{ planId: string }>()\n  const router = useRouter()\n  const { dbUser } = useAuth()\n  const [activeTab, setActiveTab] = useState(\"details\")\n  const [isManagementDialogOpen, setIsManagementDialogOpen] = useState(false)\n\n  const { data: plan, isLoading: isLoadingPlan, isError: isErrorPlan } = usePlan(planId)\n  const { members, isLoading: isLoadingMembers } = usePlanMembers(planId)\n  const { mutate: joinPlan, isPending: isJoining } = useJoinPlan()\n  const { mutate: leavePlan, isPending: isLeaving } = useLeavePlan()\n\n  if (isLoadingPlan) {\n    return (\n      <div className=\"flex justify-center items-center h-full\">\n        <LoadingSpinner />\n      </div>\n    )\n  }\n\n  if (isErrorPlan || !plan) {\n    return (\n      <div className=\"glass-card p-6 rounded-lg shadow-md text-red-500 text-center\">\n        Plan not found or failed to load.\n      </div>\n    )\n  }\n\n  const isOrganizer = dbUser?.id === plan.userId\n  const isJoined = plan.participantIds?.includes(dbUser?.id || \"\")\n  const isFull = plan.maxParticipants && plan.currentParticipants >= plan.maxParticipants\n  const planDateTime = toDate(plan.dateTime)\n\n  const handleJoinToggle = () => {\n    if (!dbUser) {\n      toast.error(\"You must be logged in to join or leave plans.\")\n      return\n    }\n\n    if (isJoined) {\n      leavePlan(\n        { planId: plan.id, userId: dbUser.id },\n        {\n          onError: (error) => toast.error(`Failed to leave plan: ${error.message}`),\n        },\n      )\n    } else {\n      if (isFull) {\n        toast.error(\"This plan is full.\")\n        return\n      }\n      joinPlan(\n        { planId: plan.id, userId: dbUser.id },\n        {\n          onError: (error) => toast.error(`Failed to join plan: ${error.message}`),\n        },\n      )\n    }\n  }\n\n  const handleShare = () => {\n    if (navigator.share) {\n      navigator.share({\n        title: plan.title,\n        text: plan.description,\n        url: window.location.href,\n      })\n    } else {\n      navigator.clipboard.writeText(window.location.href)\n      toast.success(\"Plan link copied to clipboard!\")\n    }\n  }\n\n\n\n  return (\n    <div className=\"p-4 md:p-6 max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => router.back()}\n          className=\"text-white hover:bg-gray-800\"\n        >\n          <ArrowLeft className=\"h-5 w-5 mr-2\" />\n          Back\n        </Button>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleShare}\n            className=\"text-white hover:bg-gray-800\"\n          >\n            <Share2 className=\"h-5 w-5\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"text-white hover:bg-gray-800\"\n          >\n            <Bookmark className=\"h-5 w-5\" />\n          </Button>\n          {isOrganizer && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"text-white hover:bg-gray-800\">\n                  <MoreVertical className=\"h-5 w-5\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"bg-gray-800 border-gray-700 text-white\">\n                <DropdownMenuItem onClick={() => setIsManagementDialogOpen(true)} className=\"hover:bg-gray-700\">\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Manage Plan\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n      </div>\n\n      {/* Plan Header */}\n      <Card className=\"glass-card mb-6\">\n        <CardContent className=\"p-0\">\n          {plan.imageUrl && (\n            <div className=\"relative w-full h-64 md:h-80\">\n              <Image\n                src={plan.imageUrl}\n                alt={plan.title}\n                fill\n                className=\"object-cover rounded-t-lg\"\n                priority\n              />\n            </div>\n          )}\n          <div className=\"p-6\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"flex-1\">\n                <h1 className=\"text-3xl font-bold text-white mb-2\">{plan.title}</h1>\n                <div className=\"flex items-center space-x-4 text-gray-400 mb-4\">\n                  <Link href={`/profile/${plan.organizer?.id}`} className=\"flex items-center space-x-2 hover:text-orange-400\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={plan.organizer?.avatar} alt={plan.organizer?.username} />\n                      <AvatarFallback>{plan.organizer?.username?.[0]?.toUpperCase()}</AvatarFallback>\n                    </Avatar>\n                    <span>{plan.organizer?.name || plan.organizer?.username}</span>\n                  </Link>\n                  <Badge variant=\"secondary\" className=\"bg-orange-600 text-white\">\n                    Organizer\n                  </Badge>\n                </div>\n              </div>\n              <div className=\"flex flex-col items-end space-y-2\">\n                <Badge \n                  variant={isFull ? \"destructive\" : \"default\"}\n                  className={isFull ? \"bg-red-600\" : \"bg-green-600\"}\n                >\n                  {isFull ? \"Full\" : `${plan.currentParticipants}/${plan.maxParticipants || \"∞\"}`}\n                </Badge>\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-white\">\n                    {plan.costPerHead} {plan.currency}\n                  </div>\n                  <div className=\"text-sm text-gray-400\">per person</div>\n                </div>\n              </div>\n            </div>\n\n            <p className=\"text-gray-300 text-lg mb-6\">{plan.description}</p>\n\n            {/* Quick Info Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-800 rounded-lg\">\n                <Calendar className=\"h-5 w-5 text-orange-500\" />\n                <div>\n                  <div className=\"text-white font-medium\">\n                    {planDateTime?.toLocaleDateString()}\n                  </div>\n                  <div className=\"text-sm text-gray-400\">\n                    {planDateTime?.toLocaleTimeString()}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-800 rounded-lg\">\n                <MapPin className=\"h-5 w-5 text-orange-500\" />\n                <div>\n                  <div className=\"text-white font-medium\">Location</div>\n                  <div className=\"text-sm text-gray-400\">{plan.location}</div>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-800 rounded-lg\">\n                <Users className=\"h-5 w-5 text-orange-500\" />\n                <div>\n                  <div className=\"text-white font-medium\">Participants</div>\n                  <div className=\"text-sm text-gray-400\">\n                    {plan.currentParticipants} joined\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-800 rounded-lg\">\n                <Clock className=\"h-5 w-5 text-orange-500\" />\n                <div>\n                  <div className=\"text-white font-medium\">Created</div>\n                  <div className=\"text-sm text-gray-400\">\n                    {toDate(plan.createdAt)?.toLocaleDateString()}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              {isOrganizer ? (\n                <Button disabled className=\"bg-gray-700 text-gray-400 cursor-not-allowed\">\n                  You&apos;re the Organizer\n                </Button>\n              ) : (\n                <Button\n                  onClick={handleJoinToggle}\n                  disabled={isJoining || isLeaving || (isFull && !isJoined) || !dbUser}\n                  className={`flex-1 ${\n                    isJoined\n                      ? \"bg-gray-700 text-white hover:bg-gray-600\"\n                      : \"bg-orange-600 text-white hover:bg-orange-700\"\n                  }`}\n                >\n                  {isJoining || isLeaving ? (\n                    <LoadingSpinner className=\"text-white\" size=\"sm\" />\n                  ) : isJoined ? (\n                    \"Leave Plan\"\n                  ) : isFull ? (\n                    \"Plan Full\"\n                  ) : (\n                    \"Join Plan\"\n                  )}\n                </Button>\n              )}\n              <Button\n                variant=\"outline\"\n                className=\"border-gray-600 text-white hover:bg-gray-800\"\n                disabled={!dbUser}\n              >\n                <MessageCircle className=\"h-5 w-5 mr-2\" />\n                Chat\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3 bg-gray-800 text-white\">\n          <TabsTrigger value=\"details\" className=\"data-[state=active]:bg-orange-600 data-[state=active]:text-white\">\n            Details\n          </TabsTrigger>\n          <TabsTrigger value=\"participants\" className=\"data-[state=active]:bg-orange-600 data-[state=active]:text-white\">\n            Participants ({plan.currentParticipants})\n          </TabsTrigger>\n          <TabsTrigger value=\"chat\" className=\"data-[state=active]:bg-orange-600 data-[state=active]:text-white\">\n            Chat\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"details\" className=\"mt-6\">\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Plan Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Additional Details */}\n              {plan.tags && plan.tags.length > 0 && (\n                <div>\n                  <h3 className=\"text-white font-semibold mb-2\">Tags</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {plan.tags.map((tag, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"border-gray-600 text-gray-300\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {plan.requirements && plan.requirements.length > 0 && (\n                <div>\n                  <h3 className=\"text-white font-semibold mb-2\">Requirements</h3>\n                  <ul className=\"list-disc list-inside text-gray-300 space-y-1\">\n                    {plan.requirements.map((req, index) => (\n                      <li key={index}>{req}</li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              {plan.whatToBring && plan.whatToBring.length > 0 && (\n                <div>\n                  <h3 className=\"text-white font-semibold mb-2\">What to Bring</h3>\n                  <ul className=\"list-disc list-inside text-gray-300 space-y-1\">\n                    {plan.whatToBring.map((item, index) => (\n                      <li key={index}>{item}</li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              {/* Location Details */}\n              <div>\n                <h3 className=\"text-white font-semibold mb-2\">Location Details</h3>\n                <div className=\"p-4 bg-gray-800 rounded-lg\">\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <MapPin className=\"h-5 w-5 text-orange-500\" />\n                    <span className=\"text-white font-medium\">{plan.location}</span>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-gray-600 text-white hover:bg-gray-700\">\n                    <ExternalLink className=\"h-4 w-4 mr-2\" />\n                    Get Directions\n                  </Button>\n                </div>\n              </div>\n\n              {/* Organizer Contact */}\n              <div>\n                <h3 className=\"text-white font-semibold mb-2\">Contact Organizer</h3>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-gray-600 text-white hover:bg-gray-700\">\n                    <MessageCircle className=\"h-4 w-4 mr-2\" />\n                    Message\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"border-gray-600 text-white hover:bg-gray-700\">\n                    <Phone className=\"h-4 w-4 mr-2\" />\n                    Call\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"participants\" className=\"mt-6\">\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Participants</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoadingMembers ? (\n                <div className=\"flex justify-center items-center h-40\">\n                  <LoadingSpinner />\n                </div>\n              ) : members && members.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {members.map((member) => (\n                    <div key={member.id} className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg\">\n                      <Link href={`/profile/${member.id}`} className=\"flex items-center space-x-3 hover:text-orange-400\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarImage src={member.photoURL} alt={member.username} />\n                          <AvatarFallback>{member.username?.[0]?.toUpperCase()}</AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <div className=\"text-white font-medium\">\n                            {member.displayName || member.username}\n                          </div>\n                          <div className=\"text-sm text-gray-400\">@{member.username}</div>\n                        </div>\n                      </Link>\n                      {member.id === plan.userId && (\n                        <Badge variant=\"secondary\" className=\"bg-orange-600 text-white\">\n                          Organizer\n                        </Badge>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-gray-400 text-center\">No participants yet.</p>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"chat\" className=\"mt-6 h-[600px]\">\n          <PlanChat \n            planId={plan.id} \n            planTitle={plan.title} \n            isOrganizer={isOrganizer} \n          />\n        </TabsContent>\n      </Tabs>\n\n      {/* Plan Management Dialog */}\n      <PlanManagementDialog\n        plan={plan}\n        open={isManagementDialogOpen}\n        onOpenChange={setIsManagementDialogOpen}\n      />\n    </div>\n  )\n} ","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/app/(app)/profile/[userId]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BookOpen' is defined but never used.","line":3,"column":98,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":106},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PostCard' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isHandlingRequest' is assigned a value but never used.","line":32,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":68},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fetchNextUserPosts' is assigned a value but never used.","line":36,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasPendingRequestToCurrentUser' is assigned a value but never used.","line":66,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleRequestAction' is assigned a value but never used.","line":80,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":28},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":105,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4245,4327],"text":"This explorer&apos;s profile couldn't be loaded. They might have moved on to new peaks."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4245,4327],"text":"This explorer&lsquo;s profile couldn't be loaded. They might have moved on to new peaks."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4245,4327],"text":"This explorer&#39;s profile couldn't be loaded. They might have moved on to new peaks."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4245,4327],"text":"This explorer&rsquo;s profile couldn't be loaded. They might have moved on to new peaks."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":105,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4245,4327],"text":"This explorer's profile couldn&apos;t be loaded. They might have moved on to new peaks."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4245,4327],"text":"This explorer's profile couldn&lsquo;t be loaded. They might have moved on to new peaks."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4245,4327],"text":"This explorer's profile couldn&#39;t be loaded. They might have moved on to new peaks."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4245,4327],"text":"This explorer's profile couldn&rsquo;t be loaded. They might have moved on to new peaks."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":235,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9810,9850],"text":"You&apos;ve reached the end of this adventure"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9810,9850],"text":"You&lsquo;ve reached the end of this adventure"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9810,9850],"text":"You&#39;ve reached the end of this adventure"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9810,9850],"text":"You&rsquo;ve reached the end of this adventure"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":284,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11498,11654],"text":"\n            The greatest adventures are those that haven&apos;t been planned yet. When you create or join your first expedition, it will appear here.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11498,11654],"text":"\n            The greatest adventures are those that haven&lsquo;t been planned yet. When you create or join your first expedition, it will appear here.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11498,11654],"text":"\n            The greatest adventures are those that haven&#39;t been planned yet. When you create or join your first expedition, it will appear here.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11498,11654],"text":"\n            The greatest adventures are those that haven&rsquo;t been planned yet. When you create or join your first expedition, it will appear here.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":433,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[18462,18463],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[18462,18463],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[18462,18463],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[18462,18463],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":433,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[18480,18481],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[18480,18481],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[18480,18481],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[18480,18481],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":484,"column":67,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[21144,21178],"text":"This Explorer&apos;s Journey is Private"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[21144,21178],"text":"This Explorer&lsquo;s Journey is Private"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[21144,21178],"text":"This Explorer&#39;s Journey is Private"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[21144,21178],"text":"This Explorer&rsquo;s Journey is Private"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { Calendar as CalendarIcon, Mountain, MapPin, LinkIcon, Camera, Compass, Heart, Sparkles, BookOpen, Users, Clock, Star } from \"lucide-react\"\nimport { useState } from \"react\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { useUser, useUserPosts, useHandleFollowRequest } from \"@/hooks/use-users\"\nimport useFollowUser from \"@/hooks/use-follow-user\"\nimport { useJoinedPlans, useCreatedPlans } from \"@/hooks/use-plans\"\nimport { PostCard } from \"@/components/post-card\"\nimport { PlanCard } from \"@/components/plan-card\"\nimport { LoadingSpinner } from \"@/components/loading-spinner\"\nimport { toDate } from \"@/lib/firebase-services\"\nimport { useParams } from \"next/navigation\"\nimport { toast } from \"sonner\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { useRouter } from \"next/navigation\"\nimport Image from \"next/image\"\nimport Link from \"next/link\"\n\nexport default function UserProfilePage() {\n  const { userId } = useParams<{ userId: string }>()\n  const { dbUser } = useAuth()\n  const router = useRouter()\n\n  const [activeTab, setActiveTab] = useState(\"memories\")\n\n  const { data: profileUser, isLoading: isLoadingProfileUser, isError: isErrorProfileUser } = useUser(userId)\n  const { isFollowing, toggleFollow, isLoading: isTogglingFollow } = useFollowUser(dbUser?.id, userId)\n  const { mutate: handleFollowRequest, isPending: isHandlingRequest } = useHandleFollowRequest()\n\n  const {\n    data: userPostsData,\n    fetchNextPage: fetchNextUserPosts,\n    hasNextPage: hasNextUserPosts,\n    isFetchingNextPage: isFetchingNextUserPosts,\n    isLoading: isLoadingUserPosts,\n    isError: isErrorUserPosts,\n  } = useUserPosts(userId)\n  const userPosts = userPostsData?.pages.flatMap((page) => page.posts) || []\n\n  const {\n    data: joinedPlansData,\n    fetchNextPage: fetchNextJoinedPlans,\n    hasNextPage: hasNextJoinedPlans,\n    isFetchingNextPage: isFetchingNextJoinedPlans,\n    isLoading: isLoadingJoinedPlans,\n    isError: isErrorJoinedPlans,\n  } = useJoinedPlans(userId)\n  const joinedPlans = joinedPlansData?.pages.flatMap((page) => page.plans) || []\n\n  const {\n    data: createdPlansData,\n    fetchNextPage: fetchNextCreatedPlansPage,\n    hasNextPage: hasNextCreatedPlansPage,\n    isFetchingNextPage: isFetchingNextCreatedPlansPage,\n    isLoading: isLoadingCreatedPlans,\n    isError: isErrorCreatedPlans,\n  } = useCreatedPlans(userId)\n  const createdPlans = createdPlansData?.pages.flatMap((page) => page.plans) || []\n\n  const isCurrentUserProfile = dbUser?.id === userId\n  const hasPendingRequestFromCurrentUser = dbUser?.sentFollowRequests?.includes(userId) || false\n  const hasPendingRequestToCurrentUser = profileUser?.pendingFollowRequests?.includes(dbUser?.id || \"\") || false\n\n  const handleFollowToggle = () => {\n    if (!dbUser) {\n      toast.error(\"You must be logged in to follow users.\")\n      return\n    }\n    if (isCurrentUserProfile) {\n      toast.info(\"You cannot follow yourself.\")\n      return\n    }\n    toggleFollow({ followerId: dbUser.id, followingId: userId })\n  }\n\n  const handleRequestAction = (accept: boolean) => {\n    if (!dbUser) {\n      toast.error(\"You must be logged in to handle follow requests.\")\n      return\n    }\n    handleFollowRequest({ requesterId: userId, targetUserId: dbUser.id, accept })\n  }\n\n  if (isLoadingProfileUser) {\n    return (\n      <div className=\"flex justify-center items-center h-full max-w-4xl mx-auto p-4 md:p-6\">\n        <div className=\"glass-card p-8 rounded-lg shadow-md text-center\">\n          <LoadingSpinner className=\"mx-auto mb-4\" />\n          <p className=\"text-gray-400\">Loading adventure profile...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (isErrorProfileUser || !profileUser) {\n    return (\n      <div className=\"max-w-4xl mx-auto p-4 md:p-6\">\n        <div className=\"glass-card p-8 rounded-lg shadow-md text-center\">\n          <Mountain className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-bold text-white mb-2\">Adventure Not Found</h2>\n          <p className=\"text-red-500 mb-6\">This explorer's profile couldn't be loaded. They might have moved on to new peaks.</p>\n          <Button \n            onClick={() => router.back()} \n            className=\"bg-orange-600 hover:bg-orange-700\"\n          >\n            Go Back\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  const memberSince = toDate(profileUser.createdAt)\n\n  // Determine if content should be hidden for private profiles\n  const showContent = !profileUser.isPrivate || isFollowing || isCurrentUserProfile\n\n  // Create a nostalgic memory grid layout\n  const renderMemoryGrid = () => {\n    if (isLoadingUserPosts && !isFetchingNextUserPosts) {\n      return (\n        <div className=\"flex justify-center items-center h-40\">\n          <div className=\"text-center\">\n            <LoadingSpinner className=\"mx-auto mb-2\" />\n            <p className=\"text-sm text-gray-400\">Loading memories...</p>\n          </div>\n        </div>\n      )\n    }\n\n    if (isErrorUserPosts) {\n      return (\n        <div className=\"text-center\">\n          <Mountain className=\"h-12 w-12 text-red-500 mx-auto mb-3\" />\n          <p className=\"text-red-500 mb-3\">Failed to load memories.</p>\n          <Button \n            onClick={() => window.location.reload()} \n            size=\"sm\"\n            className=\"bg-orange-600 hover:bg-orange-700\"\n          >\n            Try Again\n          </Button>\n        </div>\n      )\n    }\n\n    if (userPosts.length === 0) {\n      return (\n        <div className=\"text-center py-12\">\n          <div className=\"relative mb-6\">\n            <Camera className=\"h-20 w-20 text-gray-500 mx-auto\" />\n            <Sparkles className=\"h-6 w-6 text-orange-500 absolute -top-2 -right-2 animate-pulse\" />\n          </div>\n          <h3 className=\"text-xl font-semibold text-white mb-3\">No Memories Captured Yet</h3>\n          <p className=\"text-gray-400 mb-6 max-w-md mx-auto\">\n            Every adventure starts with a single step. When you share your first moment, it will appear here as part of your journey.\n          </p>\n          <div className=\"space-y-3 text-sm text-gray-500 mb-6\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Mountain className=\"h-4 w-4 text-orange-500\" />\n              <span>Capture your mountain moments</span>\n            </div>\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Heart className=\"h-4 w-4 text-red-500\" />\n              <span>Share your adventure stories</span>\n            </div>\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Users className=\"h-4 w-4 text-blue-500\" />\n              <span>Connect with fellow explorers</span>\n            </div>\n          </div>\n          {isCurrentUserProfile && (\n            <Link href=\"/create\">\n              <Button className=\"bg-orange-600 hover:bg-orange-700\">\n                <Camera className=\"h-4 w-4 mr-2\" />\n                Capture Your First Memory\n              </Button>\n            </Link>\n          )}\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Nostalgic Memory Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6\">\n          {userPosts.map((post, index) => (\n            <div\n              key={post.id}\n              className={`memory-grid-item group relative overflow-hidden rounded-xl transition-all duration-500 hover:scale-105 memory-card ${\n                index % 3 === 0 ? 'md:col-span-2 md:row-span-2' : \n                index % 5 === 0 ? 'md:col-span-2' : \n                index % 7 === 0 ? 'md:row-span-2' : ''\n              }`}\n              style={{\n                transform: `rotate(${Math.random() * 2 - 1}deg)`\n              }}\n            >\n              <div className=\"relative aspect-square md:aspect-auto h-full\">\n                <Image\n                  src={post.imageUrl || \"/placeholder.svg\"}\n                  alt={post.caption || `Memory by ${post.author?.name || post.author?.username || \"Unknown\"}`}\n                  fill\n                  className=\"object-cover rounded-xl group-hover:brightness-110 transition-all duration-300\"\n                  sizes=\"(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw\"\n                />\n                <div className=\"absolute inset-0 memory-overlay opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                <div className=\"absolute bottom-0 left-0 right-0 p-4 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                  <p className=\"text-sm line-clamp-2\">{post.caption}</p>\n                  <div className=\"flex items-center space-x-2 mt-2 text-xs text-gray-300\">\n                    <Heart className=\"h-3 w-3\" />\n                    <span>{post.likes.length}</span>\n                    <Clock className=\"h-3 w-3\" />\n                    <span>{toDate(post.createdAt)?.toLocaleDateString()}</span>\n                  </div>\n                </div>\n                {/* Floating particles for nostalgic effect */}\n                <div className=\"floating-particles\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        {/* Load More */}\n        <div className=\"flex justify-center items-center py-4\">\n          {isFetchingNextUserPosts && <LoadingSpinner />}\n          {!hasNextUserPosts && userPosts.length > 0 && (\n            <div className=\"text-center\">\n              <Star className=\"h-6 w-6 text-orange-500 mx-auto mb-2\" />\n              <p className=\"text-gray-400 text-sm\">You've reached the end of this adventure</p>\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  // Create a flowy plans layout\n  const renderPlansSection = () => {\n    const allPlans = [...createdPlans, ...joinedPlans]\n    \n    if (isLoadingCreatedPlans && isLoadingJoinedPlans) {\n      return (\n        <div className=\"flex justify-center items-center h-40\">\n          <div className=\"text-center\">\n            <LoadingSpinner className=\"mx-auto mb-2\" />\n            <p className=\"text-sm text-gray-400\">Loading adventures...</p>\n          </div>\n        </div>\n      )\n    }\n\n    if ((isErrorCreatedPlans || isErrorJoinedPlans) && allPlans.length === 0) {\n      return (\n        <div className=\"text-center\">\n          <Compass className=\"h-12 w-12 text-red-500 mx-auto mb-3\" />\n          <p className=\"text-red-500 mb-3\">Failed to load adventures.</p>\n          <Button \n            onClick={() => window.location.reload()} \n            size=\"sm\"\n            className=\"bg-orange-600 hover:bg-orange-700\"\n          >\n            Try Again\n          </Button>\n        </div>\n      )\n    }\n\n    if (allPlans.length === 0) {\n      return (\n        <div className=\"text-center py-12\">\n          <div className=\"relative mb-6 empty-state-illustration\">\n            <Compass className=\"h-20 w-20 text-gray-500 mx-auto relative z-10\" />\n            <Sparkles className=\"h-6 w-6 text-orange-500 absolute -top-2 -right-2 animate-pulse z-20\" />\n            <div className=\"floating-particles\"></div>\n          </div>\n          <h3 className=\"text-xl font-semibold text-white mb-3\">No Adventures Planned Yet</h3>\n          <p className=\"text-gray-400 mb-6 max-w-md mx-auto\">\n            The greatest adventures are those that haven't been planned yet. When you create or join your first expedition, it will appear here.\n          </p>\n          <div className=\"space-y-3 text-sm text-gray-500 mb-6\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Mountain className=\"h-4 w-4 text-orange-500\" />\n              <span>Create your own expeditions</span>\n            </div>\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Users className=\"h-4 w-4 text-blue-500\" />\n              <span>Join fellow adventurers</span>\n            </div>\n            <div className=\"flex items-center justify-center space-x-2\">\n              <MapPin className=\"h-4 w-4 text-green-500\" />\n              <span>Explore new destinations</span>\n            </div>\n          </div>\n          {isCurrentUserProfile && (\n            <Link href=\"/create\">\n              <Button className=\"bg-orange-600 hover:bg-orange-700\">\n                <Compass className=\"h-4 w-4 mr-2\" />\n                Plan Your First Adventure\n              </Button>\n            </Link>\n          )}\n        </div>\n      )\n    }\n\n    return (\n      <ScrollArea className=\"h-[calc(100vh-450px)] pr-2 sm:pr-4\">\n        <div className=\"space-y-8\">\n          {/* Created Plans */}\n          {createdPlans.length > 0 && (\n            <div className=\"adventure-section\">\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Mountain className=\"h-5 w-5 text-orange-500\" />\n                <h2 className=\"text-xl font-bold text-orange-400\">Expeditions Created</h2>\n                <span className=\"text-sm text-gray-500\">({createdPlans.length})</span>\n              </div>\n              <div className=\"space-y-4\">\n                {createdPlans.map((plan) => (\n                  <PlanCard key={plan.id} plan={plan} />\n                ))}\n                {hasNextCreatedPlansPage && (\n                  <div className=\"flex justify-center mt-4\">\n                    <Button onClick={() => fetchNextCreatedPlansPage()} disabled={isFetchingNextCreatedPlansPage}>\n                      {isFetchingNextCreatedPlansPage ? <LoadingSpinner /> : \"Load More\"}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Joined Plans */}\n          {joinedPlans.length > 0 && (\n            <div className=\"adventure-section\">\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Users className=\"h-5 w-5 text-blue-500\" />\n                <h2 className=\"text-xl font-bold text-blue-400\">Adventures Joined</h2>\n                <span className=\"text-sm text-gray-500\">({joinedPlans.length})</span>\n              </div>\n              <div className=\"space-y-4\">\n                {joinedPlans.map((plan) => (\n                  <PlanCard key={plan.id} plan={plan} />\n                ))}\n                {hasNextJoinedPlans && (\n                  <div className=\"flex justify-center mt-4\">\n                    <Button onClick={() => fetchNextJoinedPlans()} disabled={isFetchingNextJoinedPlans}>\n                      {isFetchingNextJoinedPlans ? <LoadingSpinner /> : \"Load More\"}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n    )\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-4 md:p-6\">\n      {/* Profile Header */}\n      <div className=\"glass-card p-6 rounded-lg shadow-md mb-6\">\n        <div className=\"flex flex-col items-center md:flex-row md:items-start md:space-x-6\">\n          <div className=\"relative mb-4 md:mb-0\">\n            <Avatar className=\"h-24 w-24 md:h-32 md:w-32 border-4 border-orange-500\">\n              <AvatarImage src={profileUser.photoURL || \"/placeholder.svg\"} alt={profileUser.username || profileUser.displayName || \"User\"} />\n              <AvatarFallback className=\"text-4xl\">{profileUser.username?.[0]?.toUpperCase() || profileUser.displayName?.[0]?.toUpperCase() || \"U\"}</AvatarFallback>\n            </Avatar>\n            <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-black\"></div>\n          </div>\n          \n          <div className=\"flex-1 text-center md:text-left\">\n            <div className=\"flex flex-col md:flex-row items-center md:justify-between mb-4\">\n              <div>\n                <h1 className=\"text-2xl sm:text-3xl font-bold text-white mb-1\">{profileUser.displayName || \"Adventurer\"}</h1>\n                {profileUser.username && (\n                  <p className=\"text-gray-400 text-base sm:text-lg\">@{profileUser.username}</p>\n                )}\n              </div>\n              \n              <div className=\"flex flex-wrap space-x-2 mt-4 md:mt-0\">\n                {!isCurrentUserProfile && dbUser && (\n                  <>\n                    <Button\n                      onClick={() => router.push(`/messages?chatWith=${userId}`)}\n                      className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n                    >\n                      Message\n                    </Button>\n                    {profileUser.isPrivate && !isFollowing && !hasPendingRequestFromCurrentUser ? (\n                      <Button\n                        onClick={handleFollowToggle}\n                        disabled={isTogglingFollow}\n                        className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n                      >\n                        {isTogglingFollow ? <LoadingSpinner className=\"text-white\" size=\"sm\" /> : \"Request Follow\"}\n                      </Button>\n                    ) : profileUser.isPrivate && hasPendingRequestFromCurrentUser ? (\n                      <Button disabled className=\"bg-gray-700 text-gray-400 cursor-not-allowed\">\n                        Request Sent\n                      </Button>\n                    ) : (\n                      <Button\n                        onClick={handleFollowToggle}\n                        disabled={isTogglingFollow}\n                        className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${\n                          isFollowing\n                            ? \"bg-gray-700 text-white hover:bg-gray-600\"\n                            : \"bg-orange-600 text-white hover:bg-orange-700\"\n                        }`}\n                      >\n                        {isTogglingFollow ? (\n                          <LoadingSpinner className=\"text-white\" size=\"sm\" />\n                        ) : isFollowing ? (\n                          \"Following\"\n                        ) : (\n                          \"Follow\"\n                        )}\n                      </Button>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n            \n            {profileUser.bio && (\n              <p className=\"text-gray-300 mb-4 italic\">\"{profileUser.bio}\"</p>\n            )}\n\n            <div className=\"flex flex-wrap justify-center md:justify-start gap-x-4 gap-y-2 text-gray-400 text-xs sm:text-sm mb-4\">\n              {profileUser.location && (\n                <div className=\"flex items-center\">\n                  <MapPin className=\"h-4 w-4 mr-1 text-orange-500\" />\n                  <span>{profileUser.location}</span>\n                </div>\n              )}\n              {profileUser.website && (\n                <a\n                  href={profileUser.website}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center hover:text-orange-400 transition-colors\"\n                >\n                  <LinkIcon className=\"h-4 w-4 mr-1 text-orange-500\" />\n                  <span>{profileUser.website.replace(/^(https?:\\/\\/)?(www\\.)?/, \"\")}</span>\n                </a>\n              )}\n              {memberSince && (\n                <div className=\"flex items-center\">\n                  <CalendarIcon className=\"h-4 w-4 mr-1 text-orange-500\" />\n                  <span>Explorer since {memberSince.toLocaleDateString(\"en-US\", { month: \"long\", year: \"numeric\" })}</span>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex flex-wrap justify-center md:justify-start space-x-6 text-white text-base sm:text-lg font-semibold\">\n              <div className=\"profile-stats flex flex-col items-center\">\n                <span className=\"font-bold text-xl\">{typeof profileUser.posts === 'number' ? profileUser.posts : 0}</span>\n                <span className=\"text-sm text-gray-400\">Memories</span>\n              </div>\n              <div className=\"profile-stats flex flex-col items-center\">\n                <span className=\"font-bold text-xl\">{typeof profileUser.followers === 'number' ? profileUser.followers : 0}</span>\n                <span className=\"text-sm text-gray-400\">Fellow Explorers</span>\n              </div>\n              <div className=\"profile-stats flex flex-col items-center\">\n                <span className=\"font-bold text-xl\">{typeof profileUser.following === 'number' ? profileUser.following : 0}</span>\n                <span className=\"text-sm text-gray-400\">Following</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Private Profile Notice */}\n      {profileUser.isPrivate && !isFollowing && !isCurrentUserProfile && (\n        <div className=\"glass-card p-6 rounded-lg shadow-md text-center text-gray-400 mb-6\">\n          <Mountain className=\"h-12 w-12 text-gray-500 mx-auto mb-3\" />\n          <h3 className=\"text-lg font-semibold mb-2\">This Explorer's Journey is Private</h3>\n          <p>Follow to see their memories and adventures.</p>\n        </div>\n      )}\n\n      {/* Content Tabs */}\n      {showContent && (\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 bg-gray-800 border border-gray-700\">\n            <TabsTrigger value=\"memories\" className=\"data-[state=active]:bg-orange-600 data-[state=active]:text-white\">\n              <Camera className=\"h-4 w-4 mr-2\" />\n              Memories\n            </TabsTrigger>\n            <TabsTrigger value=\"adventures\" className=\"data-[state=active]:bg-orange-600 data-[state=active]:text-white\">\n              <Compass className=\"h-4 w-4 mr-2\" />\n              Adventures\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"memories\" className=\"mt-6\">\n            {renderMemoryGrid()}\n          </TabsContent>\n          \n          <TabsContent value=\"adventures\" className=\"mt-6\">\n            {renderPlansSection()}\n          </TabsContent>\n        </Tabs>\n      )}\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/app/(app)/profile/[userId]/plans/[planId]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[506,509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[506,509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport React from \"react\"\nimport Image from \"next/image\"\nimport { useParams, useRouter } from \"next/navigation\"\nimport { usePlan, usePlanPosts } from \"@/hooks/use-plans\"\nimport { LoadingSpinner } from \"@/components/loading-spinner\"\nimport { Avatar } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\n\n// Utility function to safely convert Firestore timestamps to Date objects\nconst toSafeDate = (timestamp: any): Date => {\n  if (!timestamp) return new Date()\n  if (timestamp instanceof Date) return timestamp\n  if (timestamp.toDate && typeof timestamp.toDate === 'function') return timestamp.toDate()\n  return new Date(timestamp)\n}\n\nexport default function AdventureDiaryPage() {\n  const { userId, planId } = useParams<{ userId: string; planId: string }>()\n  const router = useRouter()\n\n  const { data: plan, isLoading: isLoadingPlan, isError: isErrorPlan } = usePlan(planId)\n  const {\n    data: planPostsData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isLoading: isLoadingPosts,\n    isError: isErrorPosts,\n  } = usePlanPosts(planId)\n  const planPosts = planPostsData?.pages.flatMap((page) => page.posts) || []\n\n  return (\n    <div className=\"min-h-screen bg-black/90 flex flex-col items-center py-8 px-2 md:px-0\">\n      <div className=\"w-full max-w-2xl glass-card rounded-xl shadow-lg p-6 mb-6 relative\">\n        <Button\n          variant=\"outline\"\n          className=\"absolute left-4 top-4 border-orange-500 text-orange-400 hover:bg-orange-900/20\"\n          onClick={() => router.push(`/profile/${userId}?tab=plans`)}\n        >\n          ← Back to Plans\n        </Button>\n        {isLoadingPlan ? (\n          <div className=\"flex justify-center items-center h-32\"><LoadingSpinner /></div>\n        ) : isErrorPlan || !plan ? (\n          <div className=\"text-red-500 text-center\">Failed to load plan details.</div>\n        ) : (\n          <div className=\"flex flex-col md:flex-row md:items-center gap-6\">\n            <Image\n              src={plan.imageUrl || \"/placeholder.jpg\"}\n              alt={plan.title}\n              width={128}\n              height={128}\n              className=\"w-32 h-32 object-cover rounded-lg border-4 border-orange-500 shadow-md bg-black/40\"\n            />\n            <div className=\"flex-1\">\n              <h1 className=\"text-3xl font-bold text-orange-400 mb-1 drop-shadow-glow-orange\">{plan.title}</h1>\n              <div className=\"text-gray-300 mb-2\">\n                <span className=\"mr-4\">{plan.dateTime ? toSafeDate(plan.dateTime).toLocaleString() : \"No date\"}</span>\n                <span className=\"ml-2\">Participants: {plan.currentParticipants || plan.participantIds?.length || 1}</span>\n              </div>\n              <div className=\"text-gray-400 text-sm\">Organized by {plan.organizer?.name}</div>\n            </div>\n          </div>\n        )}\n      </div>\n      <div className=\"w-full max-w-2xl glass-card rounded-xl shadow-lg p-6\">\n        <h2 className=\"text-2xl font-bold text-orange-400 mb-4 drop-shadow-glow-orange\">Adventure Diary</h2>\n        <ScrollArea className=\"h-[60vh] pr-2\">\n          {isLoadingPosts ? (\n            <div className=\"flex justify-center items-center h-32\"><LoadingSpinner /></div>\n          ) : isErrorPosts ? (\n            <div className=\"text-red-500 text-center\">Failed to load posts for this plan.</div>\n          ) : planPosts.length === 0 ? (\n            <div className=\"text-gray-400 text-center\">No posts in this adventure yet.</div>\n          ) : (\n            <div className=\"flex flex-col gap-8\">\n              {planPosts.map((post) => (\n                <div\n                  key={post.id}\n                  className=\"relative bg-black/60 border border-orange-900 rounded-lg p-4 shadow-glow-orange hover:shadow-lg transition-all\"\n                >\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <Avatar className=\"h-10 w-10 border-2 border-orange-500\">\n                      <Image src={post.author?.avatar || \"/placeholder-user.jpg\"} alt={post.author?.name || \"User\"} width={40} height={40} />\n                    </Avatar>\n                    <div>\n                      <div className=\"font-semibold text-orange-300\">{post.author?.name}</div>\n                      <div className=\"text-xs text-gray-400\">{post.createdAt ? toSafeDate(post.createdAt).toLocaleString() : \"\"}</div>\n                    </div>\n                  </div>\n                  <div className=\"mb-2 text-lg text-white font-medium whitespace-pre-line\">{post.caption}</div>\n                  {post.imageUrl && (\n                    <Image\n                      src={post.imageUrl}\n                      alt=\"Post media\"\n                      width={500}\n                      height={300}\n                      className=\"mt-2 rounded-md border border-orange-800 max-h-64 object-cover shadow\"\n                    />\n                  )}\n                </div>\n              ))}\n              {hasNextPage && (\n                <div className=\"flex justify-center mt-4\">\n                  <Button onClick={() => fetchNextPage()} disabled={isFetchingNextPage}>\n                    {isFetchingNextPage ? <LoadingSpinner /> : \"Load More\"}\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </ScrollArea>\n      </div>\n    </div>\n  )\n} ","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/app/(app)/profile/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoadingFollowRequests' is assigned a value but never used.","line":37,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'memberSince' is assigned a value but never used.","line":86,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { LinkIcon, MapPin, Edit, Settings, Calendar as CalendarIcon } from \"lucide-react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { useUser, useUserPosts, useFollowRequests } from \"@/hooks/use-users\" // Import useFollowRequests\nimport { useJoinedPlans, useCreatedPlans } from \"@/hooks/use-plans\"\nimport { LoadingSpinner } from \"@/components/loading-spinner\"\nimport { PostCard } from \"@/components/post-card\"\nimport { PlanCard } from \"@/components/plan-card\"\nimport { EditProfileDialog } from \"@/components/edit-profile-dialog\"\nimport { FollowRequestsDialog } from \"@/components/follow-requests-dialog\"\nimport { ProfileSettingsDialog } from \"@/components/profile-settings-dialog\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { useRouter } from \"next/navigation\"\nimport { toDate } from \"@/lib/firebase-services\"\n\nexport default function ProfilePage() {\n  const { dbUser, isLoading: isLoadingAuth } = useAuth()\n  const router = useRouter()\n\n  // Redirect to login if not authenticated and auth state is loaded\n  useEffect(() => {\n    if (!isLoadingAuth && !dbUser) {\n      router.push(\"/login\")\n    }\n  }, [dbUser, isLoadingAuth, router])\n\n  const [isEditProfileDialogOpen, setIsEditProfileDialogOpen] = useState(false)\n  const [isFollowRequestsDialogOpen, setIsFollowRequestsDialogOpen] = useState(false)\n  const [isProfileSettingsDialogOpen, setIsProfileSettingsDialogOpen] = useState(false)\n\n  const { data: profileUser, isLoading: isLoadingProfileUser, isError: isErrorProfileUser } = useUser(dbUser?.id || \"\")\n  const { data: followRequests, isLoading: isLoadingFollowRequests } = useFollowRequests(dbUser?.id || \"\")\n\n  const {\n    data: userPostsData,\n    fetchNextPage: fetchNextUserPostsPage,\n    hasNextPage: hasNextUserPostsPage,\n    isFetchingNextPage: isFetchingNextUserPostsPage,\n    isLoading: isLoadingUserPosts,\n    isError: isErrorUserPosts,\n  } = useUserPosts(dbUser?.id || \"\")\n\n  const {\n    data: joinedPlansData,\n    fetchNextPage: fetchNextJoinedPlansPage,\n    hasNextPage: hasNextJoinedPlansPage,\n    isFetchingNextPage: isFetchingNextJoinedPlansPage,\n    isLoading: isLoadingJoinedPlans,\n    isError: isErrorJoinedPlans,\n  } = useJoinedPlans(dbUser?.id || \"\")\n\n  const {\n    data: createdPlansData,\n    fetchNextPage: fetchNextCreatedPlansPage,\n    hasNextPage: hasNextCreatedPlansPage,\n    isFetchingNextPage: isFetchingNextCreatedPlansPage,\n    isLoading: isLoadingCreatedPlans,\n    isError: isErrorCreatedPlans,\n  } = useCreatedPlans(dbUser?.id || \"\")\n  const createdPlans = createdPlansData?.pages.flatMap((page) => page.plans) || []\n\n  const userPosts = userPostsData?.pages.flatMap((page) => page.posts) || []\n  const joinedPlans = joinedPlansData?.pages.flatMap((page) => page.plans) || []\n\n  if (isLoadingAuth || isLoadingProfileUser) {\n    return (\n      <div className=\"flex justify-center items-center h-full\">\n        <LoadingSpinner />\n      </div>\n    )\n  }\n\n  if (isErrorProfileUser || !profileUser) {\n    return (\n      <div className=\"glass-card p-6 rounded-lg shadow-md text-red-500 text-center\">\n        Failed to load your profile or user not found. Please log in.\n      </div>\n    )\n  }\n\n  const memberSince = toDate(profileUser.createdAt)\n\n  return (\n    <div className=\"glass-card p-4 sm:p-6 rounded-lg shadow-md max-w-3xl mx-auto w-full max-w-full overflow-x-hidden\">\n      <div className=\"flex flex-col items-center md:flex-row md:items-start md:justify-between mb-6 w-full max-w-full overflow-x-hidden\">\n        <div className=\"flex flex-col items-center md:flex-row md:space-x-6 w-full max-w-full overflow-x-hidden\">\n          <Avatar className=\"h-28 w-28 border-4 border-orange-500 mb-4 md:mb-0 flex-shrink-0\">\n            <AvatarImage src={profileUser.photoURL || \"/placeholder.svg\"} alt={profileUser.username} />\n            <AvatarFallback className=\"text-4xl\">{profileUser.username?.[0]?.toUpperCase() || \"U\"}</AvatarFallback>\n          </Avatar>\n          <div className=\"text-center md:text-left w-full max-w-full\">\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-white truncate w-full max-w-full\">{profileUser.displayName}</h1>\n            <p className=\"text-gray-400 text-base sm:text-lg mb-2 sm:mb-4 break-words w-full max-w-full overflow-hidden\">@{profileUser.username}</p>\n            {profileUser.bio && <p className=\"text-gray-300 mt-2 max-w-md break-words w-full max-w-full overflow-hidden\">{profileUser.bio}</p>}\n            <div className=\"flex flex-wrap items-center justify-center md:justify-start space-x-2 sm:space-x-4 mt-3 text-gray-400 w-full max-w-full\">\n              {profileUser.location && (\n                <span className=\"flex items-center\">\n                  <MapPin className=\"h-4 w-4 mr-1\" /> {profileUser.location}\n                </span>\n              )}\n              {profileUser.website && (\n                <a\n                  href={profileUser.website}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center hover:text-orange-500\"\n                >\n                  <LinkIcon className=\"h-4 w-4 mr-1\" /> Website\n                </a>\n              )}\n              {profileUser.createdAt && (\n                <span className=\"flex items-center\">\n                  <CalendarIcon className=\"h-4 w-4 mr-1 text-orange-500\" />\n                  <span>Joined {toDate(profileUser.createdAt).toLocaleDateString(\"en-US\", { month: \"long\", year: \"numeric\" })}</span>\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"flex flex-col items-center md:items-end space-y-3 mt-6 md:mt-0 w-full max-w-full\">\n          <div className=\"flex flex-wrap space-x-4 sm:space-x-6 text-white w-full max-w-full justify-center md:justify-end\">\n            <div className=\"flex flex-col items-center\">\n              <span className=\"font-bold text-xl\">{profileUser.posts}</span>\n              <span className=\"text-sm text-gray-400\">Posts</span>\n            </div>\n            <div className=\"flex flex-col items-center\">\n              <span className=\"font-bold text-xl\">{profileUser.followers}</span>\n              <span className=\"text-sm text-gray-400\">Followers</span>\n            </div>\n            <div className=\"flex flex-col items-center\">\n              <span className=\"font-bold text-xl\">{profileUser.following}</span>\n              <span className=\"text-sm text-gray-400\">Following</span>\n            </div>\n          </div>\n          <div className=\"flex flex-wrap space-x-2 mt-4 w-full max-w-full justify-center md:justify-end\">\n            <>\n              <Button\n                onClick={() => setIsEditProfileDialogOpen(true)}\n                className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n              >\n                <Edit className=\"h-4 w-4 mr-2\" /> Edit Profile\n              </Button>\n              <Button\n                onClick={() => setIsProfileSettingsDialogOpen(true)}\n                variant=\"outline\"\n                className=\"border-gray-700 text-white hover:bg-gray-700\"\n              >\n                <Settings className=\"h-4 w-4 mr-2\" /> Settings\n              </Button>\n              {followRequests && followRequests.length > 0 && (\n                <Button\n                  onClick={() => setIsFollowRequestsDialogOpen(true)}\n                  variant=\"outline\"\n                  className=\"border-orange-500 text-orange-500 hover:bg-orange-500/20 relative\"\n                >\n                  Follow Requests\n                  <span className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                    {followRequests.length}\n                  </span>\n                </Button>\n              )}\n            </>\n          </div>\n        </div>\n      </div>\n      <Tabs defaultValue=\"posts\" className=\"flex-1 flex flex-col w-full max-w-full\">\n        <TabsList className=\"grid w-full max-w-full grid-cols-2 bg-gray-800 text-white\">\n          <TabsTrigger value=\"posts\" className=\"data-[state=active]:bg-orange-600 data-[state=active]:text-white\">Posts</TabsTrigger>\n          <TabsTrigger value=\"plans\" className=\"data-[state=active]:bg-orange-600 data-[state=active]:text-white\">Plans</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"posts\" className=\"flex-1 mt-4 w-full max-w-full\">\n          <ScrollArea className=\"h-[calc(100vh-450px)] pr-2 sm:pr-4 w-full max-w-full\">\n            {isLoadingUserPosts ? (\n              <div className=\"flex justify-center items-center h-full\">\n                <LoadingSpinner />\n              </div>\n            ) : isErrorUserPosts ? (\n              <p className=\"text-red-500 text-center\">Error loading posts.</p>\n            ) : userPosts.length === 0 ? (\n              <p className=\"text-gray-400 text-center\">No posts yet.</p>\n            ) : (\n              <div className=\"space-y-4\">\n                {userPosts.map((post) => (\n                  <PostCard key={post.id} post={post} />\n                ))}\n                {hasNextUserPostsPage && (\n                  <div className=\"flex justify-center mt-4\">\n                    <Button onClick={() => fetchNextUserPostsPage()} disabled={isFetchingNextUserPostsPage}>\n                      {isFetchingNextUserPostsPage ? <LoadingSpinner /> : \"Load More\"}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          </ScrollArea>\n        </TabsContent>\n        <TabsContent value=\"plans\" className=\"flex-1 mt-4 w-full max-w-full\">\n          <ScrollArea className=\"h-[calc(100vh-450px)] pr-2 sm:pr-4 w-full max-w-full\">\n            {/* Created Plans Section */}\n            <div className=\"mb-8\">\n              <h2 className=\"text-xl font-bold text-orange-400 mb-2\">Created Plans</h2>\n              {isLoadingCreatedPlans ? (\n                <div className=\"flex justify-center items-center h-24\"><LoadingSpinner /></div>\n              ) : isErrorCreatedPlans ? (\n                <p className=\"text-red-500 text-center\">Error loading created plans.</p>\n              ) : createdPlans.length === 0 ? (\n                <p className=\"text-gray-400 text-center\">No created plans yet.</p>\n              ) : (\n                <div className=\"space-y-4\">\n                  {createdPlans.map((plan) => (\n                    <PlanCard\n                      key={plan.id}\n                      plan={plan}\n                    />\n                  ))}\n                  {hasNextCreatedPlansPage && (\n                    <div className=\"flex justify-center mt-4\">\n                      <Button onClick={() => fetchNextCreatedPlansPage()} disabled={isFetchingNextCreatedPlansPage}>\n                        {isFetchingNextCreatedPlansPage ? <LoadingSpinner /> : \"Load More\"}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n            {/* Joined Plans Section */}\n            <div>\n              <h2 className=\"text-xl font-bold text-orange-400 mb-2\">Joined Plans</h2>\n              {isLoadingJoinedPlans ? (\n                <div className=\"flex justify-center items-center h-24\"><LoadingSpinner /></div>\n              ) : isErrorJoinedPlans ? (\n                <p className=\"text-red-500 text-center\">Error loading joined plans.</p>\n              ) : joinedPlans.length === 0 ? (\n                <p className=\"text-gray-400 text-center\">No joined plans yet.</p>\n              ) : (\n                <div className=\"space-y-4\">\n                  {joinedPlans.map((plan) => (\n                    <PlanCard\n                      key={plan.id}\n                      plan={plan}\n                    />\n                  ))}\n                  {hasNextJoinedPlansPage && (\n                    <div className=\"flex justify-center mt-4\">\n                      <Button onClick={() => fetchNextJoinedPlansPage()} disabled={isFetchingNextJoinedPlansPage}>\n                        {isFetchingNextJoinedPlansPage ? <LoadingSpinner /> : \"Load More\"}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n        </TabsContent>\n      </Tabs>\n      <>\n        <EditProfileDialog open={isEditProfileDialogOpen} onOpenChange={setIsEditProfileDialogOpen} />\n        <FollowRequestsDialog open={isFollowRequestsDialogOpen} onOpenChange={setIsFollowRequestsDialogOpen} />\n        <ProfileSettingsDialog open={isProfileSettingsDialogOpen} onOpenChange={setIsProfileSettingsDialogOpen} />\n      </>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/app/(app)/settings/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":71,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { useUpdateUser } from \"@/hooks/use-users\" // This is now aliased from useUpdateUserProfile\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Settings, User, Bell, Shield, Lock, Trash2, LogOut } from \"lucide-react\"\nimport { useRouter } from \"next/navigation\"\nimport { toast } from \"sonner\"\nimport { LoadingSpinner } from \"@/components/loading-spinner\"\n// Removed direct import of useUpdateProfile as it's now aliased in use-users\n\nexport default function SettingsPage() {\n  const { currentUser, logout, dbUser, refreshDbUser, updateDbUser } = useAuth() // Changed userProfile to dbUser, updateUserProfile to updateDbUser\n  const { mutate: updateUserProfileMutation, isPending } = useUpdateUser() // Using the aliased hook\n  const router = useRouter()\n  const [isPrivate, setIsPrivate] = useState(dbUser?.isPrivate || false)\n\n  // Notification settings\n  const [notifications, setNotifications] = useState({\n    email: true,\n    push: true,\n    likes: true,\n    comments: true,\n    follows: true,\n    plans: true,\n  })\n\n  // Privacy settings\n  const [privacy, setPrivacy] = useState({\n    profilePublic: true, // This will be controlled by isPrivate switch\n    showEmail: false,\n    showLocation: true,\n    allowMessages: true,\n  })\n\n  useEffect(() => {\n    if (dbUser) {\n      setIsPrivate(dbUser.isPrivate || false)\n      // Initialize notification and privacy settings from dbUser if they exist\n      setNotifications({\n        email: dbUser.notificationSettings?.emailNotifications ?? true,\n        push: dbUser.notificationSettings?.pushNotifications ?? true,\n        likes: dbUser.notificationSettings?.likes ?? true,\n        comments: dbUser.notificationSettings?.comments ?? true,\n        follows: dbUser.notificationSettings?.follows ?? true,\n        plans: dbUser.notificationSettings?.planUpdates ?? true,\n      })\n      setPrivacy({\n        profilePublic: !dbUser.isPrivate, // Public is inverse of private\n        showEmail: dbUser.privacySettings?.showEmail ?? false,\n        showLocation: dbUser.privacySettings?.showLocation ?? true,\n        allowMessages:\n          (dbUser.privacySettings?.allowMessages === \"everyone\" ||\n            dbUser.privacySettings?.allowMessages === \"followers\") ??\n          true,\n      })\n    }\n  }, [dbUser])\n\n  const handleLogout = async () => {\n    try {\n      await logout()\n      router.push(\"/login\")\n    } catch (error) {\n      // Logout error handled\n      toast.error(\"Failed to logout\")\n    }\n  }\n\n  const handleSaveNotifications = async () => {\n    if (!dbUser) {\n      toast.error(\"User not authenticated.\")\n      return\n    }\n    \n    const updatedData = {\n      notificationSettings: {\n        emailNotifications: notifications.email,\n        pushNotifications: notifications.push,\n        likes: notifications.likes,\n        comments: notifications.comments,\n        follows: notifications.follows,\n        planUpdates: notifications.plans,\n        messages: true,\n      },\n    }\n    \n    updateUserProfileMutation(\n      {\n        userId: dbUser.id,\n        data: updatedData,\n      },\n      {\n        onSuccess: async () => {\n          await refreshDbUser()\n          // Also update the auth context\n          await updateDbUser(updatedData)\n          toast.success(\"Notification settings updated\")\n        },\n        onError: (error) => {\n          toast.error(`Failed to update settings: ${error.message}`)\n        },\n      },\n    )\n  }\n\n  const handleSavePrivacy = async () => {\n    if (!dbUser) {\n      toast.error(\"User not authenticated.\")\n      return\n    }\n    \n    const updatedData = {\n      isPrivate: !privacy.profilePublic, // Update isPrivate based on profilePublic\n      privacySettings: {\n        isPrivate: !privacy.profilePublic,\n        showEmail: privacy.showEmail,\n        showLocation: privacy.showLocation,\n        allowMessages: privacy.allowMessages ? \"everyone\" as const : \"none\" as const, // Simplified for boolean switch\n        allowPlanInvites: \"everyone\" as const, // Assuming this is always everyone or handled elsewhere\n      },\n    }\n    \n    updateUserProfileMutation(\n      {\n        userId: dbUser.id,\n        data: updatedData,\n      },\n      {\n        onSuccess: async () => {\n          await refreshDbUser()\n          // Also update the auth context\n          await updateDbUser(updatedData)\n          toast.success(\"Privacy settings updated\")\n        },\n        onError: (error) => {\n          toast.error(`Failed to update settings: ${error.message}`)\n        },\n      },\n    )\n  }\n\n  const handleSaveChanges = async () => {\n    if (!dbUser) {\n      toast.error(\"User not authenticated.\")\n      return\n    }\n\n    const updatedData = { isPrivate }\n\n    updateUserProfileMutation(\n      { userId: dbUser.id, data: updatedData },\n      {\n        onSuccess: async () => {\n          await refreshDbUser()\n          // Also update the auth context\n          await updateDbUser(updatedData)\n          toast.success(\"Profile privacy updated successfully!\")\n        },\n        onError: (error) => {\n          toast.error(`Failed to update settings: ${error.message}`)\n        },\n      },\n    )\n  }\n\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <Settings className=\"h-8 w-8 text-primary\" />\n        <h1 className=\"text-3xl font-bold text-white\">Settings</h1>\n      </div>\n\n      {/* Account Overview */}\n      <Card className=\"bg-gray-900/50 border-gray-800 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center space-x-2\">\n            <User className=\"h-5 w-5\" />\n            <span>Account Overview</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Avatar className=\"h-16 w-16 ring-2 ring-gray-800\">\n              <AvatarImage src={currentUser?.photoURL || \"\"} />\n              <AvatarFallback className=\"bg-primary text-black text-xl\">\n                {currentUser?.displayName?.charAt(0) || currentUser?.email?.charAt(0) || \"U\"}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"space-y-1\">\n              <h3 className=\"text-lg font-semibold text-white\">{currentUser?.displayName}</h3>\n              <p className=\"text-gray-400\">{currentUser?.email}</p>\n              <Badge variant=\"outline\" className=\"border-green-600 text-green-400\">\n                Verified\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Notification Settings */}\n      <Card className=\"bg-gray-900/50 border-gray-800 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center space-x-2\">\n            <Bell className=\"h-5 w-5\" />\n            <span>Notifications</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label className=\"text-white\">Email Notifications</Label>\n                <p className=\"text-sm text-gray-400\">Receive notifications via email</p>\n              </div>\n              <Switch\n                checked={notifications.email}\n                onCheckedChange={(checked) => setNotifications({ ...notifications, email: checked })}\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label className=\"text-white\">Push Notifications</Label>\n                <p className=\"text-sm text-gray-400\">Receive push notifications on your device</p>\n              </div>\n              <Switch\n                checked={notifications.push}\n                onCheckedChange={(checked) => setNotifications({ ...notifications, push: checked })}\n              />\n            </div>\n\n            <Separator className=\"bg-gray-700\" />\n\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-white\">Activity Notifications</h4>\n\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-gray-300\">Likes on your posts</Label>\n                <Switch\n                  checked={notifications.likes}\n                  onCheckedChange={(checked) => setNotifications({ ...notifications, likes: checked })}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-gray-300\">Comments on your posts</Label>\n                <Switch\n                  checked={notifications.comments}\n                  onCheckedChange={(checked) => setNotifications({ ...notifications, comments: checked })}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-gray-300\">New followers</Label>\n                <Switch\n                  checked={notifications.follows}\n                  onCheckedChange={(checked) => setNotifications({ ...notifications, follows: checked })}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-gray-300\">Plan updates</Label>\n                <Switch\n                  checked={notifications.plans}\n                  onCheckedChange={(checked) => setNotifications({ ...notifications, plans: checked })}\n                />\n              </div>\n            </div>\n          </div>\n\n          <Button\n            onClick={handleSaveNotifications}\n            disabled={isPending}\n            className=\"bg-primary text-black hover:bg-primary/90\"\n          >\n            {isPending ? <LoadingSpinner className=\"text-black\" /> : \"Save Notification Settings\"}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Privacy Settings */}\n      <Card className=\"bg-gray-900/50 border-gray-800 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center space-x-2\">\n            <Shield className=\"h-5 w-5\" />\n            <span>Privacy & Security</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label className=\"text-white\">Public Profile</Label>\n                <p className=\"text-sm text-gray-400\">Make your profile visible to everyone</p>\n              </div>\n              <Switch\n                checked={privacy.profilePublic}\n                onCheckedChange={(checked) => setPrivacy({ ...privacy, profilePublic: checked })}\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label className=\"text-white\">Show Email</Label>\n                <p className=\"text-sm text-gray-400\">Display your email on your profile</p>\n              </div>\n              <Switch\n                checked={privacy.showEmail}\n                onCheckedChange={(checked) => setPrivacy({ ...privacy, showEmail: checked })}\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label className=\"text-white\">Show Location</Label>\n                <p className=\"text-sm text-gray-400\">Display your location on your profile</p>\n              </div>\n              <Switch\n                checked={privacy.showLocation}\n                onCheckedChange={(checked) => setPrivacy({ ...privacy, showLocation: checked })}\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label className=\"text-white\">Allow Messages</Label>\n                <p className=\"text-sm text-gray-400\">Let others send you direct messages</p>\n              </div>\n              <Switch\n                checked={privacy.allowMessages}\n                onCheckedChange={(checked) => setPrivacy({ ...privacy, allowMessages: checked })}\n              />\n            </div>\n          </div>\n\n          <Button\n            onClick={handleSavePrivacy}\n            disabled={isPending}\n            className=\"bg-primary text-black hover:bg-primary/90\"\n          >\n            {isPending ? <LoadingSpinner className=\"text-black\" /> : \"Save Privacy Settings\"}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Account Actions */}\n      <Card className=\"bg-gray-900/50 border-gray-800 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center space-x-2\">\n            <Lock className=\"h-5 w-5\" />\n            <span>Account Actions</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-4 rounded-lg border border-gray-700\">\n              <div className=\"space-y-1\">\n                <h4 className=\"font-medium text-white\">Change Password</h4>\n                <p className=\"text-sm text-gray-400\">Update your account password</p>\n              </div>\n              <Button\n                variant=\"outline\"\n                className=\"border-gray-700 text-gray-300 hover:text-white hover:bg-gray-800 bg-transparent\"\n              >\n                Change Password\n              </Button>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 rounded-lg border border-gray-700\">\n              <div className=\"space-y-1\">\n                <h4 className=\"font-medium text-white\">Two-Factor Authentication</h4>\n                <p className=\"text-sm text-gray-400\">Add an extra layer of security</p>\n              </div>\n              <Button\n                variant=\"outline\"\n                className=\"border-gray-700 text-gray-300 hover:text-white hover:bg-gray-800 bg-transparent\"\n              >\n                Enable 2FA\n              </Button>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 rounded-lg border border-gray-700\">\n              <div className=\"space-y-1\">\n                <h4 className=\"font-medium text-white\">Download Data</h4>\n                <p className=\"text-sm text-gray-400\">Download a copy of your data</p>\n              </div>\n              <Button\n                variant=\"outline\"\n                className=\"border-gray-700 text-gray-300 hover:text-white hover:bg-gray-800 bg-transparent\"\n              >\n                Download\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Privacy Settings (Specific to isPrivate) */}\n      <Card className=\"bg-gray-900/50 border-gray-800 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center space-x-2\">\n            <Shield className=\"h-5 w-5\" />\n            <span>Profile Privacy</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"private-account\" className=\"text-white\">\n                Private Account\n              </Label>\n              <Switch\n                id=\"private-account\"\n                checked={isPrivate}\n                onCheckedChange={setIsPrivate}\n                className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                disabled={isPending}\n              />\n            </div>\n          </div>\n          <Button\n            onClick={handleSaveChanges}\n            disabled={isPending}\n            className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n          >\n            {isPending ? <LoadingSpinner className=\"text-white\" /> : \"Save Profile Privacy\"}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Danger Zone */}\n      <Card className=\"bg-red-900/20 border-red-800 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-red-400 flex items-center space-x-2\">\n            <Trash2 className=\"h-5 w-5\" />\n            <span>Danger Zone</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-4 rounded-lg border border-red-800\">\n              <div className=\"space-y-1\">\n                <h4 className=\"font-medium text-white\">Sign Out</h4>\n                <p className=\"text-sm text-gray-400\">Sign out of your account on this device</p>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={handleLogout}\n                className=\"border-red-700 text-red-400 hover:text-red-300 hover:bg-red-900/30 bg-transparent\"\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Sign Out\n              </Button>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 rounded-lg border border-red-800\">\n              <div className=\"space-y-1\">\n                <h4 className=\"font-medium text-white\">Delete Account</h4>\n                <p className=\"text-sm text-gray-400\">Permanently delete your account and all data</p>\n              </div>\n              <Button\n                variant=\"outline\"\n                className=\"border-red-700 text-red-400 hover:text-red-300 hover:bg-red-900/30 bg-transparent\"\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                Delete Account\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/app/(auth)/login/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1216,1219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1216,1219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":33,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":41,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":54,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":67,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":79,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { useState } from \"react\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { MountainIcon } from \"lucide-react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport useForgotPassword from \"@/hooks/use-forgot-password\" // Import the new hook\nimport { toast } from \"sonner\"\nimport { LoadingSpinner } from \"@/components/loading-spinner\"\nimport { useRouter } from \"next/navigation\"\n\nexport default function LoginPage() {\n  const router = useRouter()\n  const { login, signInWithGoogle, signInWithPhone, confirmPhoneCode, loading } = useAuth()\n  const { sendResetEmail, loading: isSendingResetEmail } = useForgotPassword() // Use the new hook\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [phoneNumber, setPhoneNumber] = useState(\"\")\n  const [otp, setOtp] = useState(\"\")\n  const [showOtpInput, setShowOtpInput] = useState(false)\n  const [confirmationResult, setConfirmationResult] = useState<any>(null) // Firebase ConfirmationResult\n\n  const handleEmailLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    try {\n      await login(email, password)\n      router.push(\"/feed\")\n    } catch (error) {\n      // Error handled by useAuth hook\n    }\n  }\n\n  const handleGoogleLogin = async () => {\n    try {\n      await signInWithGoogle()\n    } catch (error) {\n      // Error handled by useAuth hook\n    }\n  }\n\n  const handlePhoneSignIn = async (e: React.FormEvent) => {\n    e.preventDefault()\n    try {\n      const result = await signInWithPhone(phoneNumber)\n      if (result) {\n        setConfirmationResult(result)\n        setShowOtpInput(true)\n      }\n    } catch (error) {\n      // Error handled by useAuth hook\n    }\n  }\n\n  const handleOtpConfirm = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!confirmationResult) {\n      toast.error(\"No OTP request initiated.\")\n      return\n    }\n    try {\n      await confirmPhoneCode(confirmationResult, otp)\n    } catch (error) {\n      // Error handled by useAuth hook\n    }\n  }\n\n  const handleForgotPassword = async () => {\n    if (!email) {\n      toast.error(\"Please enter your email to reset password.\")\n      return\n    }\n    try {\n      await sendResetEmail(email) // Use the new hook's function\n    } catch (error) {\n      // Error handled by useForgotPassword hook\n    }\n  }\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-black p-4\">\n      <Card className=\"glass-card w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <MountainIcon className=\"mx-auto h-16 w-16 text-orange-500 mb-4\" />\n          <CardTitle className=\"text-3xl font-bold text-orange-500\">Login to Peakfolk</CardTitle>\n          <CardDescription className=\"text-gray-400\">Enter your credentials to access your account.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Email/Password Login */}\n          <form onSubmit={handleEmailLogin} className=\"space-y-4\" aria-busy={loading} aria-live=\"polite\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"email\" className=\"text-white\">\n                Email\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"m@example.com\"\n                required\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                disabled={loading}\n              />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"password\" className=\"text-white\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                required\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                disabled={loading}\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\" disabled={loading} aria-busy={loading}>\n              {loading ? <LoadingSpinner className=\"text-white\" /> : \"Login\"}\n            </Button>\n          </form>\n\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t border-gray-700\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-black px-2 text-gray-500\">Or continue with</span>\n            </div>\n          </div>\n\n          {/* Social Logins */}\n          <div className=\"space-y-3\">\n            <Button\n              variant=\"outline\"\n              className=\"w-full border-orange-500 text-orange-500 hover:bg-orange-900 hover:text-white bg-transparent\"\n              onClick={handleGoogleLogin}\n              disabled={loading}\n              aria-busy={loading}\n            >\n              {loading ? <LoadingSpinner className=\"text-orange-500\" /> : \"Login with Google\"}\n            </Button>\n          </div>\n\n          {/* Phone Login */}\n          <div className=\"space-y-3\">\n            {!showOtpInput ? (\n              <form onSubmit={handlePhoneSignIn} className=\"space-y-3\" aria-busy={loading}>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"phone\" className=\"text-white\">\n                    Phone Number\n                  </Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    placeholder=\"+91 9876543210\"\n                    required\n                    value={phoneNumber}\n                    onChange={(e) => setPhoneNumber(e.target.value)}\n                    className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                    disabled={loading}\n                  />\n                </div>\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                  disabled={loading}\n                  aria-busy={loading}\n                >\n                  {loading ? <LoadingSpinner className=\"text-white\" /> : \"Send OTP\"}\n                </Button>\n                <div id=\"recaptcha-container\"></div> {/* reCAPTCHA container */}\n              </form>\n            ) : (\n              <form onSubmit={handleOtpConfirm} className=\"space-y-3\" aria-busy={loading}>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"otp\" className=\"text-white\">\n                    OTP\n                  </Label>\n                  <Input\n                    id=\"otp\"\n                    type=\"text\"\n                    placeholder=\"Enter OTP\"\n                    required\n                    value={otp}\n                    onChange={(e) => setOtp(e.target.value)}\n                    className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                    disabled={loading}\n                  />\n                </div>\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                  disabled={loading}\n                  aria-busy={loading}\n                >\n                  {loading ? <LoadingSpinner className=\"text-white\" /> : \"Verify OTP\"}\n                </Button>\n              </form>\n            )}\n          </div>\n\n          <div className=\"text-center text-sm text-gray-400\">\n            Don&apos;t have an account?{\" \"}\n            <Link href=\"/register\" className=\"font-medium text-orange-500 hover:underline\">\n              Sign up\n            </Link>\n          </div>\n          <div className=\"text-center text-sm text-gray-400\">\n            <Button\n              variant=\"link\"\n              onClick={handleForgotPassword}\n              className=\"text-orange-500 hover:underline p-0 h-auto\"\n              disabled={isSendingResetEmail}\n              aria-busy={isSendingResetEmail}\n            >\n              {isSendingResetEmail ? <LoadingSpinner className=\"text-orange-500\" size=\"sm\" /> : \"Forgot password?\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/app/(auth)/register/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1150,1153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1150,1153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":44,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":52,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":65,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":78,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { useState } from \"react\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { MountainIcon } from \"lucide-react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { toast } from \"sonner\"\nimport { LoadingSpinner } from \"@/components/loading-spinner\"\nimport { checkUsernameExists } from \"@/lib/firebase-services\" // Import the new service function\nimport { useRouter } from \"next/navigation\"\n\nexport default function RegisterPage() {\n  const router = useRouter()\n  const [email, setEmail] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [phoneNumber, setPhoneNumber] = useState(\"\")\n  const [otp, setOtp] = useState(\"\")\n  const [showOtpInput, setShowOtpInput] = useState(false)\n  const [confirmationResult, setConfirmationResult] = useState<any>(null) // Firebase ConfirmationResult\n\n  const { register, signInWithGoogle, signInWithPhone, confirmPhoneCode, loading } = useAuth()\n\n  const handleEmailRegister = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (password !== confirmPassword) {\n      toast.error(\"Passwords do not match.\")\n      return\n    }\n    try {\n      const usernameExists = await checkUsernameExists(username) // Use the new service function\n      if (usernameExists) {\n        toast.error(\"Username already exists. Please choose a different one.\")\n        return\n      }\n      await register(email, password, username)\n      router.push(\"/login\")\n    } catch (error) {\n      // Error handled by useAuth hook\n    }\n  }\n\n  const handleGoogleRegister = async () => {\n    try {\n      await signInWithGoogle()\n    } catch (error) {\n      // Error handled by useAuth hook\n    }\n  }\n\n  const handlePhoneSignIn = async (e: React.FormEvent) => {\n    e.preventDefault()\n    try {\n      const result = await signInWithPhone(phoneNumber)\n      if (result) {\n        setConfirmationResult(result)\n        setShowOtpInput(true)\n      }\n    } catch (error) {\n      // Error handled by useAuth hook\n    }\n  }\n\n  const handleOtpConfirm = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!confirmationResult) {\n      toast.error(\"No OTP request initiated.\")\n      return\n    }\n    try {\n      await confirmPhoneCode(confirmationResult, otp)\n    } catch (error) {\n      // Error handled by useAuth hook\n    }\n  }\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-black p-4\">\n      <Card className=\"glass-card w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <MountainIcon className=\"mx-auto h-16 w-16 text-orange-500 mb-4\" />\n          <CardTitle className=\"text-3xl font-bold text-orange-500\">Join Peakfolk</CardTitle>\n          <CardDescription className=\"text-gray-400\">Create your account to start your adventure.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Email/Password Register */}\n          <form onSubmit={handleEmailRegister} className=\"space-y-4\" aria-busy={loading} aria-live=\"polite\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"email\" className=\"text-white\">\n                Email\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"m@example.com\"\n                required\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                disabled={loading}\n              />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"username\" className=\"text-white\">\n                Username\n              </Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"peakexplorer\"\n                required\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                disabled={loading}\n              />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"password\" className=\"text-white\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                required\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                disabled={loading}\n              />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"confirm-password\" className=\"text-white\">\n                Confirm Password\n              </Label>\n              <Input\n                id=\"confirm-password\"\n                type=\"password\"\n                required\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                disabled={loading}\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\" disabled={loading} aria-busy={loading}>\n              {loading ? <LoadingSpinner className=\"text-white\" /> : \"Register\"}\n            </Button>\n          </form>\n\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t border-gray-700\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-black px-2 text-gray-500\">Or continue with</span>\n            </div>\n          </div>\n\n          {/* Social Logins */}\n          <div className=\"space-y-3\">\n            <Button\n              variant=\"outline\"\n              className=\"w-full border-orange-500 text-orange-500 hover:bg-orange-900 hover:text-white bg-transparent\"\n              onClick={handleGoogleRegister}\n              disabled={loading}\n              aria-busy={loading}\n            >\n              {loading ? <LoadingSpinner className=\"text-orange-500\" /> : \"Register with Google\"}\n            </Button>\n          </div>\n\n          {/* Phone Register */}\n          <div className=\"space-y-3\">\n            {!showOtpInput ? (\n              <form onSubmit={handlePhoneSignIn} className=\"space-y-3\" aria-busy={loading}>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"phone-register\" className=\"text-white\">\n                    Phone Number\n                  </Label>\n                  <Input\n                    id=\"phone-register\"\n                    type=\"tel\"\n                    placeholder=\"+91 9876543210\"\n                    required\n                    value={phoneNumber}\n                    onChange={(e) => setPhoneNumber(e.target.value)}\n                    className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                    disabled={loading}\n                  />\n                </div>\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                  disabled={loading}\n                  aria-busy={loading}\n                >\n                  {loading ? <LoadingSpinner className=\"text-white\" /> : \"Send OTP\"}\n                </Button>\n                <div id=\"recaptcha-container\"></div> {/* reCAPTCHA container */}\n              </form>\n            ) : (\n              <form onSubmit={handleOtpConfirm} className=\"space-y-3\" aria-busy={loading}>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"otp-register\" className=\"text-white\">\n                    OTP\n                  </Label>\n                  <Input\n                    id=\"otp-register\"\n                    type=\"text\"\n                    placeholder=\"Enter OTP\"\n                    required\n                    value={otp}\n                    onChange={(e) => setOtp(e.target.value)}\n                    className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                    disabled={loading}\n                  />\n                </div>\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                  disabled={loading}\n                  aria-busy={loading}\n                >\n                  {loading ? <LoadingSpinner className=\"text-white\" /> : \"Verify OTP\"}\n                </Button>\n              </form>\n            )}\n          </div>\n\n          <div className=\"text-center text-sm text-gray-400\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" className=\"font-medium text-orange-500 hover:underline\">\n              Login\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/app/api/follows/toggle/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3864,3867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3864,3867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\"\nimport { adminAuth, adminDb } from \"@/lib/firebase-admin\"\n\nexport async function POST(req: NextRequest) {\n  try {\n    const authHeader = req.headers.get(\"authorization\") || \"\"\n    const token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : undefined\n    if (!token) return NextResponse.json({ error: \"Missing Authorization header\" }, { status: 401 })\n\n    const decoded = await adminAuth.verifyIdToken(token)\n    const followerId = decoded.uid\n\n    const body = await req.json()\n    const { followingId } = body || {}\n    if (!followingId) return NextResponse.json({ error: \"followingId is required\" }, { status: 400 })\n    if (followerId === followingId) return NextResponse.json({ error: \"Cannot follow yourself\" }, { status: 400 })\n\n    const followerRef = adminDb.collection(\"users\").doc(followerId)\n    const followingRef = adminDb.collection(\"users\").doc(followingId)\n\n    const [followerSnap, followingSnap] = await Promise.all([followerRef.get(), followingRef.get()])\n    if (!followerSnap.exists || !followingSnap.exists) {\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 })\n    }\n\n    const followerData = followerSnap.data() || {}\n    const followingData = followingSnap.data() || {}\n\n    const isFollowing = Array.isArray(followerData.followingIds) && followerData.followingIds.includes(followingId)\n\n    const batch = adminDb.batch()\n\n    // Since we need FieldValue, use standard admin import\n    const { FieldValue } = await import(\"firebase-admin/firestore\")\n\n    if (isFollowing) {\n      batch.update(followerRef, {\n        followingIds: FieldValue.arrayRemove(followingId),\n        following: Math.max(0, (followerData.following || 0) - 1),\n      })\n      batch.update(followingRef, {\n        followerIds: FieldValue.arrayRemove(followerId),\n        followers: Math.max(0, (followingData.followers || 0) - 1),\n      })\n    } else {\n      if (followingData.isPrivate) {\n        // Send follow request\n        batch.update(followingRef, {\n          pendingFollowRequests: FieldValue.arrayUnion(followerId),\n        })\n        batch.update(followerRef, {\n          sentFollowRequests: FieldValue.arrayUnion(followingId),\n        })\n        // Notification for recipient\n        const notifRef = adminDb.collection(\"notifications\").doc()\n        batch.set(notifRef, {\n          id: notifRef.id,\n          toUserId: followingId,\n          fromUser: {\n            id: followerId,\n            username: followerData.username,\n            name: followerData.displayName,\n            avatar: followerData.photoURL,\n          },\n          type: \"follow_request\",\n          content: `${followerData.displayName || \"Someone\"} sent you a follow request.`,\n          isRead: false,\n          createdAt: new Date(),\n        })\n      } else {\n        // Direct follow\n        batch.update(followerRef, {\n          followingIds: FieldValue.arrayUnion(followingId),\n          following: (followerData.following || 0) + 1,\n        })\n        batch.update(followingRef, {\n          followerIds: FieldValue.arrayUnion(followerId),\n          followers: (followingData.followers || 0) + 1,\n        })\n        const notifRef = adminDb.collection(\"notifications\").doc()\n        batch.set(notifRef, {\n          id: notifRef.id,\n          toUserId: followingId,\n          fromUser: {\n            id: followerId,\n            username: followerData.username,\n            name: followerData.displayName,\n            avatar: followerData.photoURL,\n          },\n          type: \"follow\",\n          content: `${followerData.displayName || \"Someone\"} started following you.`,\n          isRead: false,\n          createdAt: new Date(),\n        })\n      }\n    }\n\n    await batch.commit()\n\n    return NextResponse.json({ ok: true, following: !isFollowing }, { status: 200 })\n  } catch (err: any) {\n    console.error(\"[API] /api/follows/toggle POST error\", err)\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/app/api/health/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":19,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server'\n\nexport async function GET() {\n  try {\n    // Basic health check\n    const health = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      environment: process.env.NODE_ENV,\n      version: process.env.npm_package_version || '1.0.0',\n      memory: {\n        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),\n        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),\n      },\n    }\n\n    return NextResponse.json(health, { status: 200 })\n  } catch (error) {\n    return NextResponse.json(\n      {\n        status: 'unhealthy',\n        timestamp: new Date().toISOString(),\n        error: 'Health check failed',\n      },\n      { status: 500 }\n    )\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/app/api/plans/[planId]/join/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[871,874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[871,874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1137,1140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1137,1140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1183,1186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1183,1186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3919,3922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3919,3922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\"\nimport { adminAuth, adminDb, FieldValue } from \"@/lib/firebase-admin\"\n\nexport async function POST(req: NextRequest, { params }: { params: { planId: string } }) {\n  try {\n    const authHeader = req.headers.get(\"authorization\") || \"\"\n    const token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : undefined\n    if (!token) return NextResponse.json({ error: \"Missing Authorization header\" }, { status: 401 })\n\n    const decoded = await adminAuth.verifyIdToken(token)\n    const userId = decoded.uid\n\n    const planId = params?.planId\n    if (!planId) return NextResponse.json({ error: \"planId is required\" }, { status: 400 })\n\n    const planRef = adminDb.collection(\"plans\").doc(planId)\n    const userRef = adminDb.collection(\"users\").doc(userId)\n\n    const result = await adminDb.runTransaction(async (tx: any) => {\n      const [planSnap, userSnap] = await Promise.all([tx.get(planRef), tx.get(userRef)])\n      if (!planSnap.exists) throw new Error(\"Plan not found\")\n      if (!userSnap.exists) throw new Error(\"User not found\")\n\n      const planData = planSnap.data() as any\n      const userData = userSnap.data() as any\n\n      const participantIds: string[] = Array.isArray(planData.participantIds) ? planData.participantIds : []\n      const currentParticipants: number = Number(planData.currentParticipants || participantIds.length || 0)\n      const maxParticipants: number | null = planData.maxParticipants ?? null\n\n      const alreadyJoined = participantIds.includes(userId)\n      if (alreadyJoined) {\n        return { joined: true, pending: false }\n      }\n\n      // For private plans, add a pending request instead of immediate join\n      if (planData.isPrivate) {\n        const pendingRequests: string[] = Array.isArray(planData.pendingJoinRequests)\n          ? planData.pendingJoinRequests\n          : []\n        if (!pendingRequests.includes(userId)) {\n          tx.update(planRef, {\n            pendingJoinRequests: FieldValue.arrayUnion(userId),\n          })\n          // Notify organizer of join request\n          const notifRef = adminDb.collection(\"notifications\").doc()\n          tx.set(notifRef, {\n            id: notifRef.id,\n            toUserId: planData.userId,\n            fromUser: {\n              id: userId,\n              username: userData.username,\n              name: userData.displayName || userData.username,\n              avatar: userData.photoURL,\n            },\n            type: \"plan_join_request\",\n            planId,\n            content: `${userData.displayName || \"Someone\"} requested to join your plan \"${planData.title}\"`,\n            isRead: false,\n            createdAt: new Date(),\n          })\n        }\n        return { joined: false, pending: true }\n      }\n\n      // Public plan - enforce capacity\n      if (maxParticipants && currentParticipants >= maxParticipants) {\n        throw new Error(\"Plan is full\")\n      }\n\n      tx.update(planRef, {\n        participantIds: FieldValue.arrayUnion(userId),\n        currentParticipants: (currentParticipants || 0) + 1,\n        updatedAt: new Date(),\n      })\n\n      // Notify organizer of new participant\n      if (planData.userId !== userId) {\n        const notifRef = adminDb.collection(\"notifications\").doc()\n        tx.set(notifRef, {\n          id: notifRef.id,\n          toUserId: planData.userId,\n          fromUser: {\n            id: userId,\n            username: userData.username,\n            name: userData.displayName || userData.username,\n            avatar: userData.photoURL,\n          },\n          type: \"plan_join\",\n          planId,\n          content: `${userData.displayName || \"Someone\"} joined your plan \"${planData.title}\"`,\n          isRead: false,\n          createdAt: new Date(),\n        })\n      }\n\n      return { joined: true, pending: false }\n    })\n\n    return NextResponse.json({ ok: true, ...result }, { status: 200 })\n  } catch (err: any) {\n    const message = String(err?.message || err)\n    const status = /not found/i.test(message) ? 404 : /full|capacity/i.test(message) ? 409 : 500\n    console.error(\"[API] /api/plans/[planId]/join POST error\", err)\n    return NextResponse.json({ error: message || \"Server error\" }, { status })\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/app/api/plans/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3423,3426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3423,3426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\"\nimport { adminAuth, adminDb } from \"@/lib/firebase-admin\"\n\nexport async function POST(req: NextRequest) {\n  try {\n    const authHeader = req.headers.get(\"authorization\") || \"\"\n    const token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : undefined\n    if (!token) return NextResponse.json({ error: \"Missing Authorization header\" }, { status: 401 })\n\n    const decoded = await adminAuth.verifyIdToken(token)\n    const userId = decoded.uid\n\n    const body = await req.json()\n    const {\n      title,\n      description,\n      imageUrl,\n      location,\n      dateTime,\n      maxParticipants,\n      costPerHead,\n      currency,\n      isPrivate = false,\n    } = body || {}\n\n    // Validation\n    if (!title || typeof title !== \"string\" || title.trim().length < 3 || title.length > 120) {\n      return NextResponse.json({ error: \"Invalid title (3-120 chars)\" }, { status: 400 })\n    }\n    if (!location || typeof location !== \"string\" || location.trim().length < 2) {\n      return NextResponse.json({ error: \"Invalid location\" }, { status: 400 })\n    }\n    if (!dateTime) {\n      return NextResponse.json({ error: \"dateTime is required\" }, { status: 400 })\n    }\n    const dt = new Date(dateTime)\n    if (isNaN(dt.getTime()) || dt.getTime() < Date.now() - 60_000) {\n      return NextResponse.json({ error: \"dateTime must be a future date\" }, { status: 400 })\n    }\n    if (!currency || typeof currency !== \"string\") {\n      return NextResponse.json({ error: \"currency is required\" }, { status: 400 })\n    }\n    if (costPerHead != null && (typeof costPerHead !== \"number\" || costPerHead < 0)) {\n      return NextResponse.json({ error: \"costPerHead must be a non-negative number\" }, { status: 400 })\n    }\n    if (maxParticipants != null) {\n      if (typeof maxParticipants !== \"number\" || maxParticipants < 1 || maxParticipants > 1000) {\n        return NextResponse.json({ error: \"maxParticipants must be between 1 and 1000\" }, { status: 400 })\n      }\n    }\n\n    const userSnap = await adminDb.collection(\"users\").doc(userId).get()\n    if (!userSnap.exists) {\n      return NextResponse.json({ error: \"Organizer user not found\" }, { status: 404 })\n    }\n    const userData = userSnap.data() || {}\n\n    const planRef = adminDb.collection(\"plans\").doc()\n    const payload = {\n      id: planRef.id,\n      userId,\n      organizer: {\n        id: userId,\n        username: userData.username || \"unknown\",\n        name: userData.displayName || userData.username || \"Unknown User\",\n        avatar: userData.photoURL || \"/placeholder.svg\",\n      },\n      title: title.trim(),\n      description: (description || \"\").toString(),\n      imageUrl: imageUrl || \"\",\n      location: location.trim(),\n      dateTime: dt,\n      maxParticipants: maxParticipants ?? null,\n      participantIds: [userId], // Organizer is first participant\n      currentParticipants: 1,\n      costPerHead: Number(costPerHead ?? 0),\n      currency,\n      isPrivate: !!isPrivate,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }\n\n    const batch = adminDb.batch()\n    batch.set(planRef, payload)\n    // optional: increment organizer's plans count if tracked\n    const userRef = adminDb.collection(\"users\").doc(userId)\n    batch.update(userRef, { plans: (userData.plans || 0) + 1 })\n    await batch.commit()\n    return NextResponse.json({ id: planRef.id }, { status: 201 })\n  } catch (err: any) {\n    console.error(\"[API] /api/plans POST error\", err)\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 })\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/advanced-search.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used.","line":4,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showFilters' is assigned a value but never used.","line":95,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setShowFilters' is assigned a value but never used.","line":95,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Search, MapPin, Calendar, DollarSign, Filter, X } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport { Slider } from \"@/components/ui/slider\"\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\"\nimport { format } from \"date-fns\"\n\ninterface SearchFilters {\n  query: string\n  location: string\n  category: string\n  dateRange: {\n    from: Date | undefined\n    to: Date | undefined\n  }\n  priceRange: [number, number]\n  maxParticipants: number | undefined\n  tags: string[]\n}\n\ninterface AdvancedSearchProps {\n  onSearch: (filters: SearchFilters) => void\n  onClear: () => void\n  isLoading?: boolean\n}\n\nconst CATEGORIES = [\n  \"All\",\n  \"Sports & Fitness\",\n  \"Food & Dining\",\n  \"Travel & Adventure\",\n  \"Arts & Culture\",\n  \"Technology\",\n  \"Business & Networking\",\n  \"Education\",\n  \"Entertainment\",\n  \"Health & Wellness\",\n  \"Outdoor & Nature\",\n  \"Music & Events\",\n  \"Gaming\",\n  \"Volunteering\",\n  \"Other\"\n]\n\nconst POPULAR_TAGS = [\n  \"Free\",\n  \"Family Friendly\",\n  \"Beginner Friendly\",\n  \"Advanced\",\n  \"Weekend\",\n  \"Evening\",\n  \"Morning\",\n  \"Virtual\",\n  \"Outdoor\",\n  \"Indoor\",\n  \"Group Activity\",\n  \"One-on-One\",\n  \"Workshop\",\n  \"Meetup\",\n  \"Competition\"\n]\n\nexport function AdvancedSearch({ onSearch, onClear, isLoading }: AdvancedSearchProps) {\n  const [filters, setFilters] = useState<SearchFilters>({\n    query: \"\",\n    location: \"\",\n    category: \"All\",\n    dateRange: {\n      from: undefined,\n      to: undefined\n    },\n    priceRange: [0, 1000],\n    maxParticipants: undefined,\n    tags: []\n  })\n\n  const [isLocationFocused, setIsLocationFocused] = useState(false)\n  const [showFilters, setShowFilters] = useState(false)\n\n  // Handle location autocomplete\n  const [locationSuggestions, setLocationSuggestions] = useState<string[]>([])\n\n  useEffect(() => {\n    if (filters.location.length > 2) {\n      // Simulate location suggestions (replace with actual geocoding service)\n      const suggestions = [\n        `${filters.location}, New York`,\n        `${filters.location}, Los Angeles`,\n        `${filters.location}, Chicago`,\n        `${filters.location}, Houston`,\n        `${filters.location}, Phoenix`\n      ]\n      setLocationSuggestions(suggestions)\n    } else {\n      setLocationSuggestions([])\n    }\n  }, [filters.location])\n\n  const handleSearch = () => {\n    onSearch(filters)\n  }\n\n  const handleClear = () => {\n    setFilters({\n      query: \"\",\n      location: \"\",\n      category: \"All\",\n      dateRange: {\n        from: undefined,\n        to: undefined\n      },\n      priceRange: [0, 1000],\n      maxParticipants: undefined,\n      tags: []\n    })\n    onClear()\n  }\n\n  const toggleTag = (tag: string) => {\n    setFilters(prev => ({\n      ...prev,\n      tags: prev.tags.includes(tag)\n        ? prev.tags.filter(t => t !== tag)\n        : [...prev.tags, tag]\n    }))\n  }\n\n  const activeFiltersCount = [\n    filters.query,\n    filters.location,\n    filters.category !== \"All\",\n    filters.dateRange.from,\n    filters.dateRange.to,\n    filters.priceRange[0] > 0 || filters.priceRange[1] < 1000,\n    filters.maxParticipants,\n    filters.tags.length > 0\n  ].filter(Boolean).length\n\n  return (\n    <Card className=\"w-full\">\n      <CardContent className=\"p-4\">\n        {/* Main Search Bar */}\n        <div className=\"flex gap-2 mb-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search plans, activities, or keywords...\"\n              value={filters.query}\n              onChange={(e) => setFilters(prev => ({ ...prev, query: e.target.value }))}\n              className=\"pl-10\"\n            />\n          </div>\n          \n          <div className=\"relative flex-1\">\n            <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Location...\"\n              value={filters.location}\n              onChange={(e) => setFilters(prev => ({ ...prev, location: e.target.value }))}\n              onFocus={() => setIsLocationFocused(true)}\n              onBlur={() => setTimeout(() => setIsLocationFocused(false), 200)}\n              className=\"pl-10\"\n            />\n            {isLocationFocused && locationSuggestions.length > 0 && (\n              <div className=\"absolute top-full left-0 right-0 bg-white border rounded-md shadow-lg z-10 mt-1\">\n                {locationSuggestions.map((suggestion, index) => (\n                  <div\n                    key={index}\n                    className=\"px-3 py-2 hover:bg-gray-100 cursor-pointer\"\n                    onClick={() => {\n                      setFilters(prev => ({ ...prev, location: suggestion }))\n                      setIsLocationFocused(false)\n                    }}\n                  >\n                    {suggestion}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button variant=\"outline\" className=\"relative\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filters\n                {activeFiltersCount > 0 && (\n                  <Badge variant=\"secondary\" className=\"ml-2 h-5 w-5 p-0 text-xs\">\n                    {activeFiltersCount}\n                  </Badge>\n                )}\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-80\" align=\"end\">\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium\">Advanced Filters</h4>\n                \n                {/* Category */}\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Category</label>\n                  <Select\n                    value={filters.category}\n                    onValueChange={(value) => setFilters(prev => ({ ...prev, category: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {CATEGORIES.map((category) => (\n                        <SelectItem key={category} value={category}>\n                          {category}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Date Range */}\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Date Range</label>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button variant=\"outline\" className=\"justify-start text-left font-normal\">\n                          <Calendar className=\"mr-2 h-4 w-4\" />\n                          {filters.dateRange.from ? format(filters.dateRange.from, \"PPP\") : \"From\"}\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <CalendarComponent\n                          mode=\"single\"\n                          selected={filters.dateRange.from}\n                          onSelect={(date) => setFilters(prev => ({ \n                            ...prev, \n                            dateRange: { ...prev.dateRange, from: date }\n                          }))}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button variant=\"outline\" className=\"justify-start text-left font-normal\">\n                          <Calendar className=\"mr-2 h-4 w-4\" />\n                          {filters.dateRange.to ? format(filters.dateRange.to, \"PPP\") : \"To\"}\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <CalendarComponent\n                          mode=\"single\"\n                          selected={filters.dateRange.to}\n                          onSelect={(date) => setFilters(prev => ({ \n                            ...prev, \n                            dateRange: { ...prev.dateRange, to: date }\n                          }))}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </div>\n                </div>\n\n                {/* Price Range */}\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">\n                    Price Range: ${filters.priceRange[0]} - ${filters.priceRange[1]}\n                  </label>\n                  <Slider\n                    value={filters.priceRange}\n                    onValueChange={(value) => setFilters(prev => ({ ...prev, priceRange: value as [number, number] }))}\n                    max={1000}\n                    step={10}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                {/* Max Participants */}\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Max Participants</label>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"Any\"\n                    value={filters.maxParticipants || \"\"}\n                    onChange={(e) => setFilters(prev => ({ \n                      ...prev, \n                      maxParticipants: e.target.value ? parseInt(e.target.value) : undefined \n                    }))}\n                  />\n                </div>\n\n                {/* Tags */}\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Tags</label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {POPULAR_TAGS.map((tag) => (\n                      <Badge\n                        key={tag}\n                        variant={filters.tags.includes(tag) ? \"default\" : \"outline\"}\n                        className=\"cursor-pointer\"\n                        onClick={() => toggleTag(tag)}\n                      >\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Clear Filters */}\n                <Button\n                  variant=\"ghost\"\n                  onClick={handleClear}\n                  className=\"w-full\"\n                >\n                  <X className=\"h-4 w-4 mr-2\" />\n                  Clear All Filters\n                </Button>\n              </div>\n            </PopoverContent>\n          </Popover>\n\n          <Button onClick={handleSearch} disabled={isLoading}>\n            {isLoading ? \"Searching...\" : \"Search\"}\n          </Button>\n        </div>\n\n        {/* Active Filters Display */}\n        {activeFiltersCount > 0 && (\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            {filters.query && (\n              <Badge variant=\"secondary\" className=\"gap-1\">\n                &quot;{filters.query}&quot;\n                <X \n                  className=\"h-3 w-3 cursor-pointer\" \n                  onClick={() => setFilters(prev => ({ ...prev, query: \"\" }))}\n                />\n              </Badge>\n            )}\n            {filters.location && (\n              <Badge variant=\"secondary\" className=\"gap-1\">\n                📍 {filters.location}\n                <X \n                  className=\"h-3 w-3 cursor-pointer\" \n                  onClick={() => setFilters(prev => ({ ...prev, location: \"\" }))}\n                />\n              </Badge>\n            )}\n            {filters.category !== \"All\" && (\n              <Badge variant=\"secondary\" className=\"gap-1\">\n                {filters.category}\n                <X \n                  className=\"h-3 w-3 cursor-pointer\" \n                  onClick={() => setFilters(prev => ({ ...prev, category: \"All\" }))}\n                />\n              </Badge>\n            )}\n            {filters.tags.map((tag) => (\n              <Badge key={tag} variant=\"secondary\" className=\"gap-1\">\n                {tag}\n                <X \n                  className=\"h-3 w-3 cursor-pointer\" \n                  onClick={() => toggleTag(tag)}\n                />\n              </Badge>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n} ","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/create-plan-form.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":252,"column":13,"nodeType":"JSXOpeningElement","endLine":252,"endColumn":120}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { CalendarIcon, ImageIcon } from \"lucide-react\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { format } from \"date-fns\"\nimport { cn } from \"@/lib/utils\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport useCreatePlan from \"@/hooks/use-create-plan\" // Import the new hook\nimport { toast } from \"sonner\"\nimport { LoadingSpinner } from \"./loading-spinner\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n\ninterface CreatePlanFormProps {\n  onPlanCreated?: () => void\n}\n\nexport function CreatePlanForm({ onPlanCreated }: CreatePlanFormProps) {\n  const { dbUser } = useAuth()\n  const [title, setTitle] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [location, setLocation] = useState(\"\")\n  const [dateTime, setDateTime] = useState<Date | undefined>(undefined)\n  const [maxParticipants, setMaxParticipants] = useState<number | undefined>(undefined)\n  const [costPerHead, setCostPerHead] = useState<number | undefined>(undefined)\n  const [currency, setCurrency] = useState(\"USD\")\n  const [imageFile, setImageFile] = useState<File | null>(null)\n  const [imagePreview, setImagePreview] = useState<string | null>(null)\n\n  const { createPlan, isCreatingPlan } = useCreatePlan() // Use the new hook\n\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0]\n      setImageFile(file)\n      setImagePreview(URL.createObjectURL(file))\n    } else {\n      setImageFile(null)\n      setImagePreview(null)\n    }\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!dbUser) {\n      toast.error(\"You must be logged in to create a plan.\")\n      return\n    }\n\n    if (!title.trim() || !description.trim() || !location.trim() || !dateTime || costPerHead === undefined) {\n      toast.error(\"Please fill in all required fields.\")\n      return\n    }\n\n    createPlan(\n      {\n        userId: dbUser.id,\n        planData: {\n          title,\n          description,\n          location,\n          dateTime,\n          maxParticipants,\n          costPerHead,\n          currency,\n        },\n        imageFile: imageFile || undefined,\n      },\n      {\n        onSuccess: () => {\n          setTitle(\"\")\n          setDescription(\"\")\n          setLocation(\"\")\n          setDateTime(undefined)\n          setMaxParticipants(undefined)\n          setCostPerHead(undefined)\n          setCurrency(\"USD\")\n          setImageFile(null)\n          setImagePreview(null)\n          onPlanCreated?.()\n        },\n      },\n    )\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\" aria-busy={isCreatingPlan} aria-live=\"polite\">\n      <fieldset disabled={isCreatingPlan} className=\"contents\">\n      <div className=\"grid gap-2\">\n        <Label htmlFor=\"title\" className=\"text-white\">\n          Plan Title\n        </Label>\n        <Input\n          id=\"title\"\n          placeholder=\"e.g., Weekend Trek to Everest Base Camp\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          required\n          className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n        />\n      </div>\n      <div className=\"grid gap-2\">\n        <Label htmlFor=\"description\" className=\"text-white\">\n          Description\n        </Label>\n        <Textarea\n          id=\"description\"\n          placeholder=\"Describe your plan in detail...\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          rows={4}\n          required\n          className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n        />\n      </div>\n      <div className=\"grid gap-2\">\n        <Label htmlFor=\"location\" className=\"text-white\">\n          Location\n        </Label>\n        <Input\n          id=\"location\"\n          placeholder=\"e.g., Himalayas, Nepal\"\n          value={location}\n          onChange={(e) => setLocation(e.target.value)}\n          required\n          className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n        />\n      </div>\n      <div className=\"grid gap-2\">\n        <Label htmlFor=\"dateTime\" className=\"text-white\">\n          Date & Time\n        </Label>\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button\n              variant={\"outline\"}\n              className={cn(\n                \"w-full justify-start text-left font-normal bg-gray-800 border-gray-700 text-white hover:bg-gray-700\",\n                !dateTime && \"text-gray-500\",\n              )}\n            >\n              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n              {dateTime ? format(dateTime, \"PPP HH:mm\") : <span>Pick a date and time</span>}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0 bg-gray-800 border-gray-700 text-white\">\n            <Calendar\n              mode=\"single\"\n              selected={dateTime}\n              onSelect={setDateTime}\n              initialFocus\n              className=\"rounded-md border\"\n            />\n            <div className=\"p-3 border-t border-gray-700\">\n              <Input\n                type=\"time\"\n                value={dateTime ? format(dateTime, \"HH:mm\") : \"\"}\n                onChange={(e) => {\n                  const [hours, minutes] = e.target.value.split(\":\").map(Number)\n                  if (dateTime) {\n                    const newDateTime = new Date(dateTime)\n                    newDateTime.setHours(hours, minutes)\n                    setDateTime(newDateTime)\n                  } else {\n                    const now = new Date()\n                    now.setHours(hours, minutes)\n                    setDateTime(now)\n                  }\n                }}\n                className=\"bg-gray-800 border-gray-700 text-white focus-visible:ring-orange-500\"\n              />\n            </div>\n          </PopoverContent>\n        </Popover>\n      </div>\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"grid gap-2\">\n          <Label htmlFor=\"maxParticipants\" className=\"text-white\">\n            Max Participants (Optional)\n          </Label>\n          <Input\n            id=\"maxParticipants\"\n            type=\"number\"\n            placeholder=\"e.g., 10\"\n            value={maxParticipants === undefined ? \"\" : maxParticipants}\n            onChange={(e) => setMaxParticipants(e.target.value ? Number.parseInt(e.target.value) : undefined)}\n            min={1}\n            className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n          />\n        </div>\n        <div className=\"grid gap-2\">\n          <Label htmlFor=\"costPerHead\" className=\"text-white\">\n            Cost Per Head\n          </Label>\n          <div className=\"flex items-center\">\n            <Select value={currency} onValueChange={setCurrency}>\n              <SelectTrigger className=\"w-[80px] bg-gray-800 border-gray-700 text-white\">\n                <SelectValue placeholder=\"Currency\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-gray-800 border-gray-700 text-white\">\n                <SelectItem value=\"USD\">USD</SelectItem>\n                <SelectItem value=\"INR\">INR</SelectItem>\n                <SelectItem value=\"EUR\">EUR</SelectItem>\n              </SelectContent>\n            </Select>\n            <Input\n              id=\"costPerHead\"\n              type=\"number\"\n              placeholder=\"e.g., 500\"\n              value={costPerHead === undefined ? \"\" : costPerHead}\n              onChange={(e) => setCostPerHead(e.target.value ? Number.parseFloat(e.target.value) : undefined)}\n              min={0}\n              step=\"0.01\"\n              required\n              className=\"flex-1 ml-2 bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"grid gap-2\">\n        <Label htmlFor=\"image\" className=\"text-white\">\n          Plan Image (Optional)\n        </Label>\n        <div className=\"flex items-center space-x-2\">\n          <Input\n            id=\"image\"\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleImageChange}\n            className=\"flex-1 bg-gray-800 border-gray-700 text-white file:text-orange-500 file:bg-gray-700 file:border-none file:rounded-md file:px-3 file:py-1\"\n          />\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={() => document.getElementById(\"image\")?.click()}\n            className=\"bg-gray-800 border-gray-700 text-white hover:bg-gray-700\"\n          >\n            <ImageIcon className=\"h-5 w-5\" />\n            <span className=\"sr-only\">Upload Image</span>\n          </Button>\n        </div>\n        {imagePreview && (\n          <div className=\"mt-2 relative w-full h-48 rounded-md overflow-hidden\">\n            <img src={imagePreview || \"/placeholder.svg\"} alt=\"Image Preview\" className=\"object-cover w-full h-full\" />\n          </div>\n        )}\n      </div>\n      </fieldset>\n      <Button type=\"submit\" className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\" disabled={isCreatingPlan} aria-busy={isCreatingPlan}>\n        {isCreatingPlan ? <LoadingSpinner className=\"text-white\" /> : \"Create Plan\"}\n      </Button>\n    </form>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/create-story-dialog.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":95,"column":17,"nodeType":"JSXOpeningElement","endLine":99,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { useState } from \"react\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { ImageIcon } from \"lucide-react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { useCreateStory } from \"@/hooks/use-stories\" // Import the new hook\nimport { toast } from \"sonner\"\nimport { LoadingSpinner } from \"./loading-spinner\"\n\ninterface CreateStoryDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}\n\nexport function CreateStoryDialog({ open, onOpenChange }: CreateStoryDialogProps) {\n  const { dbUser } = useAuth()\n  const [imageFile, setImageFile] = useState<File | null>(null)\n  const [imagePreview, setImagePreview] = useState<string | null>(null)\n\n  const { mutate: createStory, isPending: isCreatingStory } = useCreateStory() // Use the new hook\n\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0]\n      setImageFile(file)\n      setImagePreview(URL.createObjectURL(file))\n    } else {\n      setImageFile(null)\n      setImagePreview(null)\n    }\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!dbUser) {\n      toast.error(\"You must be logged in to create a story.\")\n      return\n    }\n\n    if (!imageFile) {\n      toast.error(\"Please select an image for your story.\")\n      return\n    }\n\n    createStory(\n      { userId: dbUser.id, imageFile },\n      {\n        onSuccess: () => {\n          setImageFile(null)\n          setImagePreview(null)\n          onOpenChange(false)\n        },\n      },\n    )\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"glass-card sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle className=\"text-orange-500\">Create New Story</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"grid gap-4 py-4\">\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"storyImage\" className=\"text-white\">\n              Story Image\n            </Label>\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                id=\"storyImage\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleImageChange}\n                className=\"flex-1 bg-gray-800 border-gray-700 text-white file:text-orange-500 file:bg-gray-700 file:border-none file:rounded-md file:px-3 file:py-1\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => document.getElementById(\"storyImage\")?.click()}\n                className=\"bg-gray-800 border-gray-700 text-white hover:bg-gray-700\"\n              >\n                <ImageIcon className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Upload Image</span>\n              </Button>\n            </div>\n            {imagePreview && (\n              <div className=\"mt-2 relative w-full h-64 rounded-md overflow-hidden\">\n                <img\n                  src={imagePreview || \"/placeholder.svg\"}\n                  alt=\"Story Preview\"\n                  className=\"object-cover w-full h-full\"\n                />\n              </div>\n            )}\n          </div>\n        </form>\n        <DialogFooter>\n          <Button\n            type=\"submit\"\n            onClick={handleSubmit}\n            className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n            disabled={isCreatingStory}\n          >\n            {isCreatingStory ? <LoadingSpinner className=\"text-white\" /> : \"Create Story\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/edit-profile-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateError' is assigned a value but never used.","line":35,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":65}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { useUser } from \"@/hooks/use-users\" // Keep useUser for fetching current profile\nimport useUpdateProfile from \"@/hooks/use-update-profile\" // Import the new useUpdateProfile hook\nimport { toast } from \"sonner\"\nimport { LoadingSpinner } from \"./loading-spinner\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\n\ninterface EditProfileDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}\n\nexport function EditProfileDialog({ open, onOpenChange }: EditProfileDialogProps) {\n  const { dbUser } = useAuth()\n  const { data: currentUserProfile, isLoading: isLoadingProfile } = useUser(dbUser?.id || \"\")\n\n  const [displayName, setDisplayName] = useState(\"\")\n  const [username, setUsername] = useState(\"\")\n  const [bio, setBio] = useState(\"\")\n  const [website, setWebsite] = useState(\"\")\n  const [location, setLocation] = useState(\"\")\n  const [profileImageFile, setProfileImageFile] = useState<File | null>(null)\n  const [previewPhotoURL, setPreviewPhotoURL] = useState<string | null>(null)\n\n  const { updateProfile, loading: isUpdating, error: updateError } = useUpdateProfile() // Use the new hook\n\n  useEffect(() => {\n    if (open && currentUserProfile) {\n      setDisplayName(currentUserProfile.displayName || \"\")\n      setUsername(currentUserProfile.username || \"\")\n      setBio(currentUserProfile.bio || \"\")\n      setWebsite(currentUserProfile.website || \"\")\n      setLocation(currentUserProfile.location || \"\")\n      setProfileImageFile(null)\n      setPreviewPhotoURL(currentUserProfile.photoURL || null)\n    }\n  }, [open, currentUserProfile])\n\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0]\n      setProfileImageFile(file)\n      setPreviewPhotoURL(URL.createObjectURL(file))\n    } else {\n      setProfileImageFile(null)\n      setPreviewPhotoURL(currentUserProfile?.photoURL || null)\n    }\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!dbUser) {\n      toast.error(\"You must be logged in to edit your profile.\")\n      return\n    }\n\n    updateProfile(\n      {\n        userId: dbUser.id,\n        data: {\n          displayName,\n          username,\n          bio,\n          website,\n          location,\n        },\n        profileImageFile: profileImageFile || undefined,\n      },\n      {\n        onSuccess: () => {\n          onOpenChange(false)\n          setProfileImageFile(null) // Clear file input after successful upload\n        },\n      },\n    )\n  }\n\n  if (isLoadingProfile) {\n    return (\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"glass-card sm:max-w-[425px]\">\n          <div className=\"flex justify-center items-center h-48\">\n            <LoadingSpinner />\n          </div>\n        </DialogContent>\n      </Dialog>\n    )\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"glass-card sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle className=\"text-orange-500\">Edit Profile</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"grid gap-4 py-4\">\n          <div className=\"flex flex-col items-center gap-4\">\n            <Avatar className=\"h-24 w-24 border-4 border-orange-500\">\n              <AvatarImage src={previewPhotoURL || \"/placeholder.svg\"} alt={username} />\n              <AvatarFallback className=\"text-3xl\">{username?.[0]?.toUpperCase() || \"U\"}</AvatarFallback>\n            </Avatar>\n            <Label htmlFor=\"profileImage\" className=\"text-white cursor-pointer hover:text-orange-400\">\n              Change Profile Photo\n            </Label>\n            <Input id=\"profileImage\" type=\"file\" accept=\"image/*\" onChange={handleImageChange} className=\"hidden\" />\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"displayName\" className=\"text-white\">\n              Display Name\n            </Label>\n            <Input\n              id=\"displayName\"\n              value={displayName}\n              onChange={(e) => setDisplayName(e.target.value)}\n              className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n            />\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"username\" className=\"text-white\">\n              Username\n            </Label>\n            <Input\n              id=\"username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n            />\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"bio\" className=\"text-white\">\n              Bio\n            </Label>\n            <Textarea\n              id=\"bio\"\n              value={bio}\n              onChange={(e) => setBio(e.target.value)}\n              rows={3}\n              className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n            />\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"website\" className=\"text-white\">\n              Website\n            </Label>\n            <Input\n              id=\"website\"\n              value={website}\n              onChange={(e) => setWebsite(e.target.value)}\n              className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n            />\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"location\" className=\"text-white\">\n              Location\n            </Label>\n            <Input\n              id=\"location\"\n              value={location}\n              onChange={(e) => setLocation(e.target.value)}\n              className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n            />\n          </div>\n        </form>\n        <DialogFooter>\n          <Button\n            type=\"submit\"\n            onClick={handleSubmit}\n            className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n            disabled={isUpdating || !dbUser}\n          >\n            {isUpdating ? <LoadingSpinner className=\"text-white\" /> : \"Save Changes\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/mobile-header.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":11,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { MountainIcon, Search, Bell, MessageSquare } from \"lucide-react\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { useRouter } from \"next/navigation\"\n\nexport function MobileHeader() {\n  const { dbUser } = useAuth()\n  const router = useRouter()\n\n  return (\n    <header className=\"sticky top-0 z-40 w-full bg-black/80 backdrop-blur-md border-b border-gray-800 px-4 py-3 flex items-center justify-between md:hidden\">\n      <Link href=\"/feed\" className=\"flex items-center space-x-2\">\n        <MountainIcon className=\"h-8 w-8 text-orange-500\" />\n        <span className=\"text-2xl font-bold text-white\">Peakfolk</span>\n      </Link>\n\n      <div className=\"flex items-center space-x-2\">\n        <Link href=\"/explore\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400 hover:text-orange-500\">\n            <Search className=\"h-6 w-6\" />\n            <span className=\"sr-only\">Search</span>\n          </Button>\n        </Link>\n        <Link href=\"/notifications\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400 hover:text-orange-500\">\n            <Bell className=\"h-6 w-6\" />\n            <span className=\"sr-only\">Notifications</span>\n          </Button>\n        </Link>\n        <Link href=\"/messages\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400 hover:text-orange-500\">\n            <MessageSquare className=\"h-6 w-6\" />\n            <span className=\"sr-only\">Messages</span>\n          </Button>\n        </Link>\n        {dbUser ? (\n          <Link href={`/profile/${dbUser.id}`}>\n            <Avatar className=\"h-9 w-9 border-2 border-orange-500\">\n              <AvatarImage src={dbUser.avatar || \"/placeholder.svg\"} alt={dbUser.username} />\n              <AvatarFallback>{dbUser.username?.[0]?.toUpperCase() || \"U\"}</AvatarFallback>\n            </Avatar>\n          </Link>\n        ) : (\n          <Link href=\"/login\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"border-orange-500 text-orange-500 hover:bg-orange-900 hover:text-white bg-transparent\"\n            >\n              Login\n            </Button>\n          </Link>\n        )}\n      </div>\n    </header>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/mobile-navigation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MessageSquare' is defined but never used.","line":2,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'idx' is defined but never used.","line":21,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isNotification' is assigned a value but never used.","line":45,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\nimport { Home, Compass, PlusSquare, Bell, MessageSquare, User } from \"lucide-react\"\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\nimport { cn } from \"@/lib/utils\"\n\nexport function MobileNavigation() {\n  const pathname = usePathname()\n\n  const navItems = [\n    { href: \"/feed\", icon: Home, label: \"Feed\" },\n    { href: \"/explore\", icon: Compass, label: \"Explore\" },\n    { href: \"/create\", icon: PlusSquare, label: \"Create\" },\n    { href: \"/notifications\", icon: Bell, label: \"Notifications\" },\n    { href: \"/profile\", icon: User, label: \"Profile\" }, // This will be dynamic later\n  ]\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 glass-nav z-50 md:hidden safe-bottom\">\n      <div className=\"max-w-md mx-auto flex w-full justify-between items-center px-2 py-2\">\n        {navItems.map((item, idx) => {\n          // Special styling for the center '+' button\n          if (item.href === \"/create\") {\n            return (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={cn(\n                  \"flex flex-col items-center justify-center flex-1\",\n                  \"z-10\"\n                )}\n              >\n                <div className={cn(\n                  \"flex items-center justify-center rounded-full bg-orange-500 text-white shadow-lg border-4 border-black\",\n                  pathname === item.href ? \"scale-110\" : \"scale-100\",\n                  \"transition-all duration-300 w-16 h-16 -mt-8 mb-1\"\n                )}>\n                  <item.icon className=\"h-8 w-8\" />\n                </div>\n                <span className=\"text-xs mt-1 font-bold text-orange-500\">{item.label}</span>\n              </Link>\n            )\n          }\n          // Notification and message badge placeholders\n          const isNotification = item.href === \"/notifications\"\n          const isProfile = item.href === \"/profile\"\n          return (\n            <Link\n              key={item.href}\n              href={item.href}\n              className={cn(\n                \"flex flex-col items-center justify-center flex-1 text-gray-400 transition-all duration-300 hover-lift p-2 rounded-xl\",\n                pathname === item.href || (isProfile && pathname.startsWith(\"/profile\"))\n                  ? \"text-orange-500 glow-orange-text bg-orange-500/10\"\n                  : \"hover:text-orange-400 hover:bg-orange-500/5\",\n              )}\n            >\n              <div className=\"relative\">\n                <item.icon className={cn(\n                  \"h-6 w-6 transition-all duration-300\",\n                  pathname === item.href || (isProfile && pathname.startsWith(\"/profile\"))\n                    ? \"animate-glow-pulse\"\n                    : \"\"\n                )} />\n                {/* Badge placeholders */}\n                {item.href === \"/notifications\" && (\n                  <span className=\"absolute -top-1 -right-2 bg-orange-500 text-white text-xs rounded-full px-1.5 py-0.5 font-bold border-2 border-black\">5</span>\n                )}\n                {item.href === \"/messages\" && (\n                  <span className=\"absolute -top-1 -right-2 bg-orange-500 text-white text-xs rounded-full px-1.5 py-0.5 font-bold border-2 border-black\">3</span>\n                )}\n              </div>\n              <span className=\"text-xs mt-1 font-medium\">{item.label}</span>\n            </Link>\n          )\n        })}\n      </div>\n    </nav>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/plan-card.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[929,932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[929,932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar, MapPin, Users, DollarSign, Bookmark, MessageCircle } from \"lucide-react\"\nimport Image from \"next/image\"\nimport Link from \"next/link\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { useJoinPlan, useLeavePlan, usePlan } from \"@/hooks/use-plans\" // Ensure usePlan is imported\nimport { toast } from \"sonner\"\nimport { LoadingSpinner } from \"./loading-spinner\"\nimport { toDate } from \"@/lib/firebase-services\"\n\ninterface PlanCardProps {\n  plan: {\n    id: string\n    userId: string\n    organizer?: {\n      id: string\n      username: string\n      avatar?: string\n      name?: string\n    }\n    title: string\n    description: string\n    imageUrl: string\n    location: string\n    dateTime: any // Firestore Timestamp\n    costPerHead: number\n    currency: string\n    participantIds: string[] // Array of user IDs\n    currentParticipants: number\n    maxParticipants?: number\n  }\n}\n\nexport function PlanCard({ plan }: PlanCardProps) {\n  const { dbUser } = useAuth()\n  // Fetch the latest plan data to ensure participant list is up-to-date\n  const { data: latestPlanData } = usePlan(plan.id)\n  const { mutate: joinPlan, isPending: isJoining } = useJoinPlan()\n  const { mutate: leavePlan, isPending: isLeaving } = useLeavePlan()\n\n  // Always fall back to an empty array so `.length` and `.includes` never error\n  const currentParticipants = latestPlanData?.participantIds ?? plan.participantIds ?? []\n  const isJoinedByCurrentUser = dbUser ? currentParticipants.includes(dbUser.id) : false\n  const isOrganizer = dbUser?.id === plan.userId\n  const isFull = latestPlanData?.maxParticipants && currentParticipants.length >= latestPlanData.maxParticipants\n\n  const handleJoinToggle = () => {\n    if (!dbUser) {\n      toast.error(\"You must be logged in to join or leave plans.\")\n      return\n    }\n    if (isOrganizer) {\n      toast.info(\"You are the organizer of this plan.\")\n      return\n    }\n\n    if (isJoinedByCurrentUser) {\n      leavePlan(\n        { planId: plan.id, userId: dbUser.id },\n        {\n          onError: (error) => toast.error(`Failed to leave plan: ${error.message}`),\n        },\n      )\n    } else {\n      if (isFull) {\n        toast.error(\"This plan is full.\")\n        return\n      }\n      joinPlan(\n        { planId: plan.id, userId: dbUser.id },\n        {\n          onError: (error) => toast.error(`Failed to join plan: ${error.message}`),\n        },\n      )\n    }\n  }\n\n  const planDateTime = toDate(plan.dateTime)\n\n  return (\n    <Card className=\"glass-card flex flex-col w-full max-w-full overflow-hidden\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-3 w-full max-w-full px-2 sm:px-4\">\n        <Link href={`/profile/${plan.organizer?.id}`} className=\"flex items-center space-x-3 group min-w-0\">\n          <Avatar className=\"h-10 w-10 border-2 border-orange-500 flex-shrink-0\">\n            <AvatarImage src={plan.organizer?.avatar || \"/placeholder.svg\"} alt={plan.organizer?.username || \"User\"} />\n            <AvatarFallback>{plan.organizer?.username?.[0]?.toUpperCase() || \"U\"}</AvatarFallback>\n          </Avatar>\n          <div className=\"flex flex-col min-w-0\">\n            <span className=\"font-semibold text-white group-hover:text-orange-400 transition-colors truncate text-base sm:text-lg\">\n              {plan.organizer?.name || plan.organizer?.username || \"Unknown User\"}\n            </span>\n            <span className=\"text-xs text-gray-400 truncate\">Organizer</span>\n          </div>\n        </Link>\n        <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400 hover:text-orange-500\">\n          <Bookmark className=\"h-5 w-5\" />\n        </Button>\n      </CardHeader>\n      <CardContent className=\"p-0 w-full max-w-full\">\n        <Link href={`/plan/${plan.id}`}>\n          {plan.imageUrl && (\n            <div className=\"relative w-full max-w-full aspect-[16/9] overflow-hidden\">\n              <Image\n                src={plan.imageUrl || \"/placeholder.svg\"}\n                alt={plan.title}\n                fill\n                className=\"object-cover rounded-md w-full max-w-full max-h-[40vw] sm:max-h-[300px]\"\n                sizes=\"100vw\"\n              />\n            </div>\n          )}\n          <div className=\"p-2 sm:p-4\">\n            <h3 className=\"text-base sm:text-xl font-bold text-white mb-2 hover:text-orange-400 transition-colors truncate\">{plan.title}</h3>\n            <p className=\"text-gray-300 text-xs sm:text-sm mb-4 line-clamp-2 break-words\">{plan.description}</p>\n            <div className=\"grid grid-cols-2 gap-2 text-gray-400 text-xs sm:text-sm\">\n              <div className=\"flex items-center\">\n                <MapPin className=\"h-4 w-4 mr-2 text-orange-500\" />\n                <span>{plan.location}</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Calendar className=\"h-4 w-4 mr-2 text-orange-500\" />\n                <span>{planDateTime ? planDateTime.toLocaleString() : \"N/A\"}</span>\n              </div>\n              <div className=\"flex items-center\">\n                <Users className=\"h-4 w-4 mr-2 text-orange-500\" />\n                <span>\n                  {currentParticipants.length}\n                  {plan.maxParticipants ? `/${plan.maxParticipants}` : \"\"} Participants\n                </span>\n              </div>\n              <div className=\"flex items-center\">\n                <DollarSign className=\"h-4 w-4 mr-2 text-orange-500\" />\n                <span>\n                  {plan.costPerHead} {plan.currency} / head\n                </span>\n              </div>\n            </div>\n          </div>\n        </Link>\n      </CardContent>\n      <CardFooter className=\"flex items-center justify-between pt-4 border-t border-gray-700 w-full max-w-full px-2 sm:px-4\">\n        <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-400 hover:text-orange-500\" disabled={!dbUser}>\n          <MessageCircle className=\"h-5 w-5\" />\n          <span className=\"ml-2\">Chat</span>\n        </Button>\n        {isOrganizer ? (\n          <Button disabled className=\"bg-gray-700 text-gray-400 cursor-not-allowed\">\n            Organizer\n          </Button>\n        ) : (\n          <Button\n            onClick={handleJoinToggle}\n            disabled={isJoining || isLeaving || (isFull && !isJoinedByCurrentUser) || !dbUser}\n            aria-busy={isJoining || isLeaving}\n            aria-live=\"polite\"\n            className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${\n              isJoinedByCurrentUser\n                ? \"bg-gray-700 text-white hover:bg-gray-600\"\n                : \"bg-orange-600 text-white hover:bg-orange-700\"\n            }`}\n          >\n            {isJoining || isLeaving ? (\n              <LoadingSpinner className=\"text-white\" size=\"sm\" />\n            ) : isJoinedByCurrentUser ? (\n              \"Leave Plan\"\n            ) : isFull ? (\n              \"Plan Full\"\n            ) : (\n              \"Join Plan\"\n            )}\n            <span className=\"sr-only\">\n              {isJoining ? \"Joining plan\" : isLeaving ? \"Leaving plan\" : isJoinedByCurrentUser ? \"You have joined this plan\" : \"Click to join plan\"}\n            </span>\n          </Button>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/plan-chat.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MoreVertical' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Check' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenu' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuContent' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuItem' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuTrigger' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'planTitle' is defined but never used.","line":39,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2294,2297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2294,2297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { \n  Send, \n  Mic, \n  Image as ImageIcon, \n  Megaphone, \n  MoreVertical,\n  Clock,\n  Check,\n  CheckCheck\n} from \"lucide-react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { usePlanChat } from \"@/hooks/use-plan-chat\"\nimport { LoadingSpinner } from \"./loading-spinner\"\nimport { toDate } from \"@/lib/firebase-services\"\nimport type { PlanMessage } from \"@/types\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\ninterface PlanChatProps {\n  planId: string\n  planTitle: string\n  isOrganizer: boolean\n}\n\nexport function PlanChat({ planId, planTitle, isOrganizer }: PlanChatProps) {\n  const { dbUser } = useAuth()\n  const [message, setMessage] = useState(\"\")\n  const [isAnnouncement, setIsAnnouncement] = useState(false)\n  const scrollRef = useRef<HTMLDivElement>(null)\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const {\n    messages,\n    sendMessage,\n    sendAnnouncement,\n    isSending,\n    isSendingAnnouncement,\n    isLoading,\n    isError,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n  } = usePlanChat(planId)\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight\n    }\n  }, [messages])\n\n  const handleSendMessage = () => {\n    if (!message.trim() || !dbUser) return\n\n    if (isAnnouncement && isOrganizer) {\n      sendAnnouncement(message.trim())\n    } else {\n      sendMessage({ content: message.trim(), type: \"text\" })\n    }\n    \n    setMessage(\"\")\n    setIsAnnouncement(false)\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault()\n      handleSendMessage()\n    }\n  }\n\n  const formatTime = (date: Date | any) => {\n    const messageDate = toDate(date)\n    if (!messageDate) return \"\"\n    \n    const now = new Date()\n    const diffInHours = (now.getTime() - messageDate.getTime()) / (1000 * 60 * 60)\n    \n    if (diffInHours < 24) {\n      return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n    } else {\n      return messageDate.toLocaleDateString()\n    }\n  }\n\n  const isOwnMessage = (message: PlanMessage) => message.senderId === dbUser?.id\n\n  if (isLoading) {\n    return (\n      <Card className=\"glass-card h-full\">\n        <CardHeader>\n          <CardTitle className=\"text-white\">Plan Chat</CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center h-64\">\n          <LoadingSpinner />\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (isError) {\n    return (\n      <Card className=\"glass-card h-full\">\n        <CardHeader>\n          <CardTitle className=\"text-white\">Plan Chat</CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center h-64\">\n          <p className=\"text-red-500\">Failed to load chat messages.</p>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"glass-card h-full flex flex-col\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-white\">Plan Chat</CardTitle>\n          {isOrganizer && (\n            <Button\n              variant={isAnnouncement ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setIsAnnouncement(!isAnnouncement)}\n              className={`${\n                isAnnouncement \n                  ? \"bg-orange-600 text-white hover:bg-orange-700\" \n                  : \"border-gray-600 text-white hover:bg-gray-800\"\n              }`}\n            >\n              <Megaphone className=\"h-4 w-4 mr-2\" />\n              Announcement\n            </Button>\n          )}\n        </div>\n        {isAnnouncement && (\n          <Badge variant=\"secondary\" className=\"bg-orange-600 text-white text-xs\">\n            Announcement mode - Only you can send messages\n          </Badge>\n        )}\n      </CardHeader>\n\n      <CardContent className=\"flex-1 flex flex-col p-0\">\n        {/* Messages Area */}\n        <ScrollArea className=\"flex-1 px-4\" ref={scrollRef}>\n          <div className=\"space-y-4 pb-4\">\n            {/* Load More Button */}\n            {hasNextPage && (\n              <div className=\"flex justify-center\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => fetchNextPage()}\n                  disabled={isFetchingNextPage}\n                  className=\"border-gray-600 text-white hover:bg-gray-800\"\n                >\n                  {isFetchingNextPage ? <LoadingSpinner size=\"sm\" /> : \"Load More Messages\"}\n                </Button>\n              </div>\n            )}\n\n            {/* Messages */}\n            {messages.length === 0 ? (\n              <div className=\"text-center text-gray-400 py-8\">\n                <p>No messages yet.</p>\n                <p className=\"text-sm\">Start the conversation!</p>\n              </div>\n            ) : (\n              messages.map((msg) => (\n                <div\n                  key={msg.id}\n                  className={`flex ${isOwnMessage(msg) ? \"justify-end\" : \"justify-start\"}`}\n                >\n                  <div className={`flex max-w-[80%] ${isOwnMessage(msg) ? \"flex-row-reverse\" : \"flex-row\"}`}>\n                    {!isOwnMessage(msg) && (\n                      <Avatar className=\"h-8 w-8 mr-2 mt-1\">\n                        <AvatarImage src={msg.sender.avatar} alt={msg.sender.username} />\n                        <AvatarFallback>{msg.sender.username?.[0]?.toUpperCase()}</AvatarFallback>\n                      </Avatar>\n                    )}\n                    \n                    <div className={`flex flex-col ${isOwnMessage(msg) ? \"items-end\" : \"items-start\"}`}>\n                      {!isOwnMessage(msg) && (\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <span className=\"text-sm font-medium text-white\">\n                            {msg.sender.name || msg.sender.username}\n                          </span>\n                          {msg.type === \"announcement\" && (\n                            <Badge variant=\"secondary\" className=\"bg-orange-600 text-white text-xs\">\n                              Announcement\n                            </Badge>\n                          )}\n                        </div>\n                      )}\n                      \n                      <div\n                        className={`rounded-lg px-3 py-2 max-w-full break-words ${\n                          msg.type === \"announcement\"\n                            ? \"bg-orange-600 text-white\"\n                            : isOwnMessage(msg)\n                            ? \"bg-orange-600 text-white\"\n                            : \"bg-gray-800 text-white\"\n                        }`}\n                      >\n                        <p className=\"text-sm\">{msg.content}</p>\n                      </div>\n                      \n                      <div className={`flex items-center space-x-1 mt-1 ${isOwnMessage(msg) ? \"justify-end\" : \"justify-start\"}`}>\n                        <span className=\"text-xs text-gray-400\">\n                          {formatTime(msg.createdAt)}\n                        </span>\n                        {isOwnMessage(msg) && (\n                          <CheckCheck className=\"h-3 w-3 text-gray-400\" />\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </ScrollArea>\n\n        <Separator className=\"bg-gray-700\" />\n\n        {/* Message Input */}\n        <div className=\"p-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Input\n              ref={inputRef}\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={\n                isAnnouncement \n                  ? \"Type your announcement...\" \n                  : \"Type a message...\"\n              }\n              className=\"flex-1 bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n              disabled={!dbUser || (isAnnouncement && !isOrganizer)}\n            />\n            \n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-gray-400 hover:text-orange-500\"\n              disabled={!dbUser}\n            >\n              <ImageIcon className=\"h-5 w-5\" />\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-gray-400 hover:text-orange-500\"\n              disabled={!dbUser}\n            >\n              <Mic className=\"h-5 w-5\" />\n            </Button>\n            \n            <Button\n              onClick={handleSendMessage}\n              disabled={!message.trim() || isSending || isSendingAnnouncement || !dbUser}\n              className=\"bg-orange-600 text-white hover:bg-orange-700\"\n            >\n              {isSending || isSendingAnnouncement ? (\n                <LoadingSpinner className=\"text-white\" size=\"sm\" />\n              ) : (\n                <Send className=\"h-5 w-5\" />\n              )}\n            </Button>\n          </div>\n          \n          {isAnnouncement && (\n            <p className=\"text-xs text-orange-400 mt-2\">\n              Announcement mode: Only you can send messages to all participants\n            </p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n} ","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/plan-management-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogTrigger' is defined but never used.","line":4,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LoadingSpinner' is defined but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toast' is defined but never used.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { \n  Edit, \n  Trash2, \n  X, \n  Calendar, \n  MapPin, \n  Users, \n  DollarSign,\n  AlertTriangle,\n  Save,\n  Loader2\n} from \"lucide-react\"\nimport { usePlanManagement } from \"@/hooks/use-plan-management\"\nimport { LoadingSpinner } from \"./loading-spinner\"\nimport { toast } from \"sonner\"\nimport { toDate } from \"@/lib/firebase-services\"\nimport type { Plan } from \"@/types\"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\n\ninterface PlanManagementDialogProps {\n  plan: Plan\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}\n\nexport function PlanManagementDialog({ plan, open, onOpenChange }: PlanManagementDialogProps) {\n  const [activeTab, setActiveTab] = useState<\"edit\" | \"cancel\" | \"delete\">(\"edit\")\n  const [editForm, setEditForm] = useState({\n    title: plan.title,\n    description: plan.description,\n    location: plan.location,\n    dateTime: toDate(plan.dateTime)?.toISOString().slice(0, 16) || \"\",\n    maxParticipants: plan.maxParticipants || \"\",\n    costPerHead: plan.costPerHead,\n    currency: plan.currency,\n    tags: plan.tags?.join(\", \") || \"\",\n    requirements: plan.requirements?.join(\", \") || \"\",\n    whatToBring: plan.whatToBring?.join(\", \") || \"\",\n  })\n  const [cancelReason, setCancelReason] = useState(\"\")\n\n  const { updatePlan, cancelPlan, deletePlan, isUpdating, isCancelling, isDeleting } = usePlanManagement()\n\n  const handleEditSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    const updates = {\n      title: editForm.title,\n      description: editForm.description,\n      location: editForm.location,\n      dateTime: new Date(editForm.dateTime),\n      maxParticipants: editForm.maxParticipants ? parseInt(editForm.maxParticipants.toString()) : undefined,\n      costPerHead: editForm.costPerHead,\n      currency: editForm.currency,\n      tags: editForm.tags ? editForm.tags.split(\",\").map(tag => tag.trim()).filter(Boolean) : [],\n      requirements: editForm.requirements ? editForm.requirements.split(\",\").map(req => req.trim()).filter(Boolean) : [],\n      whatToBring: editForm.whatToBring ? editForm.whatToBring.split(\",\").map(item => item.trim()).filter(Boolean) : [],\n    }\n\n    updatePlan({ planId: plan.id, updates })\n  }\n\n  const handleCancelPlan = () => {\n    cancelPlan({ planId: plan.id, reason: cancelReason })\n    onOpenChange(false)\n  }\n\n  const handleDeletePlan = () => {\n    deletePlan(plan.id)\n    onOpenChange(false)\n  }\n\n  const handleInputChange = (field: string, value: string | number) => {\n    setEditForm(prev => ({ ...prev, [field]: value }))\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto bg-gray-900 border-gray-700\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">Manage Plan</DialogTitle>\n        </DialogHeader>\n\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-1 mb-6\">\n          <Button\n            variant={activeTab === \"edit\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setActiveTab(\"edit\")}\n            className={activeTab === \"edit\" ? \"bg-orange-600 text-white\" : \"border-gray-600 text-white hover:bg-gray-800\"}\n          >\n            <Edit className=\"h-4 w-4 mr-2\" />\n            Edit Plan\n          </Button>\n          <Button\n            variant={activeTab === \"cancel\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setActiveTab(\"cancel\")}\n            className={activeTab === \"cancel\" ? \"bg-orange-600 text-white\" : \"border-gray-600 text-white hover:bg-gray-800\"}\n          >\n            <X className=\"h-4 w-4 mr-2\" />\n            Cancel Plan\n          </Button>\n          <Button\n            variant={activeTab === \"delete\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setActiveTab(\"delete\")}\n            className={activeTab === \"delete\" ? \"bg-red-600 text-white\" : \"border-gray-600 text-white hover:bg-gray-800\"}\n          >\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            Delete Plan\n          </Button>\n        </div>\n\n        {/* Edit Plan Tab */}\n        {activeTab === \"edit\" && (\n          <form onSubmit={handleEditSubmit} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\" className=\"text-white\">Plan Title</Label>\n                <Input\n                  id=\"title\"\n                  value={editForm.title}\n                  onChange={(e) => handleInputChange(\"title\", e.target.value)}\n                  className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\" className=\"text-white\">Location</Label>\n                <Input\n                  id=\"location\"\n                  value={editForm.location}\n                  onChange={(e) => handleInputChange(\"location\", e.target.value)}\n                  className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\" className=\"text-white\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={editForm.description}\n                onChange={(e) => handleInputChange(\"description\", e.target.value)}\n                rows={4}\n                className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                required\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dateTime\" className=\"text-white\">Date & Time</Label>\n                <Input\n                  id=\"dateTime\"\n                  type=\"datetime-local\"\n                  value={editForm.dateTime}\n                  onChange={(e) => handleInputChange(\"dateTime\", e.target.value)}\n                  className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"maxParticipants\" className=\"text-white\">Max Participants</Label>\n                <Input\n                  id=\"maxParticipants\"\n                  type=\"number\"\n                  value={editForm.maxParticipants}\n                  onChange={(e) => handleInputChange(\"maxParticipants\", e.target.value)}\n                  className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                  min=\"1\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"costPerHead\" className=\"text-white\">Cost per Person</Label>\n                <Input\n                  id=\"costPerHead\"\n                  type=\"number\"\n                  value={editForm.costPerHead}\n                  onChange={(e) => handleInputChange(\"costPerHead\", parseFloat(e.target.value))}\n                  className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"currency\" className=\"text-white\">Currency</Label>\n                <Input\n                  id=\"currency\"\n                  value={editForm.currency}\n                  onChange={(e) => handleInputChange(\"currency\", e.target.value)}\n                  className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                  required\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"tags\" className=\"text-white\">Tags (comma-separated)</Label>\n                <Input\n                  id=\"tags\"\n                  value={editForm.tags}\n                  onChange={(e) => handleInputChange(\"tags\", e.target.value)}\n                  className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                  placeholder=\"Adventure, Outdoor, Social\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"requirements\" className=\"text-white\">Requirements (comma-separated)</Label>\n              <Input\n                id=\"requirements\"\n                value={editForm.requirements}\n                onChange={(e) => handleInputChange(\"requirements\", e.target.value)}\n                className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                placeholder=\"Age 18+, Physical fitness\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"whatToBring\" className=\"text-white\">What to Bring (comma-separated)</Label>\n              <Input\n                id=\"whatToBring\"\n                value={editForm.whatToBring}\n                onChange={(e) => handleInputChange(\"whatToBring\", e.target.value)}\n                className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n                placeholder=\"Water bottle, Comfortable shoes\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"border-gray-600 text-white hover:bg-gray-800\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isUpdating}\n                className=\"bg-orange-600 text-white hover:bg-orange-700\"\n              >\n                {isUpdating ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Updating...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Update Plan\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        )}\n\n        {/* Cancel Plan Tab */}\n        {activeTab === \"cancel\" && (\n          <div className=\"space-y-6\">\n            <div className=\"bg-orange-600/20 border border-orange-600 rounded-lg p-4\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <AlertTriangle className=\"h-5 w-5 text-orange-500\" />\n                <h3 className=\"text-orange-500 font-semibold\">Cancel Plan</h3>\n              </div>\n              <p className=\"text-gray-300 text-sm\">\n                Cancelling this plan will notify all participants and mark the plan as cancelled. \n                This action cannot be undone.\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"cancelReason\" className=\"text-white\">Reason for Cancellation (Optional)</Label>\n              <Textarea\n                id=\"cancelReason\"\n                value={cancelReason}\n                onChange={(e) => setCancelReason(e.target.value)}\n                placeholder=\"Please provide a reason for cancelling the plan...\"\n                rows={3}\n                className=\"bg-gray-800 border-gray-700 text-white placeholder:text-gray-500 focus-visible:ring-orange-500\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"border-gray-600 text-white hover:bg-gray-800\"\n              >\n                Cancel\n              </Button>\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    disabled={isCancelling}\n                    className=\"bg-orange-600 text-white hover:bg-orange-700\"\n                  >\n                    {isCancelling ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Cancelling...\n                      </>\n                    ) : (\n                      <>\n                        <X className=\"h-4 w-4 mr-2\" />\n                        Cancel Plan\n                      </>\n                    )}\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent className=\"bg-gray-900 border-gray-700\">\n                  <AlertDialogHeader>\n                    <AlertDialogTitle className=\"text-white\">Cancel Plan</AlertDialogTitle>\n                    <AlertDialogDescription className=\"text-gray-300\">\n                      Are you sure you want to cancel this plan? All participants will be notified.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel className=\"border-gray-600 text-white hover:bg-gray-800\">\n                      No, keep plan\n                    </AlertDialogCancel>\n                    <AlertDialogAction\n                      onClick={handleCancelPlan}\n                      className=\"bg-orange-600 text-white hover:bg-orange-700\"\n                    >\n                      Yes, cancel plan\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </div>\n          </div>\n        )}\n\n        {/* Delete Plan Tab */}\n        {activeTab === \"delete\" && (\n          <div className=\"space-y-6\">\n            <div className=\"bg-red-600/20 border border-red-600 rounded-lg p-4\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <AlertTriangle className=\"h-5 w-5 text-red-500\" />\n                <h3 className=\"text-red-500 font-semibold\">Delete Plan</h3>\n              </div>\n              <p className=\"text-gray-300 text-sm\">\n                This action will permanently delete the plan and all associated messages. \n                This cannot be undone.\n              </p>\n            </div>\n\n            <div className=\"bg-gray-800 rounded-lg p-4\">\n              <h4 className=\"text-white font-semibold mb-2\">Plan Details</h4>\n              <div className=\"space-y-2 text-sm text-gray-300\">\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-4 w-4 text-orange-500\" />\n                  <span>{toDate(plan.dateTime)?.toLocaleString()}</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <MapPin className=\"h-4 w-4 text-orange-500\" />\n                  <span>{plan.location}</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"h-4 w-4 text-orange-500\" />\n                  <span>{plan.currentParticipants} participants</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <DollarSign className=\"h-4 w-4 text-orange-500\" />\n                  <span>{plan.costPerHead} {plan.currency} per person</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"border-gray-600 text-white hover:bg-gray-800\"\n              >\n                Cancel\n              </Button>\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    disabled={isDeleting}\n                    className=\"bg-red-600 text-white hover:bg-red-700\"\n                  >\n                    {isDeleting ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Deleting...\n                      </>\n                    ) : (\n                      <>\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Delete Plan\n                      </>\n                    )}\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent className=\"bg-gray-900 border-gray-700\">\n                  <AlertDialogHeader>\n                    <AlertDialogTitle className=\"text-white\">Delete Plan</AlertDialogTitle>\n                    <AlertDialogDescription className=\"text-gray-300\">\n                      Are you absolutely sure? This action cannot be undone. This will permanently delete the plan and all associated data.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel className=\"border-gray-600 text-white hover:bg-gray-800\">\n                      Cancel\n                    </AlertDialogCancel>\n                    <AlertDialogAction\n                      onClick={handleDeletePlan}\n                      className=\"bg-red-600 text-white hover:bg-red-700\"\n                    >\n                      Delete Plan\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  )\n} ","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/post-card.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1389,1392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1389,1392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Button } from \"@/components/ui/button\"\nimport { MessageCircle, Heart, Share2, Trash2 } from \"lucide-react\"\nimport Image from \"next/image\"\nimport Link from \"next/link\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport useLikePost from \"@/hooks/use-like-post\" // Corrected import\nimport { useAddComment, useComments } from \"@/hooks/use-comments\" // Corrected imports\nimport { useDeletePost } from \"@/hooks/use-posts\" // Corrected import\nimport { toast } from \"sonner\"\nimport { SharePostDialog } from \"./share-post-dialog\"\nimport { Textarea } from \"./ui/textarea\"\nimport { toDate } from \"@/lib/firebase-services\"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\nimport { LoadingSpinner } from \"./loading-spinner\"\n\ninterface PostCardProps {\n  post: {\n    id: string\n    userId: string\n    author?: {\n      id: string\n      username: string\n      avatar?: string\n      name?: string\n    }\n    caption: string\n    imageUrl: string\n    likes: string[] // Array of user IDs\n    createdAt: any // Firestore Timestamp\n  }\n}\n\nexport function PostCard({ post }: PostCardProps) {\n  const { dbUser } = useAuth()\n  const [showComments, setShowComments] = useState(false)\n  const [newCommentText, setNewCommentText] = useState(\"\")\n  const [isShareDialogOpen, setIsShareDialogOpen] = useState(false)\n\n  const { comments, isLoading: isLoadingComments } = useComments(post.id)\n  const { mutate: toggleLike, isPending: isTogglingLike } = useLikePost()\n  const { mutate: addComment, isPending: isCommenting } = useAddComment()\n  const { mutate: deletePost, isPending: isDeletingPost } = useDeletePost()\n\n  const likedByCurrentUser = dbUser ? post.likes.includes(dbUser.id) : false\n  const isAuthor = dbUser?.id === post.userId\n\n  const handleLike = () => {\n    if (!dbUser) {\n      toast.error(\"You must be logged in to like posts.\")\n      return\n    }\n    toggleLike(\n      { postId: post.id, userId: dbUser.id },\n      {\n        onError: (error) => toast.error(`Failed to toggle like: ${error.message}`),\n      },\n    )\n  }\n\n  const handleAddComment = () => {\n    if (!dbUser) {\n      toast.error(\"You must be logged in to comment.\")\n      return\n    }\n    if (!newCommentText.trim()) {\n      toast.error(\"Comment cannot be empty.\")\n      return\n    }\n    addComment(\n      { postId: post.id, userId: dbUser.id, content: newCommentText },\n      {\n        onSuccess: () => {\n          setNewCommentText(\"\")\n        },\n        onError: (error) => toast.error(`Failed to add comment: ${error.message}`),\n      },\n    )\n  }\n\n  const handleDeletePost = () => {\n    if (!dbUser || dbUser.id !== post.userId) {\n      toast.error(\"You are not authorized to delete this post.\")\n      return\n    }\n    deletePost(\n      { postId: post.id, imageUrl: post.imageUrl },\n      {\n        onSuccess: () => {\n          toast.success(\"Post deleted successfully!\")\n        },\n        onError: (error) => {\n          toast.error(`Failed to delete post: ${error.message}`)\n        },\n      },\n    )\n  }\n\n  const postDate = toDate(post.createdAt)\n\n  return (\n    <Card className=\"modern-card flex flex-col w-full max-w-2xl mx-auto overflow-hidden animate-fade-in\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-3 w-full px-4\">\n        <Link href={`/profile/${post.author?.id}`} className=\"flex items-center space-x-3 group min-w-0 hover-lift\">\n          <Avatar className=\"h-10 w-10 avatar-glow flex-shrink-0\">\n            <AvatarImage src={post.author?.avatar || \"/placeholder.svg\"} alt={post.author?.username || \"User\"} />\n            <AvatarFallback className=\"bg-orange-500 text-black font-semibold\">{post.author?.username?.[0]?.toUpperCase() || \"U\"}</AvatarFallback>\n          </Avatar>\n          <div className=\"flex flex-col min-w-0\">\n            <span className=\"font-semibold text-white group-hover:text-orange-400 transition-colors truncate text-base sm:text-lg glow-orange-text\">\n              {post.author?.name || post.author?.username || \"Unknown User\"}\n            </span>\n            <span className=\"text-xs text-gray-400 truncate\">{postDate ? postDate.toLocaleString() : \"N/A\"}</span>\n          </div>\n        </Link>\n        {isAuthor && (\n          <AlertDialog>\n            <AlertDialogTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-400 hover:text-red-500 hover-lift focus-glow\">\n                <Trash2 className=\"h-5 w-5\" />\n              </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent className=\"glass-card\">\n              <AlertDialogHeader>\n                <AlertDialogTitle className=\"gradient-text\">Are you absolutely sure?</AlertDialogTitle>\n                <AlertDialogDescription className=\"text-gray-300\">\n                  This action cannot be undone. This will permanently delete your post and remove its data from our\n                  servers.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel className=\"text-white border-gray-700 hover:bg-gray-700/50 hover-lift\">Cancel</AlertDialogCancel>\n                <AlertDialogAction onClick={handleDeletePost} className=\"bg-red-600 hover:bg-red-700 text-white hover-lift\">\n                  {isDeletingPost ? <LoadingSpinner className=\"text-white\" /> : \"Delete\"}\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        )}\n      </CardHeader>\n      <CardContent className=\"p-0 w-full\">\n        <div className=\"relative w-full aspect-square sm:aspect-[4/3] overflow-hidden\">\n          <Image\n            src={post.imageUrl || \"/placeholder.svg\"}\n            alt={post.caption || `Post by ${post.author?.name || post.author?.username || \"Unknown User\"}`}\n            fill\n            className=\"object-cover rounded-md w-full max-h-[60vw] sm:max-h-[400px]\"\n            sizes=\"100vw\"\n          />\n        </div>\n        <p className=\"text-white text-sm mt-4 px-4 break-words w-full\">{post.caption}</p>\n      </CardContent>\n      <CardFooter className=\"flex flex-col items-start pt-4 w-full px-4\">\n        <div className=\"flex items-center space-x-4 w-full pb-3 border-b border-gray-700/50\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleLike}\n            disabled={isTogglingLike || !dbUser}\n            className=\"text-gray-400 hover:text-red-500 hover-lift focus-glow\"\n          >\n            <Heart className={likedByCurrentUser ? \"fill-red-500 text-red-500 glow-orange-text\" : \"text-gray-400\"} />\n            <span className=\"ml-1 text-white\">{post.likes.length}</span>\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowComments(!showComments)}\n            className=\"text-gray-400 hover:text-orange-500 hover-lift focus-glow\"\n          >\n            <MessageCircle />\n            <span className=\"ml-1 text-white\">{comments?.length || 0}</span>\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsShareDialogOpen(true)}\n            className=\"text-gray-400 hover:text-orange-500 hover-lift focus-glow\"\n          >\n            <Share2 />\n          </Button>\n        </div>\n\n        {showComments && (\n          <div className=\"w-full mt-4 space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Avatar className=\"h-8 w-8 avatar-glow\">\n                <AvatarImage src={dbUser?.avatar || \"/placeholder.svg\"} alt={dbUser?.username || \"User\"} />\n                <AvatarFallback className=\"bg-orange-500 text-black font-semibold text-xs\">{dbUser?.username?.[0]?.toUpperCase() || \"U\"}</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1\">\n                <Textarea\n                  placeholder=\"Add a comment...\"\n                  value={newCommentText}\n                  onChange={(e) => setNewCommentText(e.target.value)}\n                  className=\"glass-input resize-none border-0 focus:ring-2 focus:ring-orange-500/50\"\n                  rows={2}\n                />\n              </div>\n              <Button\n                onClick={handleAddComment}\n                disabled={isCommenting || !newCommentText.trim()}\n                className=\"btn-peakfolk-primary ml-2\"\n              >\n                {isCommenting ? <LoadingSpinner className=\"text-black\" /> : \"Post\"}\n              </Button>\n            </div>\n\n            <div className=\"space-y-3 max-h-60 overflow-y-auto\">\n              {isLoadingComments ? (\n                <div className=\"flex justify-center py-4\">\n                  <LoadingSpinner />\n                </div>\n              ) : comments && comments.length > 0 ? (\n                comments.map((comment) => (\n                  <div key={comment.id} className=\"flex items-start space-x-2 animate-slide-up\">\n                    <Avatar className=\"h-6 w-6 avatar-glow\">\n                      <AvatarImage src={comment.author?.avatar || \"/placeholder.svg\"} alt={comment.author?.username || \"User\"} />\n                      <AvatarFallback className=\"bg-orange-500 text-black font-semibold text-xs\">{comment.author?.username?.[0]?.toUpperCase() || \"U\"}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"bg-gray-800/50 rounded-lg p-3 glass-input\">\n                        <p className=\"text-sm font-medium text-white glow-orange-text\">\n                          {comment.author?.name || comment.author?.username || \"Unknown User\"}\n                        </p>\n                        <p className=\"text-sm text-gray-300 mt-1\">{comment.content}</p>\n                      </div>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {toDate(comment.createdAt)?.toLocaleString() || \"N/A\"}\n                      </p>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-center text-gray-500 text-sm py-4\">No comments yet. Be the first to comment!</p>\n              )}\n            </div>\n          </div>\n        )}\n      </CardFooter>\n      <SharePostDialog open={isShareDialogOpen} onOpenChange={setIsShareDialogOpen} postId={post.id} />\n    </Card>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/profile-settings-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":125,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6237,6240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6237,6240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\nimport { useState, useEffect } from \"react\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Label } from \"@/components/ui/label\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { LoadingSpinner } from \"./loading-spinner\"\nimport {\n  Bell,\n  Lock,\n  Eye,\n  Moon,\n  Shield,\n  UserCheck,\n  MessageCircle,\n  Heart,\n  Calendar,\n  LogOut,\n  ImageIcon,\n  Video,\n  Globe,\n} from \"lucide-react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { useUser, useUpdateUserProfile } from \"@/hooks/use-users\" // Use useUser and useUpdateUserProfile\nimport { toast } from \"sonner\"\nimport { useRouter } from \"next/navigation\"\n\ninterface ProfileSettingsDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}\n\nexport function ProfileSettingsDialog({ open, onOpenChange }: ProfileSettingsDialogProps) {\n  const { dbUser, refreshDbUser, logout } = useAuth()\n  const router = useRouter()\n  const { data: currentUserProfile, isLoading: isLoadingProfile } = useUser(dbUser?.id || \"\")\n  const { mutate: updateUserProfile, isPending: isUpdating } = useUpdateUserProfile()\n\n  const [settings, setSettings] = useState({\n    // Privacy Settings\n    isPrivate: dbUser?.isPrivate || false,\n    showOnlineStatus: dbUser?.showOnlineStatus || true,\n    allowTagging: dbUser?.allowTagging || true,\n    allowStoryResharing: dbUser?.allowStoryResharing || true,\n    showEmail: dbUser?.showEmail || false,\n    showLocation: dbUser?.showLocation || true,\n    allowMessages: dbUser?.allowMessages || true,\n\n    // Notification Settings\n    pushNotifications: dbUser?.pushNotifications || true,\n    emailNotifications: dbUser?.emailNotifications || false,\n    likeNotifications: dbUser?.likeNotifications || true,\n    commentNotifications: dbUser?.commentNotifications || true,\n    followNotifications: dbUser?.followNotifications || true,\n    planNotifications: dbUser?.planNotifications || true,\n    messageNotifications: dbUser?.messageNotifications || true,\n    storyNotifications: dbUser?.storyNotifications || true,\n\n    // Display Settings\n    darkMode: dbUser?.darkMode || true,\n    showStories: dbUser?.showStories || true,\n    autoplayVideos: dbUser?.autoplayVideos || true,\n    highQualityUploads: dbUser?.highQualityUploads || false,\n\n    // Story Settings\n    allowStoryViews: dbUser?.allowStoryViews || true,\n    hideStoryFromSpecific: dbUser?.hideStoryFromSpecific || false,\n    saveStoriesToGallery: dbUser?.saveStoriesToGallery || false,\n  })\n\n  // Load user settings when dialog opens\n  useEffect(() => {\n    if (open && currentUserProfile) {\n      setSettings((prev) => ({\n        ...prev,\n        isPrivate: currentUserProfile.isPrivate || false,\n        showOnlineStatus: currentUserProfile.showOnlineStatus || true,\n        allowTagging: currentUserProfile.allowTagging || true,\n        allowStoryResharing: currentUserProfile.allowStoryResharing || true,\n        showEmail: currentUserProfile.showEmail || false,\n        showLocation: currentUserProfile.showLocation || true,\n        allowMessages: currentUserProfile.allowMessages || true,\n        pushNotifications: currentUserProfile.pushNotifications || true,\n        emailNotifications: currentUserProfile.emailNotifications || false,\n        likeNotifications: currentUserProfile.likeNotifications || true,\n        commentNotifications: currentUserProfile.commentNotifications || true,\n        followNotifications: currentUserProfile.followNotifications || true,\n        planNotifications: currentUserProfile.planNotifications || true,\n        messageNotifications: currentUserProfile.messageNotifications || true,\n        storyNotifications: currentUserProfile.storyNotifications || true,\n        darkMode: currentUserProfile.darkMode || true,\n        showStories: currentUserProfile.showStories || true,\n        autoplayVideos: currentUserProfile.autoplayVideos || true,\n        highQualityUploads: currentUserProfile.highQualityUploads || false,\n        allowStoryViews: currentUserProfile.allowStoryViews || true,\n        hideStoryFromSpecific: currentUserProfile.hideStoryFromSpecific || false,\n        saveStoriesToGallery: currentUserProfile.saveStoriesToGallery || false,\n      }))\n    }\n  }, [open, currentUserProfile])\n\n  // Helper to convert allowMessages boolean to string\n  function getAllowMessagesValue(val: boolean | string): \"everyone\" | \"followers\" | \"none\" {\n    if (val === true) return \"everyone\"\n    if (val === false) return \"none\"\n    if (val === \"everyone\" || val === \"followers\" || val === \"none\") return val\n    return \"everyone\"\n  }\n\n  const handleSettingChange = async (key: keyof typeof settings, value: boolean) => {\n    const newSettings = { ...settings, [key]: value }\n    setSettings(newSettings)\n    try {\n      const userId = dbUser?.id || \"\"\n      if (key === \"isPrivate\") {\n        await updateUserProfile({ userId, data: { isPrivate: value } })\n      } else if (key === \"allowMessages\") {\n        await updateUserProfile({ userId, data: { allowMessages: getAllowMessagesValue(value) } })\n      } else {\n        await updateUserProfile({ userId, data: { [key]: value } })\n      }\n      toast.success(\"Setting updated\")\n    } catch (error) {\n      toast.error(\"Failed to update setting\")\n      setSettings((prev) => ({ ...prev, [key]: !value }))\n    }\n  }\n\n  const handleSaveChanges = async () => {\n    if (!dbUser) {\n      toast.error(\"User not authenticated.\")\n      return\n    }\n    const userId = dbUser.id\n    const flatSettings = { ...settings, allowMessages: getAllowMessagesValue(settings.allowMessages) }\n    updateUserProfile(\n      { userId, data: flatSettings },\n      {\n        onSuccess: () => {\n          refreshDbUser()\n          onOpenChange(false)\n        },\n        onError: (error) => {\n          toast.error(`Failed to update settings: ${error.message}`)\n        },\n      },\n    )\n  }\n\n  const handleLogout = async () => {\n    try {\n      await logout()\n      toast.success(\"Logged out successfully!\")\n      router.push(\"/login\")\n    } catch (error: any) {\n      toast.error(`Logout failed: ${error.message}`)\n    }\n  }\n\n  if (isLoadingProfile) {\n    return (\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"glass-card sm:max-w-[425px]\">\n          <div className=\"flex justify-center items-center h-24\">\n            <LoadingSpinner />\n          </div>\n        </DialogContent>\n      </Dialog>\n    )\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"glass-card sm:max-w-[425px] p-6\">\n        <DialogHeader>\n          <DialogTitle className=\"text-orange-500\">Profile Settings</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          {/* Privacy Settings */}\n          <Card className=\"bg-gray-800/50 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 text-lg\">\n                <Lock className=\"w-5 h-5 text-orange-500\" />\n                <span>Privacy</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"private-account\" className=\"text-white flex items-center space-x-2\">\n                    <Shield className=\"w-4 h-4\" />\n                    <span>Private Account</span>\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Only approved followers can see your posts and plans</p>\n                </div>\n                <Switch\n                  id=\"private-account\"\n                  checked={settings.isPrivate}\n                  onCheckedChange={(checked) => handleSettingChange(\"isPrivate\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"show-online-status\" className=\"text-white flex items-center space-x-2\">\n                    <Globe className=\"w-4 h-4\" />\n                    <span>Show Online Status</span>\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Let others see when you&apos;re active</p>\n                </div>\n                <Switch\n                  id=\"show-online-status\"\n                  checked={settings.showOnlineStatus}\n                  onCheckedChange={(checked) => handleSettingChange(\"showOnlineStatus\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"allow-tagging\" className=\"text-white\">\n                    Allow Tagging\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Let others tag you in posts and plans</p>\n                </div>\n                <Switch\n                  id=\"allow-tagging\"\n                  checked={settings.allowTagging}\n                  onCheckedChange={(checked) => handleSettingChange(\"allowTagging\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"show-email\" className=\"text-white\">\n                    Show Email\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Display your email on your profile</p>\n                </div>\n                <Switch\n                  id=\"show-email\"\n                  checked={settings.showEmail}\n                  onCheckedChange={(checked) => handleSettingChange(\"showEmail\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"show-location\" className=\"text-white\">\n                    Show Location\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Display your location on your profile</p>\n                </div>\n                <Switch\n                  id=\"show-location\"\n                  checked={settings.showLocation}\n                  onCheckedChange={(checked) => handleSettingChange(\"showLocation\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"allow-messages\" className=\"text-white flex items-center space-x-2\">\n                    <MessageCircle className=\"w-4 h-4\" />\n                    <span>Allow Messages</span>\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Let others send you direct messages</p>\n                </div>\n                <Switch\n                  id=\"allow-messages\"\n                  checked={getAllowMessagesValue(settings.allowMessages) === \"everyone\"}\n                  onCheckedChange={(checked) => handleSettingChange(\"allowMessages\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Story Settings */}\n          <Card className=\"bg-gray-800/50 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 text-lg\">\n                <ImageIcon className=\"w-5 h-5 text-orange-500\" />\n                <span>Stories</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"allow-story-views\" className=\"text-white\">\n                    Allow Story Views\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Let others see who viewed your stories</p>\n                </div>\n                <Switch\n                  id=\"allow-story-views\"\n                  checked={settings.allowStoryViews}\n                  onCheckedChange={(checked) => handleSettingChange(\"allowStoryViews\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"allow-story-resharing\" className=\"text-white\">\n                    Allow Story Resharing\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Let others share your stories</p>\n                </div>\n                <Switch\n                  id=\"allow-story-resharing\"\n                  checked={settings.allowStoryResharing}\n                  onCheckedChange={(checked) => handleSettingChange(\"allowStoryResharing\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"hide-story-from-specific\" className=\"text-white\">\n                    Hide Story From Specific People\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Choose who can&apos;t see your stories</p>\n                </div>\n                <Switch\n                  id=\"hide-story-from-specific\"\n                  checked={settings.hideStoryFromSpecific}\n                  onCheckedChange={(checked) => handleSettingChange(\"hideStoryFromSpecific\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"save-stories-to-gallery\" className=\"text-white\">\n                    Save Stories to Gallery\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Automatically save your stories</p>\n                </div>\n                <Switch\n                  id=\"save-stories-to-gallery\"\n                  checked={settings.saveStoriesToGallery}\n                  onCheckedChange={(checked) => handleSettingChange(\"saveStoriesToGallery\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Notification Settings */}\n          <Card className=\"bg-gray-800/50 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 text-lg\">\n                <Bell className=\"w-5 h-5 text-orange-500\" />\n                <span>Notifications</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"push-notifications\" className=\"text-white\">\n                    Push Notifications\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Receive notifications on your device</p>\n                </div>\n                <Switch\n                  id=\"push-notifications\"\n                  checked={settings.pushNotifications}\n                  onCheckedChange={(checked) => handleSettingChange(\"pushNotifications\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"email-notifications\" className=\"text-white\">\n                    Email Notifications\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Receive notifications via email</p>\n                </div>\n                <Switch\n                  id=\"email-notifications\"\n                  checked={settings.emailNotifications}\n                  onCheckedChange={(checked) => handleSettingChange(\"emailNotifications\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"like-notifications\" className=\"text-white flex items-center space-x-2\">\n                    <Heart className=\"w-4 h-4\" />\n                    <span>Likes</span>\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">When someone likes your posts</p>\n                </div>\n                <Switch\n                  id=\"like-notifications\"\n                  checked={settings.likeNotifications}\n                  onCheckedChange={(checked) => handleSettingChange(\"likeNotifications\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"comment-notifications\" className=\"text-white flex items-center space-x-2\">\n                    <MessageCircle className=\"w-4 h-4\" />\n                    <span>Comments</span>\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">When someone comments on your posts</p>\n                </div>\n                <Switch\n                  id=\"comment-notifications\"\n                  checked={settings.commentNotifications}\n                  onCheckedChange={(checked) => handleSettingChange(\"commentNotifications\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"follow-notifications\" className=\"text-white flex items-center space-x-2\">\n                    <UserCheck className=\"w-4 h-4\" />\n                    <span>Follows</span>\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">When someone follows you</p>\n                </div>\n                <Switch\n                  id=\"follow-notifications\"\n                  checked={settings.followNotifications}\n                  onCheckedChange={(checked) => handleSettingChange(\"followNotifications\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"plan-notifications\" className=\"text-white flex items-center space-x-2\">\n                    <Calendar className=\"w-4 h-4\" />\n                    <span>Plans</span>\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Plan updates and reminders</p>\n                </div>\n                <Switch\n                  id=\"plan-notifications\"\n                  checked={settings.planNotifications}\n                  onCheckedChange={(checked) => handleSettingChange(\"planNotifications\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"story-notifications\" className=\"text-white flex items-center space-x-2\">\n                    <ImageIcon className=\"w-4 h-4\" />\n                    <span>Stories</span>\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">When someone views your stories</p>\n                </div>\n                <Switch\n                  id=\"story-notifications\"\n                  checked={settings.storyNotifications}\n                  onCheckedChange={(checked) => handleSettingChange(\"storyNotifications\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Display Settings */}\n          <Card className=\"bg-gray-800/50 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 text-lg\">\n                <Eye className=\"w-5 h-5 text-orange-500\" />\n                <span>Display</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"dark-mode\" className=\"text-white flex items-center space-x-2\">\n                    <Moon className=\"w-4 h-4\" />\n                    <span>Dark Mode</span>\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Use dark theme</p>\n                </div>\n                <Switch\n                  id=\"dark-mode\"\n                  checked={settings.darkMode}\n                  onCheckedChange={(checked) => handleSettingChange(\"darkMode\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"show-stories\" className=\"text-white\">\n                    Show Stories\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Display stories in your feed</p>\n                </div>\n                <Switch\n                  id=\"show-stories\"\n                  checked={settings.showStories}\n                  onCheckedChange={(checked) => handleSettingChange(\"showStories\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"autoplay-videos\" className=\"text-white flex items-center space-x-2\">\n                    <Video className=\"w-4 h-4\" />\n                    <span>Autoplay Videos</span>\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Automatically play videos in feed and stories</p>\n                </div>\n                <Switch\n                  id=\"autoplay-videos\"\n                  checked={settings.autoplayVideos}\n                  onCheckedChange={(checked) => handleSettingChange(\"autoplayVideos\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n\n              <Separator className=\"bg-gray-700\" />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"high-quality-uploads\" className=\"text-white\">\n                    High Quality Uploads\n                  </Label>\n                  <p className=\"text-sm text-gray-400\">Upload photos and videos in higher quality</p>\n                </div>\n                <Switch\n                  id=\"high-quality-uploads\"\n                  checked={settings.highQualityUploads}\n                  onCheckedChange={(checked) => handleSettingChange(\"highQualityUploads\", checked)}\n                  className=\"data-[state=checked]:bg-orange-600 data-[state=unchecked]:bg-gray-700\"\n                  disabled={isUpdating}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Account Actions */}\n          <Card className=\"bg-gray-800/50 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 text-lg\">\n                <Shield className=\"w-5 h-5 text-orange-500\" />\n                <span>Account</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Button onClick={handleLogout} variant=\"destructive\" className=\"w-full bg-red-600 hover:bg-red-700\">\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Sign Out\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n        <DialogFooter className=\"flex flex-col sm:flex-row sm:justify-between gap-2\">\n          <Button\n            variant=\"destructive\"\n            onClick={handleLogout}\n            className=\"w-full sm:w-auto bg-red-600 hover:bg-red-700 text-white\"\n          >\n            Logout\n          </Button>\n          <Button\n            type=\"submit\"\n            onClick={handleSaveChanges}\n            className=\"w-full sm:w-auto bg-orange-600 hover:bg-orange-700 text-white\"\n            disabled={isUpdating}\n          >\n            {isUpdating ? <LoadingSpinner className=\"text-white\" /> : \"Save Changes\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/pwa-install-prompt.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[341,344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[341,344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[444,447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[444,447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { Download } from \"lucide-react\"\n\ndeclare global {\n  interface Window {\n    deferredPrompt: any\n  }\n}\n\nexport function PWAInstallPrompt() {\n  const [deferredPrompt, setDeferredPrompt] = useState<any>(null)\n  const [isVisible, setIsVisible] = useState(false)\n\n  useEffect(() => {\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault()\n      setDeferredPrompt(e)\n      setIsVisible(true)\n    }\n\n    window.addEventListener(\"beforeinstallprompt\", handleBeforeInstallPrompt)\n\n    return () => {\n      window.removeEventListener(\"beforeinstallprompt\", handleBeforeInstallPrompt)\n    }\n  }, [])\n\n  const handleInstallClick = async () => {\n    if (deferredPrompt) {\n      deferredPrompt.prompt()\n      const { outcome } = await deferredPrompt.userChoice\n      if (outcome === \"accepted\") {\n        // PWA installation accepted\n      } else {\n        // PWA installation dismissed\n      }\n      setDeferredPrompt(null)\n      setIsVisible(false)\n    }\n  }\n\n  const handleClose = () => {\n    setIsVisible(false)\n  }\n\n  if (!isVisible) {\n    return null\n  }\n\n  return (\n    <Dialog open={isVisible} onOpenChange={setIsVisible}>\n      <DialogContent className=\"glass-card sm:max-w-[425px] p-6\">\n        <DialogHeader>\n          <DialogTitle className=\"text-orange-500\">Install Peakfolk App</DialogTitle>\n          <DialogDescription className=\"text-gray-300\">\n            Add Peakfolk to your home screen for a faster, more immersive experience!\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"flex justify-center py-4\">\n          <Download className=\"h-16 w-16 text-orange-500 animate-bounce-slow\" />\n        </div>\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={handleClose}\n            className=\"text-white border-gray-700 hover:bg-gray-700 bg-transparent\"\n          >\n            Not now\n          </Button>\n          <Button onClick={handleInstallClick} className=\"bg-orange-600 hover:bg-orange-700 text-white\">\n            Install App\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/share-post-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":31,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Copy, Share2 } from \"lucide-react\"\nimport { toast } from \"sonner\"\n\ninterface SharePostDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  postId: string\n}\n\nexport function SharePostDialog({ open, onOpenChange, postId }: SharePostDialogProps) {\n  const postLink = `${window.location.origin}/post/${postId}` // Assuming a post detail page\n\n  const handleCopyLink = () => {\n    navigator.clipboard.writeText(postLink)\n    toast.success(\"Link copied to clipboard!\")\n  }\n\n  const handleShare = async () => {\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: \"Check out this post on Peakfolk!\",\n          url: postLink,\n        })\n        // Post shared successfully\n      } catch (error) {\n        // Error sharing post\n        toast.error(\"Failed to share post.\")\n      }\n    } else {\n      toast.info(\"Web Share API not supported. Link copied instead.\")\n      handleCopyLink()\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"glass-card sm:max-w-[425px] p-6\">\n        <DialogHeader>\n          <DialogTitle className=\"text-orange-500\">Share Post</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"link\" className=\"text-right text-white\">\n              Link\n            </Label>\n            <Input id=\"link\" value={postLink} readOnly className=\"col-span-3 bg-gray-800 border-gray-700 text-white\" />\n          </div>\n        </div>\n        <div className=\"flex justify-end gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={handleCopyLink}\n            className=\"text-orange-500 border-orange-500 hover:bg-orange-900 bg-transparent\"\n          >\n            <Copy className=\"mr-2 h-4 w-4\" /> Copy Link\n          </Button>\n          <Button onClick={handleShare} className=\"bg-orange-600 hover:bg-orange-700 text-white\">\n            <Share2 className=\"mr-2 h-4 w-4\" /> Share\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/story-bar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[794,797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[794,797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[991,994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[991,994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":56,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\"\nimport { useActiveStories } from \"@/hooks/use-stories\" // Import the new hook\nimport { LoadingSpinner } from \"./loading-spinner\"\nimport { useState } from \"react\"\nimport { StoryViewerDialog } from \"./story-viewer-dialog\"\nimport { PlusCircle } from \"lucide-react\"\nimport { useAuth } from \"@/contexts/auth-context\"\nimport { CreateStoryDialog } from \"./create-story-dialog\"\n\nexport function StoryBar() {\n  const { dbUser } = useAuth()\n  const { stories, isLoading, isError } = useActiveStories() // Use the new hook\n  const [isStoryViewerOpen, setIsStoryViewerOpen] = useState(false)\n  const [currentStories, setCurrentStories] = useState<any[]>([])\n  const [currentStoryIndex, setCurrentStoryIndex] = useState(0)\n  const [isCreateStoryDialogOpen, setIsCreateStoryDialogOpen] = useState(false)\n\n  const handleStoryClick = (userStories: any[], initialIndex = 0) => {\n    setCurrentStories(userStories)\n    setCurrentStoryIndex(initialIndex)\n    setIsStoryViewerOpen(true)\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-24 glass-card rounded-lg shadow-md\">\n        <LoadingSpinner />\n      </div>\n    )\n  }\n\n  if (isError) {\n    return <div className=\"text-red-500 text-center glass-card p-4 rounded-lg shadow-md\">Error loading stories.</div>\n  }\n\n  return (\n    <div className=\"glass-card p-4 rounded-lg shadow-md\">\n      <h2 className=\"text-xl font-bold text-white mb-4\">Stories</h2>\n      <ScrollArea className=\"w-full whitespace-nowrap rounded-md\">\n        <div className=\"flex w-max space-x-4 p-2\">\n          {dbUser && (\n            <div\n              className=\"flex flex-col items-center space-y-1 cursor-pointer\"\n              onClick={() => setIsCreateStoryDialogOpen(true)}\n            >\n              <div className=\"relative h-16 w-16 rounded-full border-2 border-dashed border-gray-500 flex items-center justify-center\">\n                <PlusCircle className=\"h-8 w-8 text-gray-400\" />\n              </div>\n              <span className=\"text-xs text-gray-400\">Add Story</span>\n            </div>\n          )}\n          {stories.length === 0 && !dbUser && <p className=\"text-gray-400 text-center w-full\">No stories available.</p>}\n          {stories.map((userStories, index) => (\n            <div\n              key={userStories[0].userId}\n              className=\"flex flex-col items-center space-y-1 cursor-pointer\"\n              onClick={() => handleStoryClick(userStories)}\n            >\n              <Avatar className=\"h-16 w-16 border-2 border-orange-500\">\n                <AvatarImage\n                  src={userStories[0].author?.avatar || \"/placeholder.svg\"}\n                  alt={userStories[0].author?.username}\n                />\n                <AvatarFallback>{userStories[0].author?.username?.[0]?.toUpperCase() || \"U\"}</AvatarFallback>\n              </Avatar>\n              <span className=\"text-xs text-white\">{userStories[0].author?.username}</span>\n            </div>\n          ))}\n        </div>\n        <ScrollBar orientation=\"horizontal\" />\n      </ScrollArea>\n      <StoryViewerDialog\n        open={isStoryViewerOpen}\n        onOpenChange={setIsStoryViewerOpen}\n        stories={currentStories}\n        initialStoryIndex={currentStoryIndex}\n      />\n      <CreateStoryDialog open={isCreateStoryDialogOpen} onOpenChange={setIsCreateStoryDialogOpen} />\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/story-viewer-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[501,504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[501,504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\nimport { useState, useEffect, useCallback } from \"react\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { ChevronLeft, ChevronRight, X } from \"lucide-react\"\nimport Image from \"next/image\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { toDate } from \"@/lib/firebase-services\"\n\ninterface StoryViewerDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  stories: any[] // Array of stories for a single user\n  initialStoryIndex?: number\n}\n\nexport function StoryViewerDialog({ open, onOpenChange, stories, initialStoryIndex = 0 }: StoryViewerDialogProps) {\n  const [currentStoryIndex, setCurrentStoryIndex] = useState(initialStoryIndex)\n\n  useEffect(() => {\n    if (open) {\n      setCurrentStoryIndex(initialStoryIndex)\n    }\n  }, [open, initialStoryIndex])\n\n  const handleNextStory = useCallback(() => {\n    setCurrentStoryIndex((prevIndex) => (prevIndex + 1) % stories.length)\n  }, [stories.length])\n\n  const handlePrevStory = useCallback(() => {\n    setCurrentStoryIndex((prevIndex) => (prevIndex - 1 + stories.length) % stories.length)\n  }, [stories.length])\n\n  useEffect(() => {\n    if (!open || stories.length === 0) return\n\n    const timer = setTimeout(handleNextStory, 5000) // Auto-advance every 5 seconds\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"ArrowRight\") {\n        handleNextStory()\n      } else if (event.key === \"ArrowLeft\") {\n        handlePrevStory()\n      } else if (event.key === \"Escape\") {\n        onOpenChange(false)\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n\n    return () => {\n      clearTimeout(timer)\n      window.removeEventListener(\"keydown\", handleKeyDown)\n    }\n  }, [open, currentStoryIndex, stories.length, handleNextStory, handlePrevStory, onOpenChange])\n\n  if (!open || stories.length === 0) return null\n\n  const currentStory = stories[currentStoryIndex]\n  const storyDate = toDate(currentStory.createdAt)\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"flex flex-col items-center justify-center p-0 max-w-md w-full h-[90vh] bg-black relative overflow-hidden\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"absolute top-4 right-4 z-10 text-white hover:bg-white/20\"\n          onClick={() => onOpenChange(false)}\n        >\n          <X className=\"h-6 w-6\" />\n        </Button>\n\n        <div className=\"absolute top-0 left-0 right-0 p-4 flex items-center space-x-3 z-10 bg-gradient-to-b from-black/70 to-transparent\">\n          <Avatar className=\"h-10 w-10 border-2 border-orange-500\">\n            <AvatarImage src={currentStory.author?.avatar || \"/placeholder.svg\"} alt={currentStory.author?.username} />\n            <AvatarFallback>{currentStory.author?.username?.[0]?.toUpperCase() || \"U\"}</AvatarFallback>\n          </Avatar>\n          <div className=\"flex flex-col\">\n            <span className=\"font-semibold text-white\">\n              {currentStory.author?.name || currentStory.author?.username}\n            </span>\n            <span className=\"text-xs text-gray-300\">{storyDate ? storyDate.toLocaleString() : \"N/A\"}</span>\n          </div>\n        </div>\n\n        <div className=\"relative w-full h-full flex items-center justify-center\">\n          <Image\n            src={currentStory.imageUrl || \"/placeholder.svg\"}\n            alt=\"Story\"\n            fill\n            className=\"object-contain\"\n            priority\n          />\n        </div>\n\n        {stories.length > 1 && (\n          <>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute left-4 top-1/2 -translate-y-1/2 z-10 text-white hover:bg-white/20\"\n              onClick={handlePrevStory}\n            >\n              <ChevronLeft className=\"h-8 w-8\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute right-4 top-1/2 -translate-y-1/2 z-10 text-white hover:bg-white/20\"\n              onClick={handleNextStory}\n            >\n              <ChevronRight className=\"h-8 w-8\" />\n            </Button>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/ui/calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronLeft' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronRight' is defined but never used.","line":4,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n              components={{}}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/ui/chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":72,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":8},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'payload' logical expression could make the dependencies of useMemo Hook (at line 163) change on every render. To fix this, wrap the initialization of 'payload' in its own useMemo() Hook.","line":133,"column":11,"nodeType":"VariableDeclarator","endLine":133,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3636,3639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3636,3639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3683,3686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3683,3686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5114,5117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5114,5117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":267,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8168,8171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8168,8171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":290,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8644,8647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8644,8647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n      ...props\n    },\n    ref\n  ) => {\n    const payload = (props as any).payload || []\n    const label = (props as any).label\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item: any, index: number) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n      payload?: any[]\n      verticalAlign?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload = [], verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item: any) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/ui/command.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1296,1299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1296,1299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children as any}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/ui/toaster.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[365,368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[365,368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useToast } from \"@/components/ui/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }: any) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/components/ui/use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type.","line":21,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":21,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/lib/env.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'requiredPublicVars' is assigned a value but only used as a type.","line":6,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":6,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Centralized environment variable access and validation\n// - Public variables must be prefixed with NEXT_PUBLIC_ (available to client)\n// - Server-only secrets must NOT be prefixed (available only on server)\n// This module throws early if required values are missing.\n\nconst requiredPublicVars = [\n  \"NEXT_PUBLIC_FIREBASE_API_KEY\",\n  \"NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN\",\n  \"NEXT_PUBLIC_FIREBASE_PROJECT_ID\",\n  \"NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET\",\n  \"NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID\",\n  \"NEXT_PUBLIC_FIREBASE_APP_ID\",\n] as const\n\ntype RequiredPublicVar = typeof requiredPublicVars[number]\n\nfunction getEnv(name: string): string | undefined {\n  return process.env[name]\n}\n\nfunction requireEnv(name: RequiredPublicVar): string {\n  const v = getEnv(name)\n  if (!v) {\n    throw new Error(\n      `Missing required environment variable: ${name}.\\n` +\n        \"Set it in your .env.local for local dev, and in Vercel Project Settings → Environment Variables for deployments.\",\n    )\n  }\n  return v\n}\n\n// Firebase Public Config (safe to expose to browsers; still keep out of git)\nexport const FIREBASE_PUBLIC = {\n  apiKey: requireEnv(\"NEXT_PUBLIC_FIREBASE_API_KEY\"),\n  authDomain: requireEnv(\"NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN\"),\n  projectId: requireEnv(\"NEXT_PUBLIC_FIREBASE_PROJECT_ID\"),\n  storageBucket: requireEnv(\"NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET\"),\n  messagingSenderId: requireEnv(\"NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID\"),\n  appId: requireEnv(\"NEXT_PUBLIC_FIREBASE_APP_ID\"),\n  measurementId: getEnv(\"NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID\"), // optional\n}\n\n// NextAuth (server-only)\nexport const NEXTAUTH_URL = getEnv(\"NEXTAUTH_URL\")\nexport const NEXTAUTH_SECRET = getEnv(\"NEXTAUTH_SECRET\")\n\n// Feature flags (public)\nfunction toBool(v: string | undefined, def = false) {\n  if (v === undefined) return def\n  return /^(1|true|yes|on)$/i.test(v)\n}\n\nexport const FLAGS = {\n  ENABLE_PWA: toBool(getEnv(\"NEXT_PUBLIC_ENABLE_PWA\"), true),\n  ENABLE_ANALYTICS: toBool(getEnv(\"NEXT_PUBLIC_ENABLE_ANALYTICS\"), true),\n  ENABLE_PUSH_NOTIFICATIONS: toBool(getEnv(\"NEXT_PUBLIC_ENABLE_PUSH_NOTIFICATIONS\"), true),\n  ENABLE_ADVANCED_SEARCH: toBool(getEnv(\"NEXT_PUBLIC_ENABLE_ADVANCED_SEARCH\"), true),\n  ENABLE_ANALYTICS_DASHBOARD: toBool(getEnv(\"NEXT_PUBLIC_ENABLE_ANALYTICS_DASHBOARD\"), true),\n}\n\n// Build analysis\nexport const ANALYZE = toBool(getEnv(\"ANALYZE\"), false)\n\n// Dev network origins list\nexport const ALLOWED_DEV_ORIGINS = (getEnv(\"ALLOWED_DEV_ORIGINS\") || \"\")\n  .split(\",\")\n  .map((s) => s.trim())\n  .filter(Boolean)\n","usedDeprecatedRules":[]},{"filePath":"/home/shreyas/dev./peakfolksocial/lib/firebase-services.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RecaptchaVerifier' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleError' is defined but never used.","line":35,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFirestoreError' is defined but never used.","line":35,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleAuthError' is defined but never used.","line":35,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleStorageError' is defined but never used.","line":35,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":80},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1067,1070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1067,1070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1755,1758],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1755,1758],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1904,1907],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1904,1907],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fallbackUser' is assigned a value but never used.","line":68,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2416,2419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2416,2419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2484,2487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2484,2487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapUserDoc' is assigned a value but never used.","line":92,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2642,2645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2642,2645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapPostDoc' is assigned a value but never used.","line":111,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3302,3305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3302,3305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3964,3967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3964,3967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4902,4905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4902,4905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapStoryDoc' is assigned a value but never used.","line":185,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6028,6031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6028,6031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapMessageDoc' is assigned a value but never used.","line":207,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":207,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6906,6909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6906,6909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mapNotificationDoc' is assigned a value but never used.","line":214,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":214,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7105,7108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7105,7108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'phoneNumber' is defined but never used.","line":314,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":314,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":339,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11427,11430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11427,11430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":391,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":391,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12914,12917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12914,12917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":393,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":393,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12986,12989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12986,12989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":618,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":618,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20597,20600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20597,20600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":618,"column":107,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":618,"endColumn":110,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20658,20661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20658,20661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":634,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":634,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21208,21211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21208,21211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":636,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":636,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21273,21276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21273,21276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":803,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":803,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26314,26317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26314,26317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":805,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":805,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26379,26382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26379,26382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":829,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":829,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27024,27027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27024,27027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":831,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":831,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27089,27092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27089,27092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":907,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":907,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29321,29324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29321,29324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":908,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":908,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29367,29370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29367,29370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":909,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":909,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29397,29400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29397,29400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":937,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":937,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30386,30389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30386,30389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":939,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":939,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30451,30454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30451,30454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1091,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1091,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34951,34954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34951,34954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1092,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1092,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[35006,35009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[35006,35009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1462,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1462,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[46875,46878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[46875,46878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1470,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1470,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47160,47163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47160,47163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1472,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1472,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47293,47296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47293,47296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { db, auth, storage, googleProvider, analytics } from \"@/lib/firebase\"\nimport {\n  collection,\n  doc,\n  getDoc,\n  setDoc,\n  updateDoc,\n  arrayUnion,\n  arrayRemove,\n  query,\n  where,\n  getDocs,\n  limit,\n  orderBy,\n  startAfter,\n  serverTimestamp,\n  runTransaction,\n  onSnapshot,\n  addDoc,\n  deleteDoc,\n  writeBatch,\n} from \"firebase/firestore\"\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  sendPasswordResetEmail as firebaseSendPasswordResetEmail,\n  signInWithPopup,\n  RecaptchaVerifier,\n  updateProfile as firebaseUpdateProfile,\n} from \"firebase/auth\"\nimport { ref, uploadBytes, getDownloadURL, deleteObject } from \"firebase/storage\"\nimport { logEvent } from \"firebase/analytics\"\nimport type { User as UserProfile, Post, Plan, Notification, Message, Story, Comment, EmbeddedUser, PlanMessage } from \"@/types\"\nimport { handleError, handleFirestoreError, handleAuthError, handleStorageError } from \"@/lib/error-handler\"\n\n// Extend Window interface for recaptcha\ndeclare global {\n  interface Window {\n    recaptchaVerifier: any\n  }\n}\n\n// Declare getUser function (used as a fallback when embedded data is missing)\nconst getUser = async (userId: string): Promise<UserProfile | null> => {\n  const userRef = doc(db, \"users\", userId)\n  const userSnap = await getDoc(userRef)\n  if (userSnap.exists()) {\n    return { id: userSnap.id, ...userSnap.data() } as UserProfile\n  }\n  return null\n}\n\n/* -------------------------------------------------------------------------- */\n/* Utilities                                                                  */\n/* -------------------------------------------------------------------------- */\n\n// Helper to convert Firestore Timestamp to Date\nexport const toDate = (timestamp: any) => {\n  if (timestamp && typeof timestamp.toDate === \"function\") {\n    return timestamp.toDate()\n  }\n  return null\n}\n\nconst normalizeArray = (v: any): string[] => (Array.isArray(v) ? v : [])\n\nconst fallbackUser = (id: string): UserProfile => ({\n  uid: id, // Assuming uid and id are the same for simplicity in fallback\n  id,\n  email: \"unknown@example.com\",\n  displayName: \"Unknown User\",\n  username: \"unknownuser\",\n  bio: \"\",\n  website: \"\",\n  location: \"\",\n  photoURL: \"/placeholder.svg\",\n  followers: 0,\n  following: 0,\n  followerIds: [],\n  followingIds: [],\n  posts: 0,\n  plans: 0,\n  verified: false,\n  isPrivate: false,\n  createdAt: serverTimestamp() as any, // Placeholder for Timestamp\n  updatedAt: serverTimestamp() as any, // Placeholder for Timestamp\n})\n\n/* ------------------------------ Mappers ----------------------------------- */\n\nconst mapUserDoc = (id: string, data: any): UserProfile => {\n  const followerIds = normalizeArray(data.followerIds)\n  const followingIds = normalizeArray(data.followingIds)\n  return {\n    id,\n    uid: id, // Ensure uid is set\n    ...data,\n    createdAt: toDate(data.createdAt),\n    updatedAt: toDate(data.updatedAt),\n    followers: followerIds.length,\n    following: followingIds.length,\n    followerIds: followerIds,\n    followingIds: followingIds,\n    displayName: data.displayName || data.username || \"Unknown User\",\n    name: data.name || data.displayName || data.username || \"Unknown User\",\n    photoURL: data.photoURL || \"/placeholder.svg\",\n  }\n}\n\nconst mapPostDoc = async (id: string, data: any): Promise<Post> => {\n  // Prefer embedded author to avoid redundant queries; fallback to fetching when absent\n  let author: EmbeddedUser | undefined = data.author\n  if (!author) {\n    const authorProfile = await getUser(data.userId)\n    author = {\n      id: authorProfile?.id || data.userId,\n      username: authorProfile?.username || \"unknown\",\n      avatar: authorProfile?.photoURL || \"/placeholder.svg\",\n      name: authorProfile?.displayName || authorProfile?.username || \"Unknown User\",\n    }\n  }\n\n  // Map embedded comments; avoid fetching authors if embedded\n  const comments = await Promise.all(\n    normalizeArray(data.comments).map(async (comment: any) => {\n      const commentAuthor: EmbeddedUser = comment.author || {\n        id: comment.userId,\n        username: \"unknown\",\n        avatar: \"/placeholder.svg\",\n        name: \"Unknown User\",\n      }\n      return {\n        ...comment,\n        createdAt: toDate(comment.createdAt),\n        updatedAt: toDate(comment.updatedAt),\n        author: commentAuthor,\n      }\n    }),\n  )\n\n  return {\n    id,\n    ...data,\n    createdAt: toDate(data.createdAt),\n    updatedAt: toDate(data.updatedAt),\n    author: author!,\n    likes: normalizeArray(data.likes),\n    comments: comments,\n    isLiked: false, // This should be determined by client-side logic or a specific query\n    isBookmarked: false, // This should be determined by client-side logic or a specific query\n    shares: data.shares || 0,\n    imageUrl: data.imageUrl || \"/placeholder.svg\", // Ensure imageUrl is always present\n  } as Post\n}\n\nconst mapPlanDoc = async (id: string, data: any): Promise<Plan> => {\n  // Prefer embedded organizer; fallback to fetching when absent\n  let organizer: EmbeddedUser | undefined = data.organizer\n  if (!organizer) {\n    const organizerProfile = await getUser(data.userId)\n    organizer = {\n      id: organizerProfile?.id || data.userId,\n      username: organizerProfile?.username || \"unknown\",\n      avatar: organizerProfile?.photoURL || \"/placeholder.svg\",\n      name: organizerProfile?.displayName || organizerProfile?.username || \"Unknown User\",\n    }\n  }\n  return {\n    id,\n    ...data,\n    createdAt: toDate(data.createdAt),\n    updatedAt: toDate(data.updatedAt),\n    dateTime: toDate(data.dateTime),\n    date: toDate(data.date), // Assuming 'date' is also a Timestamp\n    organizer: organizer!,\n    participantIds: normalizeArray(data.participantIds),\n    currentParticipants: normalizeArray(data.participantIds).length,\n    isJoined: false, // Client-side determined\n    isBookmarked: false, // Client-side determined\n    imageUrl: data.imageUrl || \"/placeholder.svg\", // Ensure imageUrl is always present\n  } as Plan\n}\n\nconst mapStoryDoc = async (id: string, data: any): Promise<Story> => {\n  const authorProfile = await getUser(data.userId) // Fetch full author profile\n  const author: EmbeddedUser = {\n    id: authorProfile?.id || data.userId,\n    username: authorProfile?.username || \"unknown\",\n    avatar: authorProfile?.photoURL || \"/placeholder.svg\",\n    name: authorProfile?.displayName || authorProfile?.username || \"Unknown User\",\n  }\n  return {\n    id,\n    ...data,\n    createdAt: toDate(data.createdAt),\n    expiresAt: toDate(data.expiresAt),\n    author: author,\n    viewedBy: normalizeArray(data.viewedBy),\n    views: normalizeArray(data.viewedBy).length,\n    username: author.username, // Redundant but kept for compatibility\n    userDisplayName: author.name, // Redundant but kept for compatibility\n    userPhotoURL: author.avatar, // Redundant but kept for compatibility\n  } as Story\n}\n\nconst mapMessageDoc = (id: string, data: any): Message => ({\n  id,\n  ...data,\n  createdAt: toDate(data.createdAt),\n  isRead: data.read || data.isRead || false, // Aligning with isRead\n})\n\nconst mapNotificationDoc = async (id: string, data: any): Promise<Notification> => {\n  const fromUserProfile = await getUser(data.fromUserId)\n  const fromUser: EmbeddedUser = {\n    id: fromUserProfile?.id || data.fromUserId,\n    username: fromUserProfile?.username || \"unknown\",\n    avatar: fromUserProfile?.photoURL || \"/placeholder.svg\",\n    name: fromUserProfile?.displayName || fromUserProfile?.username || \"Unknown User\",\n  }\n  return {\n    id,\n    ...data,\n    createdAt: toDate(data.createdAt),\n    fromUser: fromUser,\n    fromUsername: fromUser.username, // Redundant but kept for compatibility\n    fromUserName: fromUser.name, // Redundant but kept for compatibility\n    fromUserPhotoURL: fromUser.avatar, // Redundant but kept for compatibility\n    isRead: data.read || data.isRead || false, // Aligning with isRead\n  } as Notification\n}\n\n/* -------------------------------------------------------------------------- */\n/* Users                                                                      */\n/* -------------------------------------------------------------------------- */\n\n// --- Auth Services ---\n\nexport const registerUser = async (email: string, password: string, username: string) => {\n  const userCredential = await createUserWithEmailAndPassword(auth, email, password)\n  const user = userCredential.user\n\n  // Create user profile in Firestore\n  const userRef = doc(db, \"users\", user.uid)\n  await setDoc(userRef, {\n    id: user.uid,\n    email: user.email,\n    username: username,\n    displayName: username,\n    photoURL: user.photoURL || \"\",\n    bio: \"\",\n    website: \"\",\n    location: \"\",\n    posts: 0,\n    followers: 0,\n    following: 0,\n    isPrivate: false,\n    createdAt: serverTimestamp(),\n    followerIds: [], // Initialize followerIds array\n    followingIds: [], // Initialize followingIds array\n    pendingFollowRequests: [], // Users who want to follow this user\n    sentFollowRequests: [], // Users this user wants to follow\n  })\n\n  if (analytics) logEvent(analytics, \"sign_up\", { method: \"email_password\" })\n  return user\n}\n\nexport const loginUser = async (email: string, password: string) => {\n  const userCredential = await signInWithEmailAndPassword(auth, email, password)\n  if (analytics) logEvent(analytics, \"login\", { method: \"email_password\" })\n  return userCredential.user\n}\n\nexport const logoutUser = async () => {\n  await signOut(auth)\n  if (analytics) logEvent(analytics, \"logout\")\n}\n\nexport const signInWithGoogle = async () => {\n  const result = await signInWithPopup(auth, googleProvider)\n  const user = result.user\n\n  // Check if user exists in Firestore, if not, create profile\n  const userRef = doc(db, \"users\", user.uid)\n  const userSnap = await getDoc(userRef)\n\n  if (!userSnap.exists()) {\n    await setDoc(userRef, {\n      id: user.uid,\n      email: user.email,\n      username: user.email?.split(\"@\")[0] || user.uid, // Default username\n      displayName: user.displayName || user.email?.split(\"@\")[0] || user.uid,\n      photoURL: user.photoURL || \"\",\n      bio: \"\",\n      website: \"\",\n      location: \"\",\n      posts: 0,\n      followers: 0,\n      following: 0,\n      isPrivate: false,\n      createdAt: serverTimestamp(),\n      followerIds: [],\n      followingIds: [],\n      pendingFollowRequests: [],\n      sentFollowRequests: [],\n    })\n  }\n  if (analytics) logEvent(analytics, \"login\", { method: \"google\" })\n  return user\n}\n\nexport const signInWithPhone = async (phoneNumber: string) => {\n  // Phone authentication is not enabled in Firebase project\n  // To enable: Go to Firebase Console > Authentication > Sign-in method > Phone\n  throw new Error(\"Phone authentication is not enabled. Please enable it in Firebase Console.\")\n  \n  // Uncomment below when phone auth is enabled:\n  /*\n  if (typeof window !== \"undefined\" && !window.recaptchaVerifier) {\n    window.recaptchaVerifier = new RecaptchaVerifier(auth, \"recaptcha-container\", {\n      size: \"invisible\",\n      callback: (response: any) => {\n        // reCAPTCHA solved, allow signInWithPhoneNumber.\n      },\n      \"expired-callback\": () => {\n        // Response expired. Ask user to solve reCAPTCHA again.\n      },\n    })\n  }\n\n  const appVerifier = window.recaptchaVerifier\n  const confirmationResult = await auth.signInWithPhoneNumber(phoneNumber, appVerifier)\n  return confirmationResult\n  */\n}\n\nexport const confirmPhoneCode = async (confirmationResult: any, code: string) => {\n  const result = await confirmationResult.confirm(code)\n  const user = result.user\n\n  // Check if user exists in Firestore, if not, create profile\n  const userRef = doc(db, \"users\", user.uid)\n  const userSnap = await getDoc(userRef)\n\n  if (!userSnap.exists()) {\n    await setDoc(userRef, {\n      id: user.uid,\n      email: user.email || null,\n      username: user.phoneNumber || user.uid, // Default username\n      displayName: user.phoneNumber || user.uid,\n      photoURL: user.photoURL || \"\",\n      bio: \"\",\n      website: \"\",\n      location: \"\",\n      posts: 0,\n      followers: 0,\n      following: 0,\n      isPrivate: false,\n      createdAt: serverTimestamp(),\n      followerIds: [],\n      followingIds: [],\n      pendingFollowRequests: [],\n      sentFollowRequests: [],\n    })\n  }\n  if (analytics) logEvent(analytics, \"login\", { method: \"phone\" })\n  return user\n}\n\nexport const sendPasswordResetEmail = async (email: string) => {\n  await firebaseSendPasswordResetEmail(auth, email)\n  if (analytics) logEvent(analytics, \"password_reset_request\")\n}\n\n// --- User Services ---\n\nexport const getUserProfile = async (userId: string): Promise<UserProfile | null> => {\n  if (!userId) return null\n  const userRef = doc(db, \"users\", userId)\n  const userSnap = await getDoc(userRef)\n  if (userSnap.exists()) {\n    return { id: userSnap.id, ...userSnap.data() } as UserProfile\n  }\n  return null\n}\n\nexport const getUsers = async (\n  searchQuery?: string,\n  lastVisible?: any,\n  limitCount = 10,\n): Promise<{ users: UserProfile[]; lastVisible: any }> => {\n  let usersQuery = query(collection(db, \"users\"), orderBy(\"username\"), limit(limitCount))\n\n  if (searchQuery) {\n    const lowerCaseQuery = searchQuery.toLowerCase()\n    usersQuery = query(\n      collection(db, \"users\"),\n      where(\"username\", \">=\", lowerCaseQuery),\n      where(\"username\", \"<=\", lowerCaseQuery + \"\\uf8ff\"),\n      orderBy(\"username\"),\n      limit(limitCount),\n    )\n  }\n\n  if (lastVisible) {\n    usersQuery = query(usersQuery, startAfter(lastVisible))\n  }\n\n  const documentSnapshots = await getDocs(usersQuery)\n  const users = documentSnapshots.docs.map((doc) => ({ id: doc.id, ...doc.data() }) as UserProfile)\n  const newLastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1]\n\n  return { users, lastVisible: newLastVisible }\n}\n\nexport const checkUsernameExists = async (username: string): Promise<boolean> => {\n  const usersRef = collection(db, \"users\")\n  const q = query(usersRef, where(\"username\", \"==\", username))\n  const querySnapshot = await getDocs(q)\n  return !querySnapshot.empty\n}\n\nexport const updateUserProfile = async (\n  userId: string,\n  data: Partial<UserProfile>,\n  profileImageFile?: File,\n): Promise<void> => {\n  const userRef = doc(db, \"users\", userId)\n  let photoURL = data.photoURL\n\n  if (profileImageFile) {\n    const storageRef = ref(storage, `profile_pictures/${userId}/${profileImageFile.name}`)\n    const snapshot = await uploadBytes(storageRef, profileImageFile)\n    photoURL = await getDownloadURL(snapshot.ref)\n  }\n\n  await updateDoc(userRef, { ...data, photoURL })\n\n  // Update Firebase Auth profile if display name or photo URL changed\n  if (auth.currentUser && auth.currentUser.uid === userId) {\n    await firebaseUpdateProfile(auth.currentUser, {\n      displayName: data.displayName,\n      photoURL: photoURL || auth.currentUser.photoURL,\n    })\n  }\n  if (analytics) logEvent(analytics, \"user_profile_updated\", { userId })\n}\n\n/* ------------------------------- Follows ---------------------------------- */\n\nexport const getFollowStatus = async (currentUserId: string, targetUserId: string): Promise<boolean> => {\n  if (!currentUserId || !targetUserId) return false\n  const currentUserRef = doc(db, \"users\", currentUserId)\n  const currentUserSnap = await getDoc(currentUserRef)\n  if (currentUserSnap.exists()) {\n    const userData = currentUserSnap.data() as UserProfile\n    return userData.followingIds?.includes(targetUserId) || false\n  }\n  return false\n}\n\nexport const getFollowerCount = async (userId: string): Promise<number> => {\n  const userRef = doc(db, \"users\", userId)\n  const userSnap = await getDoc(userRef)\n  if (userSnap.exists()) {\n    const userData = userSnap.data() as UserProfile\n    return userData.followerIds?.length || 0\n  }\n  return 0\n}\n\nexport const toggleFollowUser = async (\n  followerId: string,\n  followingId: string,\n): Promise<{ following: boolean }> => {\n  if (followerId === followingId) {\n    throw new Error(\"Cannot follow yourself.\")\n  }\n\n  const token = await auth.currentUser?.getIdToken()\n  if (!token) throw new Error(\"Not authenticated\")\n\n  const res = await fetch(\"/api/follows/toggle\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({ followingId }),\n  })\n  if (!res.ok) {\n    const err = await res.json().catch(() => ({}))\n    throw new Error(err?.error || \"Failed to toggle follow\")\n  }\n  const data = (await res.json()) as { ok: true; following: boolean }\n  return { following: data.following }\n}\n\nexport const getFollowRequests = async (userId: string): Promise<UserProfile[]> => {\n  const userRef = doc(db, \"users\", userId)\n  const userSnap = await getDoc(userRef)\n  if (!userSnap.exists()) return []\n\n  const userData = userSnap.data() as UserProfile\n  const pendingRequests = userData.pendingFollowRequests || []\n\n  if (pendingRequests.length === 0) return []\n\n  const usersQuery = query(collection(db, \"users\"), where(\"id\", \"in\", pendingRequests))\n  const querySnapshot = await getDocs(usersQuery)\n  return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }) as UserProfile)\n}\n\nexport const handleFollowRequest = async (\n  requesterId: string,\n  targetUserId: string,\n  accept: boolean,\n): Promise<void> => {\n  await runTransaction(db, async (transaction) => {\n    const requesterRef = doc(db, \"users\", requesterId)\n    const targetUserRef = doc(db, \"users\", targetUserId)\n\n    const requesterSnap = await transaction.get(requesterRef)\n    const targetUserSnap = await transaction.get(targetUserRef)\n\n    if (!requesterSnap.exists() || !targetUserSnap.exists()) {\n      throw new Error(\"User not found.\")\n    }\n\n    const requesterData = requesterSnap.data() as UserProfile\n    const targetUserData = targetUserSnap.data() as UserProfile\n\n    // Remove from pending requests of target user\n    transaction.update(targetUserRef, {\n      pendingFollowRequests: arrayRemove(requesterId),\n    })\n    // Remove from sent requests of requester\n    transaction.update(requesterRef, {\n      sentFollowRequests: arrayRemove(targetUserId),\n    })\n\n    if (accept) {\n      // Add to followers of target user\n      transaction.update(targetUserRef, {\n        followerIds: arrayUnion(requesterId),\n        followers: (targetUserData.followers || 0) + 1,\n      })\n      // Add to following of requester\n      transaction.update(requesterRef, {\n        followingIds: arrayUnion(targetUserId),\n        following: (requesterData.following || 0) + 1,\n      })\n\n      // Add notification for the requester\n      await addDoc(collection(db, \"notifications\"), {\n        toUserId: requesterId,\n        fromUser: {\n          id: targetUserId,\n          username: targetUserData.username,\n          name: targetUserData.displayName,\n          avatar: targetUserData.photoURL,\n        },\n        type: \"follow_request_accepted\",\n        content: `${targetUserData.displayName} accepted your follow request.`,\n        isRead: false,\n        createdAt: serverTimestamp(),\n      })\n      if (analytics) logEvent(analytics, \"follow_request_accepted\", { requesterId, targetUserId })\n    } else {\n      if (analytics) logEvent(analytics, \"follow_request_rejected\", { requesterId, targetUserId })\n    }\n  })\n}\n\n/* -------------------------------------------------------------------------- */\n/* Posts                                                                      */\n/* -------------------------------------------------------------------------- */\n\nexport const createPost = async (userId: string, caption: string, imageFile: File): Promise<string> => {\n  const userRef = doc(db, \"users\", userId)\n  const userSnap = await getDoc(userRef)\n  if (!userSnap.exists()) {\n    throw new Error(\"User not found.\")\n  }\n  const userData = userSnap.data() as UserProfile\n\n  const imageRef = ref(storage, `posts/${userId}/${imageFile.name}_${Date.now()}`)\n  const snapshot = await uploadBytes(imageRef, imageFile)\n  const imageUrl = await getDownloadURL(snapshot.ref)\n\n  const newPostRef = doc(collection(db, \"posts\"))\n  await setDoc(newPostRef, {\n    id: newPostRef.id,\n    userId: userId,\n    author: {\n      id: userData.id,\n      username: userData.username,\n      name: userData.displayName,\n      avatar: userData.photoURL,\n    },\n    caption: caption,\n    imageUrl: imageUrl,\n    likes: [],\n    createdAt: serverTimestamp(),\n  })\n\n  // Increment user's post count\n  await updateDoc(userRef, {\n    posts: (userData.posts || 0) + 1,\n  })\n\n  if (analytics) logEvent(analytics, \"post_created\", { postId: newPostRef.id, userId })\n  return newPostRef.id\n}\n\nexport const getPosts = async (lastVisible?: any, limitCount = 10): Promise<{ posts: Post[]; lastVisible: any }> => {\n  let postsQuery = query(collection(db, \"posts\"), orderBy(\"createdAt\", \"desc\"), limit(limitCount))\n\n  if (lastVisible) {\n    postsQuery = query(postsQuery, startAfter(lastVisible))\n  }\n\n  const documentSnapshots = await getDocs(postsQuery)\n  const posts = documentSnapshots.docs.map((doc) => ({ id: doc.id, ...doc.data() }) as Post)\n  const newLastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1]\n\n  return { posts, lastVisible: newLastVisible }\n}\n\nexport const getUserPosts = async (\n  userId: string,\n  lastVisible?: any,\n  limitCount = 10,\n): Promise<{ posts: Post[]; lastVisible: any }> => {\n  let postsQuery = query(\n    collection(db, \"posts\"),\n    where(\"userId\", \"==\", userId),\n    orderBy(\"createdAt\", \"desc\"),\n    limit(limitCount),\n  )\n\n  if (lastVisible) {\n    postsQuery = query(postsQuery, startAfter(lastVisible))\n  }\n\n  const documentSnapshots = await getDocs(postsQuery)\n  const posts = documentSnapshots.docs.map((doc) => ({ id: doc.id, ...doc.data() }) as Post)\n  const newLastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1]\n\n  return { posts, lastVisible: newLastVisible }\n}\n\nexport const toggleLike = async (postId: string, userId: string): Promise<void> => {\n  const postRef = doc(db, \"posts\", postId)\n  const postSnap = await getDoc(postRef)\n\n  if (!postSnap.exists()) {\n    throw new Error(\"Post not found.\")\n  }\n\n  const postData = postSnap.data() as Post\n  const isLiked = postData.likes.includes(userId)\n\n  if (isLiked) {\n    await updateDoc(postRef, {\n      likes: arrayRemove(userId),\n    })\n    if (analytics) logEvent(analytics, \"post_unlike\", { postId, userId })\n  } else {\n    await updateDoc(postRef, {\n      likes: arrayUnion(userId),\n    })\n    // Add notification for the post author\n    if (postData.userId !== userId) {\n      const likerUser = await getUserProfile(userId)\n      if (likerUser) {\n        await addDoc(collection(db, \"notifications\"), {\n          toUserId: postData.userId,\n          fromUser: {\n            id: likerUser.id,\n            username: likerUser.username,\n            name: likerUser.displayName,\n            avatar: likerUser.photoURL,\n          },\n          type: \"like\",\n          content: `${likerUser.displayName} liked your post.`,\n          postId: postId,\n          isRead: false,\n          createdAt: serverTimestamp(),\n        })\n      }\n    }\n    if (analytics) logEvent(analytics, \"post_like\", { postId, userId })\n  }\n}\n\nexport const deletePost = async (postId: string, imageUrl: string): Promise<void> => {\n  const postRef = doc(db, \"posts\", postId)\n  const postSnap = await getDoc(postRef)\n\n  if (!postSnap.exists()) {\n    throw new Error(\"Post not found.\")\n  }\n\n  const postData = postSnap.data() as Post\n  const userId = postData.userId\n  const userRef = doc(db, \"users\", userId)\n\n  await runTransaction(db, async (transaction) => {\n    // Delete post document\n    transaction.delete(postRef)\n\n    // Decrement user's post count\n    const userSnap = await transaction.get(userRef)\n    if (userSnap.exists()) {\n      const userData = userSnap.data() as UserProfile\n      transaction.update(userRef, {\n        posts: Math.max(0, (userData.posts || 0) - 1),\n      })\n    }\n\n    // Delete associated comments\n    const commentsQuery = query(collection(db, \"comments\"), where(\"postId\", \"==\", postId))\n    const commentsSnapshot = await getDocs(commentsQuery)\n    commentsSnapshot.docs.forEach((commentDoc) => {\n      transaction.delete(commentDoc.ref)\n    })\n\n    // Delete associated image from storage\n    if (imageUrl) {\n      const imageRef = ref(storage, imageUrl)\n      await deleteObject(imageRef)\n    }\n  })\n  if (analytics) logEvent(analytics, \"post_deleted\", { postId, userId })\n}\n\n// --- Comment Services ---\n\nexport const getComments = (postId: string, callback: (comments: Comment[]) => void) => {\n  const commentsQuery = query(collection(db, \"comments\"), where(\"postId\", \"==\", postId), orderBy(\"createdAt\", \"asc\"))\n  const unsubscribe = onSnapshot(commentsQuery, (snapshot) => {\n    const comments = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }) as Comment)\n    callback(comments)\n  })\n  return unsubscribe\n}\n\nexport const addComment = async (postId: string, userId: string, content: string): Promise<void> => {\n  const userRef = doc(db, \"users\", userId)\n  const userSnap = await getDoc(userRef)\n  if (!userSnap.exists()) {\n    throw new Error(\"User not found.\")\n  }\n  const userData = userSnap.data() as UserProfile\n\n  const postRef = doc(db, \"posts\", postId)\n  const postSnap = await getDoc(postRef)\n  if (!postSnap.exists()) {\n    throw new Error(\"Post not found.\")\n  }\n  const postData = postSnap.data() as Post\n\n  await addDoc(collection(db, \"comments\"), {\n    postId: postId,\n    userId: userId,\n    author: {\n      id: userData.id,\n      username: userData.username,\n      name: userData.displayName,\n      avatar: userData.photoURL,\n    },\n    content: content,\n    createdAt: serverTimestamp(),\n  })\n\n  // Add notification for the post author\n  if (postData.userId !== userId) {\n    await addDoc(collection(db, \"notifications\"), {\n      toUserId: postData.userId,\n      fromUser: {\n        id: userData.id,\n        username: userData.username,\n        name: userData.displayName,\n        avatar: userData.photoURL,\n      },\n      type: \"comment\",\n      content: `${userData.displayName} commented on your post: \"${content}\"`,\n      postId: postId,\n      isRead: false,\n      createdAt: serverTimestamp(),\n    })\n  }\n  if (analytics) logEvent(analytics, \"comment_added\", { postId, userId })\n}\n\n// --- Plan Services ---\n\nexport const getCreatedPlans = async (\n  userId: string,\n  lastVisible?: any,\n  limitCount = 10,\n): Promise<{ plans: Plan[]; lastVisible: any }> => {\n  let plansQuery = query(\n    collection(db, \"plans\"),\n    where(\"userId\", \"==\", userId),\n    orderBy(\"createdAt\", \"desc\"),\n    limit(limitCount),\n  )\n\n  if (lastVisible) {\n    plansQuery = query(plansQuery, startAfter(lastVisible))\n  }\n\n  const documentSnapshots = await getDocs(plansQuery)\n  const plans = documentSnapshots.docs.map((doc) => {\n    const data = doc.data() || {}\n    return { id: doc.id, ...data } as Plan\n  })\n  const newLastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1]\n\n  return { plans, lastVisible: newLastVisible }\n}\n\nexport const getPlanPosts = async (\n  planId: string,\n  lastVisible?: any,\n  limitCount = 10,\n): Promise<{ posts: Post[]; lastVisible: any }> => {\n  let postsQuery = query(\n    collection(db, \"posts\"),\n    where(\"planId\", \"==\", planId),\n    orderBy(\"createdAt\", \"asc\"),\n    limit(limitCount),\n  )\n\n  if (lastVisible) {\n    postsQuery = query(postsQuery, startAfter(lastVisible))\n  }\n\n  const documentSnapshots = await getDocs(postsQuery)\n  const posts = documentSnapshots.docs.map((doc) => ({ id: doc.id, ...doc.data() }) as Post)\n  const newLastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1]\n\n  return { posts, lastVisible: newLastVisible }\n}\n\nexport const createPlan = async (\n  userId: string,\n  planData: {\n    title: string\n    description: string\n    imageUrl?: string\n    location: string\n    dateTime: Date\n    maxParticipants?: number\n    costPerHead: number\n    currency: string\n    isPrivate?: boolean\n  },\n  imageFile?: File,\n): Promise<string> => {\n  // Upload image client-side if provided, then call secure API to create the plan server-side\n  let imageUrl = planData.imageUrl || \"\"\n  if (imageFile) {\n    const imageRef = ref(storage, `plans/${userId}/${imageFile.name}_${Date.now()}`)\n    const snapshot = await uploadBytes(imageRef, imageFile)\n    imageUrl = await getDownloadURL(snapshot.ref)\n  }\n\n  const token = await auth.currentUser?.getIdToken()\n  if (!token) throw new Error(\"Not authenticated\")\n\n  const res = await fetch(\"/api/plans\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({\n      title: planData.title,\n      description: planData.description,\n      imageUrl,\n      location: planData.location,\n      dateTime: planData.dateTime,\n      maxParticipants: planData.maxParticipants,\n      costPerHead: planData.costPerHead,\n      currency: planData.currency,\n      isPrivate: !!planData.isPrivate,\n    }),\n  })\n\n  if (!res.ok) {\n    const err = await res.json().catch(() => ({}))\n    throw new Error(err?.error || \"Failed to create plan\")\n  }\n  const data = await res.json()\n  if (analytics) logEvent(analytics, \"plan_created\", { planId: data?.id, userId })\n  return data.id as string\n}\n\nexport const getPlans = async (\n  limitCount = 10,\n  filters?: { location?: string; category?: string },\n  lastVisible?: any,\n): Promise<{ plans: Plan[]; lastVisible: any }> => {\n  let plansQuery: any = collection(db, \"plans\")\n\n  if (filters?.location && filters.location !== \"All Locations\") {\n    plansQuery = query(plansQuery, where(\"location\", \"==\", filters.location))\n  }\n  // Assuming 'category' is a field in your plan documents. If not, this filter won't work.\n  if (filters?.category && filters.category !== \"All Categories\") {\n    plansQuery = query(plansQuery, where(\"category\", \"==\", filters.category))\n  }\n\n  plansQuery = query(plansQuery, orderBy(\"createdAt\", \"desc\"), limit(limitCount))\n\n  if (lastVisible) {\n    plansQuery = query(plansQuery, startAfter(lastVisible))\n  }\n\n  const documentSnapshots = await getDocs(plansQuery)\n  const plans = documentSnapshots.docs.map((doc) => {\n    const data = doc.data() || {}\n    return { id: doc.id, ...data } as Plan\n  })\n  const newLastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1]\n\n  return { plans, lastVisible: newLastVisible }\n}\n\nexport const getJoinedPlans = async (\n  userId: string,\n  lastVisible?: any,\n  limitCount = 10,\n): Promise<{ plans: Plan[]; lastVisible: any }> => {\n  let plansQuery = query(\n    collection(db, \"plans\"),\n    where(\"participantIds\", \"array-contains\", userId),\n    orderBy(\"createdAt\", \"desc\"),\n    limit(limitCount),\n  )\n\n  if (lastVisible) {\n    plansQuery = query(plansQuery, startAfter(lastVisible))\n  }\n\n  const documentSnapshots = await getDocs(plansQuery)\n  const plans = documentSnapshots.docs.map((doc) => {\n    const data = doc.data() || {}\n    return { id: doc.id, ...data } as Plan\n  })\n  const newLastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1]\n\n  return { plans, lastVisible: newLastVisible }\n}\n\nexport const getPlan = async (planId: string): Promise<Plan | null> => {\n  const planRef = doc(db, \"plans\", planId)\n  const planSnap = await getDoc(planRef)\n  if (!planSnap.exists()) return null\n  const data = planSnap.data() || {}\n  const plan = await mapPlanDoc(planSnap.id, data)\n  return plan\n}\n\nexport const joinPlan = async (\n  planId: string,\n): Promise<{ ok: true; joined: boolean; pending: boolean }> => {\n  const user = auth.currentUser\n  if (!user) throw new Error(\"Not authenticated\")\n  const token = await user.getIdToken()\n\n  const res = await fetch(`/api/plans/${encodeURIComponent(planId)}/join`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  })\n  if (!res.ok) {\n    const err = await res.json().catch(() => ({}))\n    throw new Error(err?.error || \"Failed to join plan\")\n  }\n  const data = (await res.json()) as { ok: true; joined: boolean; pending: boolean }\n  if (analytics) {\n    // Log attempt and outcome\n    logEvent(analytics, \"plan_join_result\", { planId, joined: data.joined, pending: data.pending })\n  }\n  return data\n}\n\nexport const leavePlan = async (planId: string, userId: string): Promise<void> => {\n  await runTransaction(db, async (transaction) => {\n    const planRef = doc(db, \"plans\", planId)\n    const planSnap = await transaction.get(planRef)\n\n    if (!planSnap.exists()) {\n      throw new Error(\"Plan not found.\")\n    }\n\n    const planData = planSnap.data() as Plan\n    const isJoined = planData.participantIds.includes(userId)\n\n    if (!isJoined) {\n      throw new Error(\"Not a participant of this plan.\")\n    }\n\n    if (planData.userId === userId) {\n      throw new Error(\"Organizer cannot leave their own plan.\")\n    }\n\n    transaction.update(planRef, {\n      participantIds: arrayRemove(userId),\n      currentParticipants: Math.max(0, (planData.currentParticipants || 0) - 1),\n    })\n  })\n  if (analytics) logEvent(analytics, \"plan_left\", { planId, userId })\n}\n\n// --- Plan Chat Services ---\n\nexport const sendPlanMessage = async (\n  planId: string,\n  senderId: string,\n  content: string,\n  type: \"text\" | \"image\" | \"announcement\" = \"text\"\n): Promise<string> => {\n  const senderUser = await getUserProfile(senderId)\n  if (!senderUser) {\n    throw new Error(\"Sender user not found.\")\n  }\n\n  const planRef = doc(db, \"plans\", planId)\n  const planSnap = await getDoc(planRef)\n  if (!planSnap.exists()) {\n    throw new Error(\"Plan not found.\")\n  }\n\n  const planData = planSnap.data() as Plan\n  if (!planData.participantIds.includes(senderId)) {\n    throw new Error(\"You must be a participant to send messages in this plan.\")\n  }\n\n  const messageRef = doc(collection(db, \"planMessages\"))\n  await setDoc(messageRef, {\n    id: messageRef.id,\n    planId: planId,\n    senderId: senderId,\n    sender: {\n      id: senderUser.id,\n      username: senderUser.username,\n      name: senderUser.displayName,\n      avatar: senderUser.photoURL,\n    },\n    content: content,\n    type: type,\n    createdAt: serverTimestamp(),\n    isRead: false,\n  })\n\n  // Add notification for all other participants\n  const otherParticipants = planData.participantIds.filter(id => id !== senderId)\n  for (const participantId of otherParticipants) {\n    await addDoc(collection(db, \"notifications\"), {\n      toUserId: participantId,\n      fromUser: {\n        id: senderUser.id,\n        username: senderUser.username,\n        name: senderUser.displayName,\n        avatar: senderUser.photoURL,\n      },\n      type: \"plan_message\",\n      content: `${senderUser.displayName} sent a message in \"${planData.title}\".`,\n      planId: planId,\n      isRead: false,\n      createdAt: serverTimestamp(),\n    })\n  }\n\n  if (analytics) logEvent(analytics, \"plan_message_sent\", { planId, senderId, messageType: type })\n  return messageRef.id\n}\n\nexport const getPlanMessages = async (\n  planId: string,\n  limitCount = 50,\n  lastVisible?: any\n): Promise<{ messages: PlanMessage[]; lastVisible: any }> => {\n  let messagesQuery = query(\n    collection(db, \"planMessages\"),\n    where(\"planId\", \"==\", planId),\n    orderBy(\"createdAt\", \"desc\"),\n    limit(limitCount)\n  )\n\n  if (lastVisible) {\n    messagesQuery = query(messagesQuery, startAfter(lastVisible))\n  }\n\n  const documentSnapshots = await getDocs(messagesQuery)\n  const messages = documentSnapshots.docs.map((doc) => ({ id: doc.id, ...doc.data() }) as PlanMessage)\n  const newLastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1]\n\n  return { messages: messages.reverse(), lastVisible: newLastVisible }\n}\n\n// --- Plan Management Services ---\n\nexport const updatePlan = async (\n  planId: string,\n  userId: string,\n  updates: {\n    title?: string\n    description?: string\n    location?: string\n    dateTime?: Date\n    maxParticipants?: number\n    costPerHead?: number\n    currency?: string\n    tags?: string[]\n    requirements?: string[]\n    whatToBring?: string[]\n    imageUrl?: string\n  }\n): Promise<void> => {\n  const planRef = doc(db, \"plans\", planId)\n  const planSnap = await getDoc(planRef)\n\n  if (!planSnap.exists()) {\n    throw new Error(\"Plan not found.\")\n  }\n\n  const planData = planSnap.data() as Plan\n  if (planData.userId !== userId) {\n    throw new Error(\"Only the organizer can update this plan.\")\n  }\n\n  await updateDoc(planRef, {\n    ...updates,\n    updatedAt: serverTimestamp(),\n  })\n\n  // Send announcement to all participants about the update\n  const participants = planData.participantIds.filter(id => id !== userId)\n  const organizerUser = await getUserProfile(userId)\n  \n  for (const participantId of participants) {\n    await addDoc(collection(db, \"notifications\"), {\n      toUserId: participantId,\n      fromUser: {\n        id: organizerUser?.id || userId,\n        username: organizerUser?.username || \"Organizer\",\n        name: organizerUser?.displayName || \"Organizer\",\n        avatar: organizerUser?.photoURL,\n      },\n      type: \"plan_update\",\n      content: `The plan \"${planData.title}\" has been updated.`,\n      planId: planId,\n      isRead: false,\n      createdAt: serverTimestamp(),\n    })\n  }\n\n  if (analytics) logEvent(analytics, \"plan_updated\", { planId, userId })\n}\n\nexport const cancelPlan = async (planId: string, userId: string, reason?: string): Promise<void> => {\n  const planRef = doc(db, \"plans\", planId)\n  const planSnap = await getDoc(planRef)\n\n  if (!planSnap.exists()) {\n    throw new Error(\"Plan not found.\")\n  }\n\n  const planData = planSnap.data() as Plan\n  if (planData.userId !== userId) {\n    throw new Error(\"Only the organizer can cancel this plan.\")\n  }\n\n  await updateDoc(planRef, {\n    status: \"cancelled\",\n    updatedAt: serverTimestamp(),\n  })\n\n  // Send cancellation notification to all participants\n  const participants = planData.participantIds.filter(id => id !== userId)\n  const organizerUser = await getUserProfile(userId)\n  \n  for (const participantId of participants) {\n    await addDoc(collection(db, \"notifications\"), {\n      toUserId: participantId,\n      fromUser: {\n        id: organizerUser?.id || userId,\n        username: organizerUser?.username || \"Organizer\",\n        name: organizerUser?.displayName || \"Organizer\",\n        avatar: organizerUser?.photoURL,\n      },\n      type: \"plan_cancelled\",\n      content: `The plan \"${planData.title}\" has been cancelled.${reason ? ` Reason: ${reason}` : \"\"}`,\n      planId: planId,\n      isRead: false,\n      createdAt: serverTimestamp(),\n    })\n  }\n\n  if (analytics) logEvent(analytics, \"plan_cancelled\", { planId, userId })\n}\n\nexport const deletePlan = async (planId: string, userId: string): Promise<void> => {\n  const planRef = doc(db, \"plans\", planId)\n  const planSnap = await getDoc(planRef)\n\n  if (!planSnap.exists()) {\n    throw new Error(\"Plan not found.\")\n  }\n\n  const planData = planSnap.data() as Plan\n  if (planData.userId !== userId) {\n    throw new Error(\"Only the organizer can delete this plan.\")\n  }\n\n  // Delete all plan messages\n  const messagesQuery = query(collection(db, \"planMessages\"), where(\"planId\", \"==\", planId))\n  const messagesSnap = await getDocs(messagesQuery)\n  const deletePromises = messagesSnap.docs.map(doc => deleteDoc(doc.ref))\n  await Promise.all(deletePromises)\n\n  // Delete the plan\n  await deleteDoc(planRef)\n\n  if (analytics) logEvent(analytics, \"plan_deleted\", { planId, userId })\n}\n\nexport const sendPlanAnnouncement = async (\n  planId: string,\n  organizerId: string,\n  content: string\n): Promise<string> => {\n  const planRef = doc(db, \"plans\", planId)\n  const planSnap = await getDoc(planRef)\n\n  if (!planSnap.exists()) {\n    throw new Error(\"Plan not found.\")\n  }\n\n  const planData = planSnap.data() as Plan\n  if (planData.userId !== organizerId) {\n    throw new Error(\"Only the organizer can send announcements.\")\n  }\n\n  const organizerUser = await getUserProfile(organizerId)\n  if (!organizerUser) {\n    throw new Error(\"Organizer user not found.\")\n  }\n\n  // Send announcement message\n  const messageId = await sendPlanMessage(planId, organizerId, content, \"announcement\")\n\n  // Send notification to all participants\n  const participants = planData.participantIds.filter(id => id !== organizerId)\n  for (const participantId of participants) {\n    await addDoc(collection(db, \"notifications\"), {\n      toUserId: participantId,\n      fromUser: {\n        id: organizerUser.id,\n        username: organizerUser.username,\n        name: organizerUser.displayName,\n        avatar: organizerUser.photoURL,\n      },\n      type: \"plan_announcement\",\n      content: `${organizerUser.displayName} made an announcement in \"${planData.title}\".`,\n      planId: planId,\n      isRead: false,\n      createdAt: serverTimestamp(),\n    })\n  }\n\n  if (analytics) logEvent(analytics, \"plan_announcement_sent\", { planId, organizerId })\n  return messageId\n}\n\nexport const getPlanMembers = async (planId: string): Promise<UserProfile[]> => {\n  const planRef = doc(db, \"plans\", planId)\n  const planSnap = await getDoc(planRef)\n  if (!planSnap.exists()) return []\n\n  const planData = planSnap.data() as Plan\n  const participantIds = planData.participantIds || []\n\n  if (participantIds.length === 0) return []\n\n  // Fetch each user individually since Firestore has a limit of 10 items in \"in\" queries\n  const userPromises = participantIds.map(async (userId) => {\n    const userRef = doc(db, \"users\", userId)\n    const userSnap = await getDoc(userRef)\n    if (userSnap.exists()) {\n      return { id: userSnap.id, ...userSnap.data() } as UserProfile\n    }\n    return null\n  })\n\n  const users = await Promise.all(userPromises)\n  return users.filter((user): user is UserProfile => user !== null)\n}\n\n// --- Message Services ---\n\nexport const getConversationList = (userId: string, callback: (conversations: Message[]) => void) => {\n  const messagesQuery = query(\n    collection(db, \"messages\"),\n    where(\"participants\", \"array-contains\", userId),\n    orderBy(\"createdAt\", \"desc\"),\n  )\n\n  const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {\n    const conversationsMap = new Map<string, Message>()\n    snapshot.docs.forEach((doc) => {\n      const message = { id: doc.id, ...doc.data() } as Message\n      const otherUserId = message.senderId === userId ? message.receiverId : message.senderId\n      const conversationKey = [userId, otherUserId].sort().join(\"_\")\n\n      // Only keep the latest message for each conversation\n      if (\n        !conversationsMap.has(conversationKey) ||\n        message.createdAt > conversationsMap.get(conversationKey)!.createdAt\n      ) {\n        conversationsMap.set(conversationKey, message)\n      }\n    })\n    callback(Array.from(conversationsMap.values()).sort((a, b) => {\n      const aTime = toDate(a.createdAt)?.getTime() || 0\n      const bTime = toDate(b.createdAt)?.getTime() || 0\n      return bTime - aTime\n    }))\n  })\n  return unsubscribe\n}\n\nexport const getMessages = (userId1: string, userId2: string, callback: (messages: Message[]) => void) => {\n  const conversationId = [userId1, userId2].sort().join(\"_\")\n  const messagesQuery = query(\n    collection(db, \"messages\"),\n    where(\"conversationId\", \"==\", conversationId),\n    orderBy(\"createdAt\", \"asc\"),\n  )\n  const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {\n    const messages = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }) as Message)\n    callback(messages)\n  })\n  return unsubscribe\n}\n\nexport const sendMessage = async (senderId: string, receiverId: string, content: string): Promise<void> => {\n  const conversationId = [senderId, receiverId].sort().join(\"_\")\n  const senderUser = await getUserProfile(senderId)\n  const receiverUser = await getUserProfile(receiverId)\n\n  if (!senderUser || !receiverUser) {\n    throw new Error(\"Sender or receiver user not found.\")\n  }\n\n  await addDoc(collection(db, \"messages\"), {\n    conversationId: conversationId,\n    senderId: senderId,\n    receiverId: receiverId,\n    content: content,\n    type: \"text\",\n    createdAt: serverTimestamp(),\n    isRead: false,\n    participants: [senderId, receiverId],\n  })\n\n  // Add notification for the receiver\n  await addDoc(collection(db, \"notifications\"), {\n    toUserId: receiverId,\n    fromUser: {\n      id: senderUser.id,\n      username: senderUser.username,\n      name: senderUser.displayName,\n      avatar: senderUser.photoURL,\n    },\n    type: \"message\",\n    content: `${senderUser.displayName} sent you a message.`,\n    isRead: false,\n    createdAt: serverTimestamp(),\n  })\n  if (analytics) logEvent(analytics, \"message_sent\", { senderId, receiverId })\n}\n\nexport const markMessagesAsRead = async (senderId: string, receiverId: string): Promise<void> => {\n  const messagesQuery = query(\n    collection(db, \"messages\"),\n    where(\"senderId\", \"==\", senderId),\n    where(\"receiverId\", \"==\", receiverId),\n    where(\"isRead\", \"==\", false),\n  )\n  const snapshot = await getDocs(messagesQuery)\n  const batch = writeBatch(db)\n  snapshot.docs.forEach((doc) => {\n    batch.update(doc.ref, { isRead: true })\n  })\n  await batch.commit()\n}\n\n// --- Notification Services ---\n\nexport const getNotifications = (userId: string, callback: (notifications: Notification[]) => void) => {\n  const notificationsQuery = query(\n    collection(db, \"notifications\"),\n    where(\"toUserId\", \"==\", userId),\n    orderBy(\"createdAt\", \"desc\"),\n  )\n  const unsubscribe = onSnapshot(notificationsQuery, (snapshot) => {\n    const notifications = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }) as Notification)\n    callback(notifications)\n  })\n  return unsubscribe\n}\n\nexport const markNotificationAsRead = async (notificationId: string): Promise<void> => {\n  const notificationRef = doc(db, \"notifications\", notificationId)\n  await updateDoc(notificationRef, { isRead: true })\n  if (analytics) logEvent(analytics, \"notification_read\", { notificationId })\n}\n\n// --- Story Services ---\n\nexport const createStory = async (userId: string, imageFile: File): Promise<string> => {\n  const userRef = doc(db, \"users\", userId)\n  const userSnap = await getDoc(userRef)\n  if (!userSnap.exists()) {\n    throw new Error(\"User not found.\")\n  }\n  const userData = userSnap.data() as UserProfile\n\n  const imageRef = ref(storage, `stories/${userId}/${imageFile.name}_${Date.now()}`)\n  const snapshot = await uploadBytes(imageRef, imageFile)\n  const imageUrl = await getDownloadURL(snapshot.ref)\n\n  const newStoryRef = doc(collection(db, \"stories\"))\n  await setDoc(newStoryRef, {\n    id: newStoryRef.id,\n    userId: userId,\n    author: {\n      id: userData.id,\n      username: userData.username,\n      name: userData.displayName,\n      avatar: userData.photoURL,\n    },\n    imageUrl: imageUrl,\n    createdAt: serverTimestamp(),\n    expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // Expires in 24 hours\n  })\n  if (analytics) logEvent(analytics, \"story_created\", { storyId: newStoryRef.id, userId })\n  return newStoryRef.id\n}\n\nexport const getActiveStories = (callback: (stories: any[]) => void) => {\n  try {\n    const storiesQuery = query(\n      collection(db, \"stories\"),\n      where(\"expiresAt\", \">\", new Date()),\n      orderBy(\"expiresAt\", \"desc\"),\n    )\n    const unsubscribe = onSnapshot(storiesQuery, (snapshot) => {\n      const storiesMap = new Map<string, any[]>() // userId -> array of stories\n      snapshot.docs.forEach((doc) => {\n        const story = { id: doc.id, ...doc.data() } as any\n        // Defensive: Only include stories with a valid expiresAt\n        if (!story.expiresAt || isNaN(new Date(story.expiresAt).getTime())) return\n        if (!storiesMap.has(story.userId)) {\n          storiesMap.set(story.userId, [])\n        }\n        storiesMap.get(story.userId)?.push(story)\n      })\n      callback(Array.from(storiesMap.values()))\n    }, (error) => {\n      console.error(\"Error in getActiveStories Firestore listener:\", error)\n      callback([])\n    })\n    return unsubscribe\n  } catch (err) {\n    console.error(\"Error setting up getActiveStories Firestore query:\", err)\n    callback([])\n    return () => {}\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/* Storage                                                                    */\n/* -------------------------------------------------------------------------- */\n\nexport const uploadFile = async (file: File, path: string): Promise<string> => {\n  try {\n    const storageRef = ref(storage, path)\n    const snap = await uploadBytes(storageRef, file)\n    return await getDownloadURL(snap.ref)\n  } catch (err) {\n    // ErrorHandler.handleStorageError(err, \"Failed to upload file\")\n    // Use generic error handler instead\n    // If ErrorHandler is not used elsewhere, remove its import\n    // Otherwise, use ErrorHandler.handle(err, \"storage\")\n    // Or just log the error\n    // Storage upload error handled\n    throw err\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/* Auth helpers                                                               */\n/* -------------------------------------------------------------------------- */\n\nexport const getCurrentUser = () => auth.currentUser\n// signOutUser is not used, logout is handled by auth-context\n","usedDeprecatedRules":[]}]